/*
 * main.c
 *
 *  Created on: Sep 8, 2024
 *      Author: Salah-Eldin
 */

//===========================================
// Includes
//===========================================
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

//===========================================
// Macro declarations
//===========================================
#define FALSE 			0
#define TRUE  			1

#define ZERO_INIT 		0
#define ONE_INC 		1

#define COUNT_UP_MODE   0
#define COUNT_DOWN_MODE 1

#define BUTTON_PRESSED 	0
#define BUTTON_RELEASE 	1

#define S_ONES_ENABLE 	5
#define S_TENS_ENABLE 	4
#define M_ONES_ENABLE 	3
#define M_TENS_ENABLE 	2
#define H_ONES_ENABLE 	1
#define H_TENS_ENABLE 	0

#define CLEAR_ENABLE_PINS_MASK 	0b11000000
#define CLEAR_DECODER_PINS_MASK 0xF0
#define SEGMENT_DISP_DELAY 		2  // Delay in ms between segment displays

#define S_M_LIMIT 		59  	// Limit for seconds and minutes (0-59)
#define H_LIMIT 		23  	// Hour limit (0-23)
#define TOTAL_S_LIMIT 	86399  	// Maximum total seconds for a 24-hour cycle
#define M_TO_S_CONV 	60  	// Conversion factor from minutes to seconds
#define H_TO_S_CONV 	3600  	// Conversion factor from hours to seconds
#define ONES_TENS_CONV 	10  	// Conversion factor for separating ones and tens digits

//===========================================
// Macro functions declarations
//===========================================
// Read button states, using bitwise AND to check if specific pins are high
#define MODE_BUTTON_STATE  (PINB & _BV(7))

#define H_INC_BUTTON_STATE (PINB & _BV(1))
#define H_DEC_BUTTON_STATE (PINB & _BV(0))
#define M_INC_BUTTON_STATE (PINB & _BV(4))
#define M_DEC_BUTTON_STATE (PINB & _BV(3))
#define S_INC_BUTTON_STATE (PINB & _BV(6))
#define S_DEC_BUTTON_STATE (PINB & _BV(5))

// Activate and deactivate the alarm pin
#define ACTIVATE_ALARM   (PORTD |= _BV(0))
#define DEACTIVATE_ALARM (PORTD &= ~_BV(0))
//===========================================
// Functions declarations
//===========================================
static inline void leds_init(void);
static inline void buzzer_init(void);
static inline void seven_segment_pins_init(void);
static inline void adjust_time_buttons_init(void);
static inline void count_mode_button_init(void);
static inline void reset_button_int0_init(void);
static inline void pause_button_int1_init(void);
static inline void resume_button_int2_init(void);
static inline void timer1_init(void);

static inline void display_time(void); // Display time on the multiplexed 7-segments
static inline void update_time(void);  		// Update time based on count mode
static inline void check_update_mode(void); // Check if the mode button has been pressed

static inline void handle_hours_change_buttons(void); // Handle hour increment/decrement buttons
static inline void handle_minutes_change_buttons(void); // Handle minute increment/decrement buttons
static inline void handle_seconds_change_buttons(void); // Handle second increment/decrement buttons

//===========================================
// Data types declarations
//===========================================
volatile struct time_t {
	uint32_t total_Seconds; // To store a value of seconds for 24 hours -1 second = 86399
	uint8_t seconds;
	uint8_t minutes;
	uint8_t hours;
} time; // Struct to hold time values in hours, minutes, seconds, and total seconds

union flag {
	struct {
		uint8_t modeFlag :1;  	   // Flag for mode button state change
		uint8_t hoursIncFlag :1;   // Flag for hour increment button
		uint8_t hoursDecFlag :1;   // Flag for hour decrement button
		uint8_t minutesIncFlag :1; // Flag for minute increment button
		uint8_t minutesDecFlag :1; // Flag for minute decrement button
		uint8_t secondsIncFlag :1; // Flag for second increment button
		uint8_t secondsDecFlag :1; // Flag for second decrement button
		uint8_t :1;	   // Reserved
	};
	uint8_t allFlags;
} flags; // Struct to hold the values of the flags for buttons

//===========================================
// Global variables
//===========================================
volatile uint8_t timer1_ticks = ZERO_INIT;  // Keeps track of Timer1 ticks

volatile uint8_t paused = ZERO_INIT;  // Indicates if the counting is paused

uint8_t mode = COUNT_UP_MODE; // Variable to store the current mode (up/down count)

//===========================================
// main function
//===========================================
int main() {

	// Initialize system components
	leds_init();  				// Set up LEDs
	buzzer_init();  			// Set up buzzer
	seven_segment_pins_init();  // Set up 7-segment display
	adjust_time_buttons_init(); // Set up time adjustment buttons
	count_mode_button_init();  	// Set up count mode selection button
	reset_button_int0_init();  	// Set up reset button
	pause_button_int1_init();  	// Set up pause button
	resume_button_int2_init();  // Set up resume button
	timer1_init();  			// Set up Timer1

	// Enable global interrupts
	sei();

	for (;;) {
		// Display current time on the 6 multiplexed 7-segment displays
		display_time();

		// Handle timer-based counting
		if (timer1_ticks) {
			timer1_ticks--;  // Decrement tick count
			update_time(); 	 // Update time accordingly
		}

		// Check and update mode (count up or count down)
		check_update_mode();

		// Activate alarm if in count-down mode and time reaches zero
		if (FALSE == paused && COUNT_DOWN_MODE == mode
				&& ZERO_INIT == time.total_Seconds)
			ACTIVATE_ALARM;  	// Activate alarm (turn on buzzer)
		else
			DEACTIVATE_ALARM;	// Deactivate alarm (turn off buzzer)

		// If paused, handle the time change buttons
		if (paused) {
			handle_hours_change_buttons();    // Handle hour adjustments
			handle_minutes_change_buttons();  // Handle minute adjustments
			handle_seconds_change_buttons();  // Handle second adjustments
		}

	}

	return 0;
}

//===========================================
// Initializing Functions Definitions
//===========================================
static inline void leds_init(void) {
	// Set PD4 and PD5 as output pins for LEDs, turn on PD4 and off PD5
	DDRD |= _BV(4) | _BV(5);
	PORTD = (PORTD & ~_BV(5)) | _BV(4);
}

static inline void buzzer_init(void) {
	// Set PD0 as output pin for the buzzer, and turn it off initially
	DDRD |= _BV(0);
	PORTD &= ~_BV(0);
}

static inline void seven_segment_pins_init(void) {
	// Set PC0-PC3 as output for the 7-segment decoder
	DDRC |= 0x0F;
	PORTC &= 0xF0;  // Initialize decoder to display 0

	// Set PA0-PA5 as output for enabling displays
	DDRA |= 0b00111111;
	PORTA &= 0b11000000;  // Disable all segments initially
}

static inline void adjust_time_buttons_init(void) {
	// Set PB0, PB1, PB3, PB4, PB5, and PB6 as input for time adjustment buttons
	DDRB &= 0b10000100;
	// pull-ups enabled
	PORTB |= 0b01111011;

	// Ensure flags are FALSE at start
	flags.allFlags = FALSE;
}

static inline void count_mode_button_init(void) {
	// Set PB7 as input for mode selection button with pull-up enabled
	DDRB &= ~_BV(7);
	PORTB |= _BV(7);
}

static inline void reset_button_int0_init(void) {
	// Set PD2 as input for reset button, enable INT0 interrupt on falling edge
	DDRD &= ~_BV(2);
	PORTD |= _BV(2);

	GICR |= _BV(INT0);   // Enable external interrupt INT0
	MCUCR |= _BV(ISC01); // Trigger INT0 on falling edge
	GIFR |= _BV(INTF0);  // Clear INT0 interrupt flag
}

static inline void pause_button_int1_init(void) {
	// Set PD3 as input for pause button, enable INT1 interrupt on rising edge
	DDRD &= ~_BV(3);
	GICR |= _BV(INT1);  			  // Enable external interrupt INT1
	MCUCR |= _BV(ISC11) | _BV(ISC10); // Trigger INT1 on rising edge
	GIFR |= _BV(INTF1);  			  // Clear INT1 interrupt flag
}

static inline void resume_button_int2_init(void) {
	// Set PB2 as input for resume button, enable INT2 interrupt on falling edge
	DDRB &= ~_BV(2);
	PORTB |= _BV(2);  // Enable pull-up resistor on PB2

	GICR |= _BV(INT2);  // Enable external interrupt INT2
	GIFR |= _BV(INTF2); // Clear INT2 interrupt flag
}

static inline void timer1_init(void) {
	// Set Timer1 to CTC mode, pre-scaler of 1024, and output compare value for 1-second interval
	TCCR1B |= _BV(WGM12) | _BV(CS10) | _BV(CS12);
	TCNT1 = 0;  		  // Initialize counter
	OCR1A = 15624; // Set the output compare register to achieve a 1-second interval (16 MHz clock)
	TIMSK |= _BV(OCIE1A); // Enable output compare interrupt for Timer1

	// Ensure Start from 00:00:00
	time.hours = ZERO_INIT;
	time.minutes = ZERO_INIT;
	time.seconds = ZERO_INIT;
	time.total_Seconds = ZERO_INIT;
}

//===========================================
// Timer ISR (Interrupt Service Routine)
//===========================================
ISR( TIMER1_COMPA_vect) {
	// Timer1 interrupt occurs every 1 second (as configured by OCR1A)
	timer1_ticks++;  // Increment tick count
}

//===========================================
// External Interrupt Service Routines
//===========================================

// INT0 ISR - Reset button handler
ISR( INT0_vect) {
	// Reset time to zero (00:00:00)
	time.total_Seconds = ZERO_INIT;
	time.hours = ZERO_INIT;
	time.minutes = ZERO_INIT;
	time.seconds = ZERO_INIT;
	// Reset timer ticks & timer register to start counting from 0
	timer1_ticks = ZERO_INIT;
	TCNT1 = ZERO_INIT;
}

// INT1 ISR - Pause button handler
ISR( INT1_vect) {
	paused = TRUE;  // Set paused flag to true
	TCCR1B &= ~_BV(CS10) & ~_BV(CS12); // Disable the timer by clearing the CS10 and CS12 bits (stops the timer)
}

// INT2 ISR - Resume button handler
ISR( INT2_vect) {
	paused = FALSE;  // Set paused flag to false
	TCCR1B |= _BV(CS10) | _BV(CS12); // Enable the timer by setting the CS10 and CS12 bits (starts the timer with frequency = Fosc/1024)
}

//===========================================
// Core Logic Functions Definitions
//===========================================
static inline void update_time(void) {
	// Update time based on mode (count up or count down)
	if (COUNT_UP_MODE == mode) {
		if (time.total_Seconds < TOTAL_S_LIMIT) {
			time.total_Seconds++;  // Increment total seconds
		} else {
			time.total_Seconds = ZERO_INIT; // Reset to 0 when max time is reached
		}
	} else if (COUNT_DOWN_MODE == mode) {
		if (time.total_Seconds > ZERO_INIT) {
			time.total_Seconds--;  // Decrement total seconds
		} else {
			time.total_Seconds = ZERO_INIT; // Keep at 0 when count-down finishes
		}
	}

	// Calculate hours, minutes, and seconds from total seconds
	time.seconds = time.total_Seconds % (S_M_LIMIT + ONE_INC);
	time.minutes = (time.total_Seconds / M_TO_S_CONV) % (S_M_LIMIT + ONE_INC);
	time.hours = time.total_Seconds / H_TO_S_CONV;
}

static inline void display_time(void) {
	// Disable all the segments and enable the ones of the seconds
	PORTA = (PORTA & CLEAR_ENABLE_PINS_MASK) | _BV(S_ONES_ENABLE);
	// Display ones of the Seconds
	PORTC = (PORTC & CLEAR_DECODER_PINS_MASK) | (time.seconds % ONES_TENS_CONV);
	_delay_ms(SEGMENT_DISP_DELAY);

	// Disable all the segments and enable the tens of the seconds
	PORTA = (PORTA & CLEAR_ENABLE_PINS_MASK) | _BV(S_TENS_ENABLE);
	// Display tens of the Seconds
	PORTC = (PORTC & CLEAR_DECODER_PINS_MASK) | (time.seconds / ONES_TENS_CONV);
	_delay_ms(SEGMENT_DISP_DELAY);

	// Disable all the segments and enable the ones of the minutes
	PORTA = (PORTA & CLEAR_ENABLE_PINS_MASK) | _BV(M_ONES_ENABLE);
	// Display ones of the Minutes
	PORTC = (PORTC & CLEAR_DECODER_PINS_MASK) | (time.minutes % ONES_TENS_CONV);
	_delay_ms(SEGMENT_DISP_DELAY);

	// Disable all the segments and enable the tens of the minutes
	PORTA = (PORTA & CLEAR_ENABLE_PINS_MASK) | _BV(M_TENS_ENABLE);
	// Display tens of the Minutes
	PORTC = (PORTC & CLEAR_DECODER_PINS_MASK) | (time.minutes / ONES_TENS_CONV);
	_delay_ms(SEGMENT_DISP_DELAY);

	// Disable all the segments and enable the ones of the hours
	PORTA = (PORTA & CLEAR_ENABLE_PINS_MASK) | _BV(H_ONES_ENABLE);
	// Display ones of the Hours
	PORTC = (PORTC & CLEAR_DECODER_PINS_MASK) | (time.hours % ONES_TENS_CONV);
	_delay_ms(SEGMENT_DISP_DELAY);

	// Disable all the segments and enable the tens of the hours
	PORTA = (PORTA & CLEAR_ENABLE_PINS_MASK) | _BV(H_TENS_ENABLE);
	// Display tens of the Hours
	PORTC = (PORTC & CLEAR_DECODER_PINS_MASK) | (time.hours / ONES_TENS_CONV);
	_delay_ms(SEGMENT_DISP_DELAY);
}

static inline void check_update_mode(void) {
	// Check if the mode button has been pressed
	if (BUTTON_PRESSED == MODE_BUTTON_STATE) {
		if (ZERO_INIT == flags.modeFlag) {
			// Toggle mode between count up and count down
			if (COUNT_UP_MODE == mode) {
				mode = COUNT_DOWN_MODE;
				PORTD = (PORTD & ~_BV(4)) | _BV(5);
			} else {
				mode = COUNT_UP_MODE;
				PORTD = (PORTD & ~_BV(5)) | _BV(4);
			}

			flags.modeFlag = TRUE;  // Set flag to indicate button press handled
		}
	} else {
		flags.modeFlag = FALSE;  // Reset flag when button is released
	}
}

//===========================================
// Button Handling Functions Definitions
//===========================================
static inline void handle_hours_change_buttons(void) {
	// Handle hour increment and decrement buttons
	if (BUTTON_PRESSED == H_INC_BUTTON_STATE) {
		if (FALSE == flags.hoursIncFlag && time.hours < H_LIMIT) {
			time.hours++;  // Increment hours
			time.total_Seconds += H_TO_S_CONV; // Increment total seconds a hour
			flags.hoursIncFlag = TRUE; // Set flag to indicate button press handled
		}
	} else {
		flags.hoursIncFlag = FALSE;  // Reset flag when button is released
	}

	if (BUTTON_PRESSED == H_DEC_BUTTON_STATE) {
		if (FALSE == flags.hoursDecFlag && time.hours > ZERO_INIT) {
			time.hours--;  // Decrement hours
			time.total_Seconds -= H_TO_S_CONV; // Decrement total seconds a hour
			flags.hoursDecFlag = TRUE; // Set flag to indicate button press handled
		}
	} else {
		flags.hoursDecFlag = FALSE; // Reset flag when button is released
	}
}

static inline void handle_minutes_change_buttons(void) {
	// Handle minute increment and decrement buttons
	if (BUTTON_PRESSED == M_INC_BUTTON_STATE) {
		if (FALSE == flags.minutesIncFlag && time.minutes < S_M_LIMIT) {
			time.minutes++;  // Increment minutes
			time.total_Seconds += M_TO_S_CONV; // Increment total seconds a minute
			flags.minutesIncFlag = TRUE; // Set flag to indicate button press handled
		}
	} else {
		flags.minutesIncFlag = FALSE; // Reset flag when button is released
	}

	if (BUTTON_PRESSED == M_DEC_BUTTON_STATE) {
		if (FALSE == flags.minutesDecFlag && time.minutes > ZERO_INIT) {
			time.minutes--;  // Decrement minutes
			time.total_Seconds -= M_TO_S_CONV; // Decrement total seconds a minutes
			flags.minutesDecFlag = TRUE; // Set flag to indicate button press handled
		}
	} else {
		flags.minutesDecFlag = FALSE; // Reset flag when button is released
	}
}

static inline void handle_seconds_change_buttons(void) {
	// Handle second increment and decrement buttons
	if (BUTTON_PRESSED == S_INC_BUTTON_STATE) {
		if (FALSE == flags.secondsIncFlag && time.seconds < S_M_LIMIT) {
			time.seconds++;  // Increment seconds
			time.total_Seconds++; // Increment total seconds
			flags.secondsIncFlag = TRUE; // Set flag to indicate button press handled
		}
	} else {
		flags.secondsIncFlag = FALSE; // Reset flag when button is released
	}

	if (BUTTON_PRESSED == S_DEC_BUTTON_STATE) {
		if (FALSE == flags.secondsDecFlag && time.seconds > ZERO_INIT) {
			time.seconds--;  // Decrement seconds
			time.total_Seconds--; // Decrement total seconds
			flags.secondsDecFlag = TRUE; // Set flag to indicate button press handled
		}
	} else {
		flags.secondsDecFlag = FALSE; // Reset flag when button is released
	}
}
