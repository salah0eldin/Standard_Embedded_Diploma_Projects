/*
 * main.c
 *
 *  Created on: Sep 8, 2024
 *      Author: Salah-Eldin
 */

#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

#define MODE_BUTTON_STATE  (PINB & _BV(7))

#define H_INC_BUTTON_STATE (PINB & _BV(1))
#define H_DEC_BUTTON_STATE (PINB & _BV(0))
#define M_INC_BUTTON_STATE (PINB & _BV(4))
#define M_DEC_BUTTON_STATE (PINB & _BV(3))
#define S_INC_BUTTON_STATE (PINB & _BV(6))
#define S_DEC_BUTTON_STATE (PINB & _BV(5))

#define TRUE  1
#define FALSE 0

#define COUNT_UP_MODE   0
#define COUNT_DOWN_MODE 1

static inline void leds_init(void);
static inline void buzzer_init(void);
static inline void seven_segment_pins_init(void);
static inline void adjust_time_buttons_init(void);
static inline void count_mode_button_init(void);
static inline void reset_button_int0_init(void);
static inline void pause_button_int1_init(void);
static inline void resume_button_int2_init(void);
static inline void timer1_init(void);

static inline void display_time(void);
static inline void update_time(void);

static inline void check_update_mode(void);

volatile struct time_t {
	uint8_t seconds;
	uint8_t minutes;
	uint8_t hours;
	uint32_t total_Seconds;
} time;

volatile uint8_t timer1_ticks = 0;

volatile uint8_t paused = 0;

uint8_t mode = COUNT_UP_MODE;

uint8_t modeFlag;
uint8_t hoursIncFlag;
uint8_t hoursDecFlag;
uint8_t minutesIncFlag;
uint8_t minutesDecFlag;
uint8_t secondsIncFlag;
uint8_t secondsDecFlag;

int main() {

	leds_init();
	buzzer_init();
	seven_segment_pins_init();
	adjust_time_buttons_init();
	count_mode_button_init();
	reset_button_int0_init();
	pause_button_int1_init();
	resume_button_int2_init();
	timer1_init();

	sei();

	for (;;) {

		display_time();

		check_update_mode();

		if (timer1_ticks) {
			timer1_ticks--;
			update_time();
		}

		if (paused) {
			if (!H_INC_BUTTON_STATE) {
				if (hoursIncFlag) {
					hoursIncFlag = 0;
					if (time.hours < 23) {
						time.hours++;
						time.total_Seconds += 3600;
					}
				}
			} else {
				hoursIncFlag = 1;
			}
			if (!H_DEC_BUTTON_STATE) {
				if (hoursDecFlag) {
					hoursDecFlag = 0;
					if (time.hours > 0) {
						time.hours--;
						time.total_Seconds -= 60 * 60;
					}
				}
			} else {
				hoursDecFlag = 1;
			}
			if (!M_INC_BUTTON_STATE) {
				if (minutesIncFlag) {
					minutesIncFlag = 0;
					if (time.minutes < 59) {
						time.minutes++;
						time.total_Seconds += 60;
					}
				}
			} else {
				minutesIncFlag = 1;
			}
			if (!M_DEC_BUTTON_STATE) {
				if (minutesDecFlag) {
					minutesDecFlag = 0;
					if (time.minutes > 0) {
						time.minutes--;
						time.total_Seconds -= 60;
					}
				}
			} else {
				minutesDecFlag = 1;
			}
			if (!S_INC_BUTTON_STATE) {
				if (secondsIncFlag) {
					secondsIncFlag = 0;
					if (time.seconds < 59) {
						time.seconds++;
						time.total_Seconds++;
					}
				}
			} else {
				secondsIncFlag = 1;
			}
			if (!S_DEC_BUTTON_STATE) {
				if (secondsDecFlag) {
					secondsDecFlag = 0;
					if (time.seconds > 0) {
						time.seconds--;
						time.total_Seconds--;
					}
				}
			} else {
				secondsDecFlag = 1;
			}
		}

		if (!time.total_Seconds)
			PORTD |= _BV(0);
		else
			PORTD &= ~_BV(0);
	}

	return 0;
}

static inline void leds_init(void) {
	DDRD |= _BV(4) | _BV(5);
	PORTD &= ~_BV(4) & ~_BV(5);
}

static inline void buzzer_init(void) {
	DDRD |= _BV(0);
	PORTD &= ~_BV(0);
}

static inline void seven_segment_pins_init(void) {
	DDRC |= 0x0F;
	PORTC &= 0xF0;

	DDRA |= 0b00111111;
	PORTA &= 0b11000000;
}

static inline void adjust_time_buttons_init(void) {
	DDRB &= 0b10000100;
	PORTB |= 0b01111011;
}

static inline void count_mode_button_init(void) {
	DDRB &= ~_BV(7);
	PORTB |= _BV(7);
}

static inline void reset_button_int0_init(void) {
	DDRD &= ~_BV(2);
	PORTD |= _BV(2);

	GICR |= _BV(INT0);
	MCUCR |= _BV(ISC01);
	GIFR |= _BV(INTF0);
}

static inline void pause_button_int1_init(void) {
	DDRD &= ~_BV(3);

	GICR |= _BV(INT1);
	MCUCR |= _BV(ISC11) | _BV(ISC10);
	GIFR |= _BV(INTF1);
}

static inline void resume_button_int2_init(void) {
	DDRB &= ~_BV(2);
	PORTB |= _BV(2);

	GICR |= _BV(INT2);
	GIFR |= _BV(INTF2);
}

static inline void timer1_init(void) {
	TCCR1B |= _BV(WGM12) | _BV(CS10) | _BV(CS12);
	TCNT1 = 0;
	OCR1A = 15625;

	TIMSK |= _BV(OCIE1A);
	TIFR |= _BV(OCF1A);
}

static inline void display_time(void) {
	PORTA = (PORTA & 0b11000000) | _BV(5);
	PORTC = (PORTC & 0xF0) | (time.seconds % 10);
	_delay_ms(2);
	PORTA = (PORTA & 0b11000000) | _BV(4);
	PORTC = (PORTC & 0xF0) | (time.seconds / 10);
	_delay_ms(2);
	PORTA = (PORTA & 0b11000000) | _BV(3);
	PORTC = (PORTC & 0xF0) | (time.minutes % 10);
	_delay_ms(2);
	PORTA = (PORTA & 0b11000000) | _BV(2);
	PORTC = (PORTC & 0xF0) | (time.minutes / 10);
	_delay_ms(2);
	PORTA = (PORTA & 0b11000000) | _BV(1);
	PORTC = (PORTC & 0xF0) | (time.hours % 10);
	_delay_ms(2);
	PORTA = (PORTA & 0b11000000) | _BV(0);
	PORTC = (PORTC & 0xF0) | (time.hours / 10);
	_delay_ms(2);
}

static inline void update_time(void) {
	if (mode == COUNT_UP_MODE) {
		time.total_Seconds =
				(time.total_Seconds > 86399) ? 0 : time.total_Seconds + 1;
	} else {
		time.total_Seconds =
				(time.total_Seconds == 0) ? 0 : time.total_Seconds - 1;
	}

	time.seconds = time.total_Seconds % 60;
	time.minutes = (time.total_Seconds / 60) % 60;
	time.hours = time.total_Seconds / 3600;
}

static inline void check_update_mode(void) {
	if (!MODE_BUTTON_STATE) {
		if (modeFlag) {
			modeFlag = FALSE;
			mode = (mode == COUNT_UP_MODE) ? COUNT_DOWN_MODE : COUNT_UP_MODE;
		}
	} else {
		modeFlag = TRUE;
	}
}

ISR(TIMER1_COMPA_vect) {
	timer1_ticks++;
}

ISR(INT0_vect) {
	time.total_Seconds = 0;
	time.hours = 0;
	time.minutes = 0;
	time.seconds = 0;
}

ISR(INT1_vect) {
	paused = 1;
	TCCR1B &= ~_BV(CS10) & ~_BV(CS12);
}

ISR(INT2_vect) {
	paused = 0;
	TCCR1B |= _BV(CS10) | _BV(CS12);
}
