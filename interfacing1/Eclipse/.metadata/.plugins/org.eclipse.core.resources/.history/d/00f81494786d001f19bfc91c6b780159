/*
 * main.c
 *
 *  Created on: Sep 8, 2024
 *      Author: Salah-Eldin
 */

#include "application.h"

volatile time_t time;

volatile uint8_t timer1_ticks;

volatile uint8_t paused = 1;

uint8_t oldread_mode;

union flags_t {
	uint8_t hoursIncFlag :1;
	uint8_t hoursDecFlag :1;
	uint8_t minutesIncFlag :1;
	uint8_t minutesDecFlag :1;
	uint8_t secondsIncFlag :1;
	uint8_t secondsDecFlag :1;
} flags;

#define UP_MODE (PINB & _BV(7))

#define HOURS_INC 	(PINB & _BV(1))
#define HOURS_DEC 	(PINB & _BV(0))
#define MINUTES_INC (PINB & _BV(1))
#define MINUTES_DEC (PINB & _BV(0))
#define SECONDS_INC (PINB & _BV(1))
#define SECONDS_DEC (PINB & _BV(0))

int main() {

	leds_init();
	buzzer_init();
	seven_segment_pins_init();
	adjust_time_buttons_init();
	count_mode_button_init();
	reset_button_int0_init();
	pause_button_int1_init();
	resume_button_int2_init();
	timer1_init();

	sei();

	for (;;) {
		display_time();

		if (UP_MODE != oldread_mode) {
			_delay_ms(20);
			(UP_MODE) ?
					(PORTD = (PORTD & ~_BV(5)) | _BV(4)) :
					(PORTD = (PORTD & ~_BV(4)) | _BV(5));
		}
		oldread_mode = UP_MODE;

		if (!paused) {
			if (timer1_ticks) {
				timer1_ticks--;
				update_time();
			}
		} else {
			if (HOURS_INC) {
				_delay_ms(20);
				if (HOURS_INC) {
					if (flags.hoursIncFlag) {
						flags.hoursIncFlag = 0;
						if (time.hours < 23) {
							time.hours++;
							time.total_Seconds += 60 * 60;
						}
					}
				}
			} else {
				flags.hoursIncFlag = 1;
			}
			if (HOURS_DEC) {
				_delay_ms(20);
				if (HOURS_DEC) {
					if (flags.hoursDecFlag) {
						flags.hoursDecFlag = 0;
						if (time.hours > 0) {
							time.hours--;
							time.total_Seconds -= 60 * 60;
						}
					}
				}
			} else {
				flags.hoursDecFlag = 1;
			}
		}

	}

	return 0;
}

void leds_init(void) {
	DDRD |= _BV(4) | _BV(5);
	PORTD &= ~_BV(4) & ~_BV(5);
}

void buzzer_init(void) {
	DDRD |= _BV(0);
	PORTD &= ~_BV(0);
}

void seven_segment_pins_init(void) {
	DDRC |= 0x0F;
	PORTC &= 0xF0;

	DDRA |= 0b00111111;
	PORTA &= 0b11000000;
}

void adjust_time_buttons_init(void) {
	DDRB &= 0b10000100;
	PORTB |= 0b01111011;
}

void count_mode_button_init(void) {
	DDRB &= ~_BV(7);
	PORTB |= _BV(7);
}

void reset_button_int0_init(void) {
	DDRD &= ~_BV(2);
	PORTD |= _BV(2);

	GICR |= _BV(INT0);
	MCUCR |= _BV(ISC01);

}

void pause_button_int1_init(void) {
	DDRD &= ~_BV(3);
	PORTD |= _BV(3);

	GICR |= _BV(INT1);
	MCUCR |= _BV(ISC11) | _BV(ISC10);
}

void resume_button_int2_init(void) {
	DDRB &= ~_BV(2);
	PORTB |= _BV(2);

	GICR |= _BV(INT2);
}

void timer1_init(void) {
	TCCR1B |= _BV(WGM12) | _BV(CS10) | _BV(CS12);
	TCNT1 = 0;
	OCR1A = 15625;

	TIMSK |= _BV(OCIE1A);
}

void display_time(void) {
	PORTA = (PORTA & 0b11000000) | _BV(5);
	PORTC = (PORTC & 0xF0) | (time.seconds % 10);
	_delay_ms(2);
	PORTA = (PORTA & 0b11000000) | _BV(4);
	PORTC = (PORTC & 0xF0) | (time.seconds / 10);
	_delay_ms(2);
	PORTA = (PORTA & 0b11000000) | _BV(3);
	PORTC = (PORTC & 0xF0) | (time.minutes % 10);
	_delay_ms(2);
	PORTA = (PORTA & 0b11000000) | _BV(2);
	PORTC = (PORTC & 0xF0) | (time.minutes / 10);
	_delay_ms(2);
	PORTA = (PORTA & 0b11000000) | _BV(1);
	PORTC = (PORTC & 0xF0) | (time.hours % 10);
	_delay_ms(2);
	PORTA = (PORTA & 0b11000000) | _BV(0);
	PORTC = (PORTC & 0xF0) | (time.hours / 10);
	_delay_ms(2);
}

void update_time(void) {
	if (UP_MODE) {
		time.total_Seconds = (
				time.total_Seconds > 86399 ? 0 : time.total_Seconds + 1);
	} else {
		time.total_Seconds = (
				time.total_Seconds == 0 ? 0 : time.total_Seconds - 1);
	}

	time.seconds = time.total_Seconds % 60;
	time.minutes = (time.total_Seconds / 60) % 60;
	time.hours = time.total_Seconds / 3600;
}

ISR(TIMER1_COMPA_vect) {
	timer1_ticks++;
}

