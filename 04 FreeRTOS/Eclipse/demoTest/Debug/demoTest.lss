
demoTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004cb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00004cb8  00004d4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004be  00800076  00800076  00004d62  2**0
                  ALLOC
  3 .stab         000066b4  00000000  00000000  00004d64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000036fc  00000000  00000000  0000b418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000eb14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000ec54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000edc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00010a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000118f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000126a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00012808  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00012a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013263  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 25 0e 	jmp	0x1c4a	; 0x1c4a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 eb       	ldi	r30, 0xB8	; 184
      68:	fc e4       	ldi	r31, 0x4C	; 76
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 33       	cpi	r26, 0x34	; 52
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <main>
      8a:	0c 94 5a 26 	jmp	0x4cb4	; 0x4cb4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1a 26 	jmp	0x4c34	; 0x4c34 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e6       	ldi	r26, 0x69	; 105
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 26 26 	jmp	0x4c4c	; 0x4c4c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 26 26 	jmp	0x4c4c	; 0x4c4c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1a 26 	jmp	0x4c34	; 0x4c34 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e6       	ldi	r24, 0x69	; 105
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 36 26 	jmp	0x4c6c	; 0x4c6c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 26 26 	jmp	0x4c4c	; 0x4c4c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 26 26 	jmp	0x4c4c	; 0x4c4c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 26 26 	jmp	0x4c4c	; 0x4c4c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 42 26 	jmp	0x4c84	; 0x4c84 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2a 26 	jmp	0x4c54	; 0x4c54 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 46 26 	jmp	0x4c8c	; 0x4c8c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <xCoRoutineCreate>:
/*-----------------------------------------------------------*/

    BaseType_t xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode,
                                 UBaseType_t uxPriority,
                                 UBaseType_t uxIndex )
    {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	9d 83       	std	Y+5, r25	; 0x05
     b5c:	8c 83       	std	Y+4, r24	; 0x04
     b5e:	6e 83       	std	Y+6, r22	; 0x06
     b60:	4f 83       	std	Y+7, r20	; 0x07
        BaseType_t xReturn;
        CRCB_t * pxCoRoutine;

        /* Allocate the memory that will store the co-routine control block. */
        pxCoRoutine = ( CRCB_t * ) pvPortMalloc( sizeof( CRCB_t ) );
     b62:	8a e1       	ldi	r24, 0x1A	; 26
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	0e 94 82 08 	call	0x1104	; 0x1104 <pvPortMalloc>
     b6a:	9a 83       	std	Y+2, r25	; 0x02
     b6c:	89 83       	std	Y+1, r24	; 0x01

        if( pxCoRoutine )
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	9a 81       	ldd	r25, Y+2	; 0x02
     b72:	00 97       	sbiw	r24, 0x00	; 0
     b74:	09 f4       	brne	.+2      	; 0xb78 <xCoRoutineCreate+0x32>
     b76:	6f c0       	rjmp	.+222    	; 0xc56 <xCoRoutineCreate+0x110>
        {
            /* If pxCurrentCoRoutine is NULL then this is the first co-routine to
            * be created and the co-routine data structures need initialising. */
            if( pxCurrentCoRoutine == NULL )
     b78:	80 91 7a 00 	lds	r24, 0x007A
     b7c:	90 91 7b 00 	lds	r25, 0x007B
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	41 f4       	brne	.+16     	; 0xb94 <xCoRoutineCreate+0x4e>
            {
                pxCurrentCoRoutine = pxCoRoutine;
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	9a 81       	ldd	r25, Y+2	; 0x02
     b88:	90 93 7b 00 	sts	0x007B, r25
     b8c:	80 93 7a 00 	sts	0x007A, r24
                prvInitialiseCoRoutineLists();
     b90:	0e 94 11 08 	call	0x1022	; 0x1022 <prvInitialiseCoRoutineLists>
            }

            /* Check the priority is within limits. */
            if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     b94:	8e 81       	ldd	r24, Y+6	; 0x06
     b96:	84 30       	cpi	r24, 0x04	; 4
     b98:	10 f0       	brcs	.+4      	; 0xb9e <xCoRoutineCreate+0x58>
            {
                uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     b9a:	83 e0       	ldi	r24, 0x03	; 3
     b9c:	8e 83       	std	Y+6, r24	; 0x06
            }

            /* Fill out the co-routine control block from the function parameters. */
            pxCoRoutine->uxState = corINITIAL_STATE;
     b9e:	e9 81       	ldd	r30, Y+1	; 0x01
     ba0:	fa 81       	ldd	r31, Y+2	; 0x02
     ba2:	11 8e       	std	Z+25, r1	; 0x19
     ba4:	10 8e       	std	Z+24, r1	; 0x18
            pxCoRoutine->uxPriority = uxPriority;
     ba6:	e9 81       	ldd	r30, Y+1	; 0x01
     ba8:	fa 81       	ldd	r31, Y+2	; 0x02
     baa:	8e 81       	ldd	r24, Y+6	; 0x06
     bac:	86 8b       	std	Z+22, r24	; 0x16
            pxCoRoutine->uxIndex = uxIndex;
     bae:	e9 81       	ldd	r30, Y+1	; 0x01
     bb0:	fa 81       	ldd	r31, Y+2	; 0x02
     bb2:	8f 81       	ldd	r24, Y+7	; 0x07
     bb4:	87 8b       	std	Z+23, r24	; 0x17
            pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     bb6:	e9 81       	ldd	r30, Y+1	; 0x01
     bb8:	fa 81       	ldd	r31, Y+2	; 0x02
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
     bbc:	9d 81       	ldd	r25, Y+5	; 0x05
     bbe:	91 83       	std	Z+1, r25	; 0x01
     bc0:	80 83       	st	Z, r24

            /* Initialise all the other co-routine control block parameters. */
            vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	9a 81       	ldd	r25, Y+2	; 0x02
     bc6:	02 96       	adiw	r24, 0x02	; 2
     bc8:	0e 94 48 0a 	call	0x1490	; 0x1490 <vListInitialiseItem>
            vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	0c 96       	adiw	r24, 0x0c	; 12
     bd2:	0e 94 48 0a 	call	0x1490	; 0x1490 <vListInitialiseItem>

            /* Set the co-routine control block as a link back from the ListItem_t.
             * This is so we can get back to the containing CRCB from a generic item
             * in a list. */
            listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     bd6:	e9 81       	ldd	r30, Y+1	; 0x01
     bd8:	fa 81       	ldd	r31, Y+2	; 0x02
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	9a 81       	ldd	r25, Y+2	; 0x02
     bde:	91 87       	std	Z+9, r25	; 0x09
     be0:	80 87       	std	Z+8, r24	; 0x08
            listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     be2:	e9 81       	ldd	r30, Y+1	; 0x01
     be4:	fa 81       	ldd	r31, Y+2	; 0x02
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	9a 81       	ldd	r25, Y+2	; 0x02
     bea:	93 8b       	std	Z+19, r25	; 0x13
     bec:	82 8b       	std	Z+18, r24	; 0x12

            /* Event lists are always in priority order. */
            listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), ( ( TickType_t ) configMAX_CO_ROUTINE_PRIORITIES - ( TickType_t ) uxPriority ) );
     bee:	8e 81       	ldd	r24, Y+6	; 0x06
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	84 e0       	ldi	r24, 0x04	; 4
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	82 1b       	sub	r24, r18
     bfa:	93 0b       	sbc	r25, r19
     bfc:	e9 81       	ldd	r30, Y+1	; 0x01
     bfe:	fa 81       	ldd	r31, Y+2	; 0x02
     c00:	95 87       	std	Z+13, r25	; 0x0d
     c02:	84 87       	std	Z+12, r24	; 0x0c

            /* Now the co-routine has been initialised it can be added to the ready
             * list at the correct priority. */
            prvAddCoRoutineToReadyQueue( pxCoRoutine );
     c04:	e9 81       	ldd	r30, Y+1	; 0x01
     c06:	fa 81       	ldd	r31, Y+2	; 0x02
     c08:	96 89       	ldd	r25, Z+22	; 0x16
     c0a:	80 91 7c 00 	lds	r24, 0x007C
     c0e:	89 17       	cp	r24, r25
     c10:	28 f4       	brcc	.+10     	; 0xc1c <xCoRoutineCreate+0xd6>
     c12:	e9 81       	ldd	r30, Y+1	; 0x01
     c14:	fa 81       	ldd	r31, Y+2	; 0x02
     c16:	86 89       	ldd	r24, Z+22	; 0x16
     c18:	80 93 7c 00 	sts	0x007C, r24
     c1c:	e9 81       	ldd	r30, Y+1	; 0x01
     c1e:	fa 81       	ldd	r31, Y+2	; 0x02
     c20:	86 89       	ldd	r24, Z+22	; 0x16
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	c9 01       	movw	r24, r18
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	82 0f       	add	r24, r18
     c36:	93 1f       	adc	r25, r19
     c38:	ac 01       	movw	r20, r24
     c3a:	4d 57       	subi	r20, 0x7D	; 125
     c3c:	5f 4f       	sbci	r21, 0xFF	; 255
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	9a 81       	ldd	r25, Y+2	; 0x02
     c42:	9c 01       	movw	r18, r24
     c44:	2e 5f       	subi	r18, 0xFE	; 254
     c46:	3f 4f       	sbci	r19, 0xFF	; 255
     c48:	ca 01       	movw	r24, r20
     c4a:	b9 01       	movw	r22, r18
     c4c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>

            xReturn = pdPASS;
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	8b 83       	std	Y+3, r24	; 0x03
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <xCoRoutineCreate+0x114>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     c56:	8f ef       	ldi	r24, 0xFF	; 255
     c58:	8b 83       	std	Y+3, r24	; 0x03
        }

        return xReturn;
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    }
     c5c:	27 96       	adiw	r28, 0x07	; 7
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	de bf       	out	0x3e, r29	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	cd bf       	out	0x3d, r28	; 61
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

    void vCoRoutineAddToDelayedList( TickType_t xTicksToDelay,
                                     List_t * pxEventList )
    {
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	00 d0       	rcall	.+0      	; 0xc74 <vCoRoutineAddToDelayedList+0x6>
     c74:	00 d0       	rcall	.+0      	; 0xc76 <vCoRoutineAddToDelayedList+0x8>
     c76:	00 d0       	rcall	.+0      	; 0xc78 <vCoRoutineAddToDelayedList+0xa>
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	9c 83       	std	Y+4, r25	; 0x04
     c7e:	8b 83       	std	Y+3, r24	; 0x03
     c80:	7e 83       	std	Y+6, r23	; 0x06
     c82:	6d 83       	std	Y+5, r22	; 0x05
        TickType_t xTimeToWake;

        /* Calculate the time to wake - this may overflow but this is
         * not a problem. */
        xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     c84:	20 91 7d 00 	lds	r18, 0x007D
     c88:	30 91 7e 00 	lds	r19, 0x007E
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	9c 81       	ldd	r25, Y+4	; 0x04
     c90:	82 0f       	add	r24, r18
     c92:	93 1f       	adc	r25, r19
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01

        /* We must remove ourselves from the ready list before adding
         * ourselves to the blocked list as the same list item is used for
         * both lists. */
        ( void ) uxListRemove( ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     c98:	80 91 7a 00 	lds	r24, 0x007A
     c9c:	90 91 7b 00 	lds	r25, 0x007B
     ca0:	02 96       	adiw	r24, 0x02	; 2
     ca2:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>

        /* The list item will be inserted in wake time order. */
        listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     ca6:	e0 91 7a 00 	lds	r30, 0x007A
     caa:	f0 91 7b 00 	lds	r31, 0x007B
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	9a 81       	ldd	r25, Y+2	; 0x02
     cb2:	93 83       	std	Z+3, r25	; 0x03
     cb4:	82 83       	std	Z+2, r24	; 0x02

        if( xTimeToWake < xCoRoutineTickCount )
     cb6:	20 91 7d 00 	lds	r18, 0x007D
     cba:	30 91 7e 00 	lds	r19, 0x007E
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	82 17       	cp	r24, r18
     cc4:	93 07       	cpc	r25, r19
     cc6:	70 f4       	brcc	.+28     	; 0xce4 <vCoRoutineAddToDelayedList+0x76>
        {
            /* Wake time has overflowed.  Place this item in the
             * overflow list. */
            vListInsert( ( List_t * ) pxOverflowDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     cc8:	80 91 78 00 	lds	r24, 0x0078
     ccc:	90 91 79 00 	lds	r25, 0x0079
     cd0:	20 91 7a 00 	lds	r18, 0x007A
     cd4:	30 91 7b 00 	lds	r19, 0x007B
     cd8:	2e 5f       	subi	r18, 0xFE	; 254
     cda:	3f 4f       	sbci	r19, 0xFF	; 255
     cdc:	b9 01       	movw	r22, r18
     cde:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vListInsert>
     ce2:	0d c0       	rjmp	.+26     	; 0xcfe <vCoRoutineAddToDelayedList+0x90>
        }
        else
        {
            /* The wake time has not overflowed, so we can use the
             * current block list. */
            vListInsert( ( List_t * ) pxDelayedCoRoutineList, ( ListItem_t * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     ce4:	80 91 76 00 	lds	r24, 0x0076
     ce8:	90 91 77 00 	lds	r25, 0x0077
     cec:	20 91 7a 00 	lds	r18, 0x007A
     cf0:	30 91 7b 00 	lds	r19, 0x007B
     cf4:	2e 5f       	subi	r18, 0xFE	; 254
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	b9 01       	movw	r22, r18
     cfa:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vListInsert>
        }

        if( pxEventList )
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	00 97       	sbiw	r24, 0x00	; 0
     d04:	61 f0       	breq	.+24     	; 0xd1e <vCoRoutineAddToDelayedList+0xb0>
        {
            /* Also add the co-routine to an event list.  If this is done then the
             * function must be called with interrupts disabled. */
            vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     d06:	80 91 7a 00 	lds	r24, 0x007A
     d0a:	90 91 7b 00 	lds	r25, 0x007B
     d0e:	9c 01       	movw	r18, r24
     d10:	24 5f       	subi	r18, 0xF4	; 244
     d12:	3f 4f       	sbci	r19, 0xFF	; 255
     d14:	8d 81       	ldd	r24, Y+5	; 0x05
     d16:	9e 81       	ldd	r25, Y+6	; 0x06
     d18:	b9 01       	movw	r22, r18
     d1a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vListInsert>
        }
    }
     d1e:	26 96       	adiw	r28, 0x06	; 6
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	cf 91       	pop	r28
     d2c:	df 91       	pop	r29
     d2e:	08 95       	ret

00000d30 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

    static void prvCheckPendingReadyList( void )
    {
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	00 d0       	rcall	.+0      	; 0xd36 <prvCheckPendingReadyList+0x6>
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	3a c0       	rjmp	.+116    	; 0xdb0 <prvCheckPendingReadyList+0x80>
        while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
        {
            CRCB_t * pxUnblockedCRCB;

            /* The pending ready list can be accessed by an ISR. */
            portDISABLE_INTERRUPTS();
     d3c:	f8 94       	cli
            {
                pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyCoRoutineList ) );
     d3e:	e0 91 be 00 	lds	r30, 0x00BE
     d42:	f0 91 bf 00 	lds	r31, 0x00BF
     d46:	86 81       	ldd	r24, Z+6	; 0x06
     d48:	97 81       	ldd	r25, Z+7	; 0x07
     d4a:	9a 83       	std	Y+2, r25	; 0x02
     d4c:	89 83       	std	Y+1, r24	; 0x01
                ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	0c 96       	adiw	r24, 0x0c	; 12
     d54:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
            }
            portENABLE_INTERRUPTS();
     d58:	78 94       	sei

            ( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	9a 81       	ldd	r25, Y+2	; 0x02
     d5e:	02 96       	adiw	r24, 0x02	; 2
     d60:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
            prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
     d64:	e9 81       	ldd	r30, Y+1	; 0x01
     d66:	fa 81       	ldd	r31, Y+2	; 0x02
     d68:	96 89       	ldd	r25, Z+22	; 0x16
     d6a:	80 91 7c 00 	lds	r24, 0x007C
     d6e:	89 17       	cp	r24, r25
     d70:	28 f4       	brcc	.+10     	; 0xd7c <prvCheckPendingReadyList+0x4c>
     d72:	e9 81       	ldd	r30, Y+1	; 0x01
     d74:	fa 81       	ldd	r31, Y+2	; 0x02
     d76:	86 89       	ldd	r24, Z+22	; 0x16
     d78:	80 93 7c 00 	sts	0x007C, r24
     d7c:	e9 81       	ldd	r30, Y+1	; 0x01
     d7e:	fa 81       	ldd	r31, Y+2	; 0x02
     d80:	86 89       	ldd	r24, Z+22	; 0x16
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	c9 01       	movw	r24, r18
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	82 0f       	add	r24, r18
     d96:	93 1f       	adc	r25, r19
     d98:	ac 01       	movw	r20, r24
     d9a:	4d 57       	subi	r20, 0x7D	; 125
     d9c:	5f 4f       	sbci	r21, 0xFF	; 255
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	9c 01       	movw	r18, r24
     da4:	2e 5f       	subi	r18, 0xFE	; 254
     da6:	3f 4f       	sbci	r19, 0xFF	; 255
     da8:	ca 01       	movw	r24, r20
     daa:	b9 01       	movw	r22, r18
     dac:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
    static void prvCheckPendingReadyList( void )
    {
        /* Are there any co-routines waiting to get moved to the ready list?  These
         * are co-routines that have been readied by an ISR.  The ISR cannot access
         * the ready lists itself. */
        while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     db0:	80 91 b9 00 	lds	r24, 0x00B9
     db4:	88 23       	and	r24, r24
     db6:	09 f0       	breq	.+2      	; 0xdba <prvCheckPendingReadyList+0x8a>
     db8:	c1 cf       	rjmp	.-126    	; 0xd3c <prvCheckPendingReadyList+0xc>
            portENABLE_INTERRUPTS();

            ( void ) uxListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
            prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );
        }
    }
     dba:	0f 90       	pop	r0
     dbc:	0f 90       	pop	r0
     dbe:	cf 91       	pop	r28
     dc0:	df 91       	pop	r29
     dc2:	08 95       	ret

00000dc4 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

    static void prvCheckDelayedList( void )
    {
     dc4:	df 93       	push	r29
     dc6:	cf 93       	push	r28
     dc8:	00 d0       	rcall	.+0      	; 0xdca <prvCheckDelayedList+0x6>
     dca:	00 d0       	rcall	.+0      	; 0xdcc <prvCheckDelayedList+0x8>
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
        CRCB_t * pxCRCB;

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;
     dd0:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <xTaskGetTickCount>
     dd4:	20 91 7f 00 	lds	r18, 0x007F
     dd8:	30 91 80 00 	lds	r19, 0x0080
     ddc:	82 1b       	sub	r24, r18
     dde:	93 0b       	sbc	r25, r19
     de0:	90 93 82 00 	sts	0x0082, r25
     de4:	80 93 81 00 	sts	0x0081, r24
     de8:	85 c0       	rjmp	.+266    	; 0xef4 <prvCheckDelayedList+0x130>

        while( xPassedTicks )
        {
            xCoRoutineTickCount++;
     dea:	80 91 7d 00 	lds	r24, 0x007D
     dee:	90 91 7e 00 	lds	r25, 0x007E
     df2:	01 96       	adiw	r24, 0x01	; 1
     df4:	90 93 7e 00 	sts	0x007E, r25
     df8:	80 93 7d 00 	sts	0x007D, r24
            xPassedTicks--;
     dfc:	80 91 81 00 	lds	r24, 0x0081
     e00:	90 91 82 00 	lds	r25, 0x0082
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	90 93 82 00 	sts	0x0082, r25
     e0a:	80 93 81 00 	sts	0x0081, r24

            /* If the tick count has overflowed we need to swap the ready lists. */
            if( xCoRoutineTickCount == 0 )
     e0e:	80 91 7d 00 	lds	r24, 0x007D
     e12:	90 91 7e 00 	lds	r25, 0x007E
     e16:	00 97       	sbiw	r24, 0x00	; 0
     e18:	09 f0       	breq	.+2      	; 0xe1c <prvCheckDelayedList+0x58>
     e1a:	64 c0       	rjmp	.+200    	; 0xee4 <prvCheckDelayedList+0x120>
            {
                List_t * pxTemp;

                /* Tick count has overflowed so we need to swap the delay lists.  If there are
                 * any items in pxDelayedCoRoutineList here then there is an error! */
                pxTemp = pxDelayedCoRoutineList;
     e1c:	80 91 76 00 	lds	r24, 0x0076
     e20:	90 91 77 00 	lds	r25, 0x0077
     e24:	9a 83       	std	Y+2, r25	; 0x02
     e26:	89 83       	std	Y+1, r24	; 0x01
                pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
     e28:	80 91 78 00 	lds	r24, 0x0078
     e2c:	90 91 79 00 	lds	r25, 0x0079
     e30:	90 93 77 00 	sts	0x0077, r25
     e34:	80 93 76 00 	sts	0x0076, r24
                pxOverflowDelayedCoRoutineList = pxTemp;
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	9a 81       	ldd	r25, Y+2	; 0x02
     e3c:	90 93 79 00 	sts	0x0079, r25
     e40:	80 93 78 00 	sts	0x0078, r24
     e44:	4f c0       	rjmp	.+158    	; 0xee4 <prvCheckDelayedList+0x120>
            }

            /* See if this tick has made a timeout expire. */
            while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
            {
                pxCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
     e46:	e0 91 76 00 	lds	r30, 0x0076
     e4a:	f0 91 77 00 	lds	r31, 0x0077
     e4e:	05 80       	ldd	r0, Z+5	; 0x05
     e50:	f6 81       	ldd	r31, Z+6	; 0x06
     e52:	e0 2d       	mov	r30, r0
     e54:	86 81       	ldd	r24, Z+6	; 0x06
     e56:	97 81       	ldd	r25, Z+7	; 0x07
     e58:	9c 83       	std	Y+4, r25	; 0x04
     e5a:	8b 83       	std	Y+3, r24	; 0x03

                if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )
     e5c:	eb 81       	ldd	r30, Y+3	; 0x03
     e5e:	fc 81       	ldd	r31, Y+4	; 0x04
     e60:	22 81       	ldd	r18, Z+2	; 0x02
     e62:	33 81       	ldd	r19, Z+3	; 0x03
     e64:	80 91 7d 00 	lds	r24, 0x007D
     e68:	90 91 7e 00 	lds	r25, 0x007E
     e6c:	82 17       	cp	r24, r18
     e6e:	93 07       	cpc	r25, r19
     e70:	08 f4       	brcc	.+2      	; 0xe74 <prvCheckDelayedList+0xb0>
     e72:	40 c0       	rjmp	.+128    	; 0xef4 <prvCheckDelayedList+0x130>
                {
                    /* Timeout not yet expired. */
                    break;
                }

                portDISABLE_INTERRUPTS();
     e74:	f8 94       	cli
                    /* The event could have occurred just before this critical
                     *  section.  If this is the case then the generic list item will
                     *  have been moved to the pending ready list and the following
                     *  line is still valid.  Also the pvContainer parameter will have
                     *  been set to NULL so the following lines are also valid. */
                    ( void ) uxListRemove( &( pxCRCB->xGenericListItem ) );
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	02 96       	adiw	r24, 0x02	; 2
     e7c:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>

                    /* Is the co-routine waiting on an event also? */
                    if( pxCRCB->xEventListItem.pvContainer )
     e80:	eb 81       	ldd	r30, Y+3	; 0x03
     e82:	fc 81       	ldd	r31, Y+4	; 0x04
     e84:	84 89       	ldd	r24, Z+20	; 0x14
     e86:	95 89       	ldd	r25, Z+21	; 0x15
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	29 f0       	breq	.+10     	; 0xe96 <prvCheckDelayedList+0xd2>
                    {
                        ( void ) uxListRemove( &( pxCRCB->xEventListItem ) );
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	0c 96       	adiw	r24, 0x0c	; 12
     e92:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
                    }
                }
                portENABLE_INTERRUPTS();
     e96:	78 94       	sei

                prvAddCoRoutineToReadyQueue( pxCRCB );
     e98:	eb 81       	ldd	r30, Y+3	; 0x03
     e9a:	fc 81       	ldd	r31, Y+4	; 0x04
     e9c:	96 89       	ldd	r25, Z+22	; 0x16
     e9e:	80 91 7c 00 	lds	r24, 0x007C
     ea2:	89 17       	cp	r24, r25
     ea4:	28 f4       	brcc	.+10     	; 0xeb0 <prvCheckDelayedList+0xec>
     ea6:	eb 81       	ldd	r30, Y+3	; 0x03
     ea8:	fc 81       	ldd	r31, Y+4	; 0x04
     eaa:	86 89       	ldd	r24, Z+22	; 0x16
     eac:	80 93 7c 00 	sts	0x007C, r24
     eb0:	eb 81       	ldd	r30, Y+3	; 0x03
     eb2:	fc 81       	ldd	r31, Y+4	; 0x04
     eb4:	86 89       	ldd	r24, Z+22	; 0x16
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	c9 01       	movw	r24, r18
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	88 0f       	add	r24, r24
     ec2:	99 1f       	adc	r25, r25
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	82 0f       	add	r24, r18
     eca:	93 1f       	adc	r25, r19
     ecc:	ac 01       	movw	r20, r24
     ece:	4d 57       	subi	r20, 0x7D	; 125
     ed0:	5f 4f       	sbci	r21, 0xFF	; 255
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	9c 01       	movw	r18, r24
     ed8:	2e 5f       	subi	r18, 0xFE	; 254
     eda:	3f 4f       	sbci	r19, 0xFF	; 255
     edc:	ca 01       	movw	r24, r20
     ede:	b9 01       	movw	r22, r18
     ee0:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
                pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
                pxOverflowDelayedCoRoutineList = pxTemp;
            }

            /* See if this tick has made a timeout expire. */
            while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
     ee4:	e0 91 76 00 	lds	r30, 0x0076
     ee8:	f0 91 77 00 	lds	r31, 0x0077
     eec:	80 81       	ld	r24, Z
     eee:	88 23       	and	r24, r24
     ef0:	09 f0       	breq	.+2      	; 0xef4 <prvCheckDelayedList+0x130>
     ef2:	a9 cf       	rjmp	.-174    	; 0xe46 <prvCheckDelayedList+0x82>
    {
        CRCB_t * pxCRCB;

        xPassedTicks = xTaskGetTickCount() - xLastTickCount;

        while( xPassedTicks )
     ef4:	80 91 81 00 	lds	r24, 0x0081
     ef8:	90 91 82 00 	lds	r25, 0x0082
     efc:	00 97       	sbiw	r24, 0x00	; 0
     efe:	09 f0       	breq	.+2      	; 0xf02 <prvCheckDelayedList+0x13e>
     f00:	74 cf       	rjmp	.-280    	; 0xdea <prvCheckDelayedList+0x26>

                prvAddCoRoutineToReadyQueue( pxCRCB );
            }
        }

        xLastTickCount = xCoRoutineTickCount;
     f02:	80 91 7d 00 	lds	r24, 0x007D
     f06:	90 91 7e 00 	lds	r25, 0x007E
     f0a:	90 93 80 00 	sts	0x0080, r25
     f0e:	80 93 7f 00 	sts	0x007F, r24
    }
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	0f 90       	pop	r0
     f1a:	cf 91       	pop	r28
     f1c:	df 91       	pop	r29
     f1e:	08 95       	ret

00000f20 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

    void vCoRoutineSchedule( void )
    {
     f20:	df 93       	push	r29
     f22:	cf 93       	push	r28
     f24:	00 d0       	rcall	.+0      	; 0xf26 <vCoRoutineSchedule+0x6>
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
        /* Only run a co-routine after prvInitialiseCoRoutineLists() has been
         * called.  prvInitialiseCoRoutineLists() is called automatically when a
         * co-routine is created. */
        if( pxDelayedCoRoutineList != NULL )
     f2a:	80 91 76 00 	lds	r24, 0x0076
     f2e:	90 91 77 00 	lds	r25, 0x0077
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	09 f4       	brne	.+2      	; 0xf38 <vCoRoutineSchedule+0x18>
     f36:	70 c0       	rjmp	.+224    	; 0x1018 <vCoRoutineSchedule+0xf8>
        {
            /* See if any co-routines readied by events need moving to the ready lists. */
            prvCheckPendingReadyList();
     f38:	0e 94 98 06 	call	0xd30	; 0xd30 <prvCheckPendingReadyList>

            /* See if any delayed co-routines have timed out. */
            prvCheckDelayedList();
     f3c:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <prvCheckDelayedList>
     f40:	0a c0       	rjmp	.+20     	; 0xf56 <vCoRoutineSchedule+0x36>

            /* Find the highest priority queue that contains ready co-routines. */
            while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
            {
                if( uxTopCoRoutineReadyPriority == 0 )
     f42:	80 91 7c 00 	lds	r24, 0x007C
     f46:	88 23       	and	r24, r24
     f48:	09 f4       	brne	.+2      	; 0xf4c <vCoRoutineSchedule+0x2c>
     f4a:	66 c0       	rjmp	.+204    	; 0x1018 <vCoRoutineSchedule+0xf8>
                {
                    /* No more co-routines to check. */
                    return;
                }

                --uxTopCoRoutineReadyPriority;
     f4c:	80 91 7c 00 	lds	r24, 0x007C
     f50:	81 50       	subi	r24, 0x01	; 1
     f52:	80 93 7c 00 	sts	0x007C, r24

            /* See if any delayed co-routines have timed out. */
            prvCheckDelayedList();

            /* Find the highest priority queue that contains ready co-routines. */
            while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
     f56:	80 91 7c 00 	lds	r24, 0x007C
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	c9 01       	movw	r24, r18
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	82 0f       	add	r24, r18
     f6e:	93 1f       	adc	r25, r19
     f70:	fc 01       	movw	r30, r24
     f72:	ed 57       	subi	r30, 0x7D	; 125
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	80 81       	ld	r24, Z
     f78:	88 23       	and	r24, r24
     f7a:	19 f3       	breq	.-58     	; 0xf42 <vCoRoutineSchedule+0x22>
                --uxTopCoRoutineReadyPriority;
            }

            /* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
             * of the same priority get an equal share of the processor time. */
            listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
     f7c:	80 91 7c 00 	lds	r24, 0x007C
     f80:	28 2f       	mov	r18, r24
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	c9 01       	movw	r24, r18
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	82 0f       	add	r24, r18
     f94:	93 1f       	adc	r25, r19
     f96:	8d 57       	subi	r24, 0x7D	; 125
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	9a 83       	std	Y+2, r25	; 0x02
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	e9 81       	ldd	r30, Y+1	; 0x01
     fa0:	fa 81       	ldd	r31, Y+2	; 0x02
     fa2:	01 80       	ldd	r0, Z+1	; 0x01
     fa4:	f2 81       	ldd	r31, Z+2	; 0x02
     fa6:	e0 2d       	mov	r30, r0
     fa8:	82 81       	ldd	r24, Z+2	; 0x02
     faa:	93 81       	ldd	r25, Z+3	; 0x03
     fac:	e9 81       	ldd	r30, Y+1	; 0x01
     fae:	fa 81       	ldd	r31, Y+2	; 0x02
     fb0:	92 83       	std	Z+2, r25	; 0x02
     fb2:	81 83       	std	Z+1, r24	; 0x01
     fb4:	e9 81       	ldd	r30, Y+1	; 0x01
     fb6:	fa 81       	ldd	r31, Y+2	; 0x02
     fb8:	21 81       	ldd	r18, Z+1	; 0x01
     fba:	32 81       	ldd	r19, Z+2	; 0x02
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	03 96       	adiw	r24, 0x03	; 3
     fc2:	28 17       	cp	r18, r24
     fc4:	39 07       	cpc	r19, r25
     fc6:	59 f4       	brne	.+22     	; 0xfde <vCoRoutineSchedule+0xbe>
     fc8:	e9 81       	ldd	r30, Y+1	; 0x01
     fca:	fa 81       	ldd	r31, Y+2	; 0x02
     fcc:	01 80       	ldd	r0, Z+1	; 0x01
     fce:	f2 81       	ldd	r31, Z+2	; 0x02
     fd0:	e0 2d       	mov	r30, r0
     fd2:	82 81       	ldd	r24, Z+2	; 0x02
     fd4:	93 81       	ldd	r25, Z+3	; 0x03
     fd6:	e9 81       	ldd	r30, Y+1	; 0x01
     fd8:	fa 81       	ldd	r31, Y+2	; 0x02
     fda:	92 83       	std	Z+2, r25	; 0x02
     fdc:	81 83       	std	Z+1, r24	; 0x01
     fde:	e9 81       	ldd	r30, Y+1	; 0x01
     fe0:	fa 81       	ldd	r31, Y+2	; 0x02
     fe2:	01 80       	ldd	r0, Z+1	; 0x01
     fe4:	f2 81       	ldd	r31, Z+2	; 0x02
     fe6:	e0 2d       	mov	r30, r0
     fe8:	86 81       	ldd	r24, Z+6	; 0x06
     fea:	97 81       	ldd	r25, Z+7	; 0x07
     fec:	90 93 7b 00 	sts	0x007B, r25
     ff0:	80 93 7a 00 	sts	0x007A, r24

            /* Call the co-routine. */
            ( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
     ff4:	e0 91 7a 00 	lds	r30, 0x007A
     ff8:	f0 91 7b 00 	lds	r31, 0x007B
     ffc:	40 81       	ld	r20, Z
     ffe:	51 81       	ldd	r21, Z+1	; 0x01
    1000:	80 91 7a 00 	lds	r24, 0x007A
    1004:	90 91 7b 00 	lds	r25, 0x007B
    1008:	e0 91 7a 00 	lds	r30, 0x007A
    100c:	f0 91 7b 00 	lds	r31, 0x007B
    1010:	27 89       	ldd	r18, Z+23	; 0x17
    1012:	62 2f       	mov	r22, r18
    1014:	fa 01       	movw	r30, r20
    1016:	09 95       	icall
        }
    }
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

    static void prvInitialiseCoRoutineLists( void )
    {
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	0f 92       	push	r0
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
        UBaseType_t uxPriority;

        for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    102c:	19 82       	std	Y+1, r1	; 0x01
    102e:	13 c0       	rjmp	.+38     	; 0x1056 <prvInitialiseCoRoutineLists+0x34>
        {
            vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	c9 01       	movw	r24, r18
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	82 0f       	add	r24, r18
    1046:	93 1f       	adc	r25, r19
    1048:	8d 57       	subi	r24, 0x7D	; 125
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInitialise>

    static void prvInitialiseCoRoutineLists( void )
    {
        UBaseType_t uxPriority;

        for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	8f 5f       	subi	r24, 0xFF	; 255
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	84 30       	cpi	r24, 0x04	; 4
    105a:	50 f3       	brcs	.-44     	; 0x1030 <prvInitialiseCoRoutineLists+0xe>
        {
            vListInitialise( ( List_t * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
        }

        vListInitialise( ( List_t * ) &xDelayedCoRoutineList1 );
    105c:	87 ea       	ldi	r24, 0xA7	; 167
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInitialise>
        vListInitialise( ( List_t * ) &xDelayedCoRoutineList2 );
    1064:	80 eb       	ldi	r24, 0xB0	; 176
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInitialise>
        vListInitialise( ( List_t * ) &xPendingReadyCoRoutineList );
    106c:	89 eb       	ldi	r24, 0xB9	; 185
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInitialise>

        /* Start with pxDelayedCoRoutineList using list1 and the
         * pxOverflowDelayedCoRoutineList using list2. */
        pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    1074:	87 ea       	ldi	r24, 0xA7	; 167
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	90 93 77 00 	sts	0x0077, r25
    107c:	80 93 76 00 	sts	0x0076, r24
        pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    1080:	80 eb       	ldi	r24, 0xB0	; 176
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	90 93 79 00 	sts	0x0079, r25
    1088:	80 93 78 00 	sts	0x0078, r24
    }
    108c:	0f 90       	pop	r0
    108e:	cf 91       	pop	r28
    1090:	df 91       	pop	r29
    1092:	08 95       	ret

00001094 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

    BaseType_t xCoRoutineRemoveFromEventList( const List_t * pxEventList )
    {
    1094:	df 93       	push	r29
    1096:	cf 93       	push	r28
    1098:	00 d0       	rcall	.+0      	; 0x109a <xCoRoutineRemoveFromEventList+0x6>
    109a:	00 d0       	rcall	.+0      	; 0x109c <xCoRoutineRemoveFromEventList+0x8>
    109c:	0f 92       	push	r0
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	9d 83       	std	Y+5, r25	; 0x05
    10a4:	8c 83       	std	Y+4, r24	; 0x04
        BaseType_t xReturn;

        /* This function is called from within an interrupt.  It can only access
         * event lists and the pending ready list.  This function assumes that a
         * check has already been made to ensure pxEventList is not empty. */
        pxUnblockedCRCB = ( CRCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    10a6:	ec 81       	ldd	r30, Y+4	; 0x04
    10a8:	fd 81       	ldd	r31, Y+5	; 0x05
    10aa:	05 80       	ldd	r0, Z+5	; 0x05
    10ac:	f6 81       	ldd	r31, Z+6	; 0x06
    10ae:	e0 2d       	mov	r30, r0
    10b0:	86 81       	ldd	r24, Z+6	; 0x06
    10b2:	97 81       	ldd	r25, Z+7	; 0x07
    10b4:	9b 83       	std	Y+3, r25	; 0x03
    10b6:	8a 83       	std	Y+2, r24	; 0x02
        ( void ) uxListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	9b 81       	ldd	r25, Y+3	; 0x03
    10bc:	0c 96       	adiw	r24, 0x0c	; 12
    10be:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
        vListInsertEnd( ( List_t * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    10c2:	8a 81       	ldd	r24, Y+2	; 0x02
    10c4:	9b 81       	ldd	r25, Y+3	; 0x03
    10c6:	9c 01       	movw	r18, r24
    10c8:	24 5f       	subi	r18, 0xF4	; 244
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	89 eb       	ldi	r24, 0xB9	; 185
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	b9 01       	movw	r22, r18
    10d2:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>

        if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    10d6:	ea 81       	ldd	r30, Y+2	; 0x02
    10d8:	fb 81       	ldd	r31, Y+3	; 0x03
    10da:	96 89       	ldd	r25, Z+22	; 0x16
    10dc:	e0 91 7a 00 	lds	r30, 0x007A
    10e0:	f0 91 7b 00 	lds	r31, 0x007B
    10e4:	86 89       	ldd	r24, Z+22	; 0x16
    10e6:	98 17       	cp	r25, r24
    10e8:	18 f0       	brcs	.+6      	; 0x10f0 <xCoRoutineRemoveFromEventList+0x5c>
        {
            xReturn = pdTRUE;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	89 83       	std	Y+1, r24	; 0x01
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <xCoRoutineRemoveFromEventList+0x5e>
        }
        else
        {
            xReturn = pdFALSE;
    10f0:	19 82       	std	Y+1, r1	; 0x01
        }

        return xReturn;
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    }
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	08 95       	ret

00001104 <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1104:	df 93       	push	r29
    1106:	cf 93       	push	r28
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	2e 97       	sbiw	r28, 0x0e	; 14
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	9e 87       	std	Y+14, r25	; 0x0e
    111a:	8d 87       	std	Y+13, r24	; 0x0d
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
    111c:	1e 82       	std	Y+6, r1	; 0x06
    111e:	1d 82       	std	Y+5, r1	; 0x05

	vTaskSuspendAll();
    1120:	0e 94 33 1b 	call	0x3666	; 0x3666 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
    1124:	80 91 c2 00 	lds	r24, 0x00C2
    1128:	88 23       	and	r24, r24
    112a:	29 f4       	brne	.+10     	; 0x1136 <pvPortMalloc+0x32>
		{
			prvHeapInit();
    112c:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	80 93 c2 00 	sts	0x00C2, r24
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
    1136:	8d 85       	ldd	r24, Y+13	; 0x0d
    1138:	9e 85       	ldd	r25, Y+14	; 0x0e
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	51 f0       	breq	.+20     	; 0x1152 <pvPortMalloc+0x4e>
		{
			xWantedSize += heapSTRUCT_SIZE;
    113e:	80 91 73 00 	lds	r24, 0x0073
    1142:	90 91 74 00 	lds	r25, 0x0074
    1146:	2d 85       	ldd	r18, Y+13	; 0x0d
    1148:	3e 85       	ldd	r19, Y+14	; 0x0e
    114a:	82 0f       	add	r24, r18
    114c:	93 1f       	adc	r25, r19
    114e:	9e 87       	std	Y+14, r25	; 0x0e
    1150:	8d 87       	std	Y+13, r24	; 0x0d
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
    1152:	8d 85       	ldd	r24, Y+13	; 0x0d
    1154:	9e 85       	ldd	r25, Y+14	; 0x0e
    1156:	00 97       	sbiw	r24, 0x00	; 0
    1158:	09 f4       	brne	.+2      	; 0x115c <pvPortMalloc+0x58>
    115a:	af c0       	rjmp	.+350    	; 0x12ba <pvPortMalloc+0x1b6>
    115c:	8d 85       	ldd	r24, Y+13	; 0x0d
    115e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1160:	23 e0       	ldi	r18, 0x03	; 3
    1162:	87 3e       	cpi	r24, 0xE7	; 231
    1164:	92 07       	cpc	r25, r18
    1166:	08 f0       	brcs	.+2      	; 0x116a <pvPortMalloc+0x66>
    1168:	a8 c0       	rjmp	.+336    	; 0x12ba <pvPortMalloc+0x1b6>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
    116a:	8b ea       	ldi	r24, 0xAB	; 171
    116c:	94 e0       	ldi	r25, 0x04	; 4
    116e:	9a 87       	std	Y+10, r25	; 0x0a
    1170:	89 87       	std	Y+9, r24	; 0x09
			pxBlock = xStart.pxNextFreeBlock;
    1172:	80 91 ab 04 	lds	r24, 0x04AB
    1176:	90 91 ac 04 	lds	r25, 0x04AC
    117a:	9c 87       	std	Y+12, r25	; 0x0c
    117c:	8b 87       	std	Y+11, r24	; 0x0b
    117e:	0a c0       	rjmp	.+20     	; 0x1194 <pvPortMalloc+0x90>
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
			{
				pxPreviousBlock = pxBlock;
    1180:	8b 85       	ldd	r24, Y+11	; 0x0b
    1182:	9c 85       	ldd	r25, Y+12	; 0x0c
    1184:	9a 87       	std	Y+10, r25	; 0x0a
    1186:	89 87       	std	Y+9, r24	; 0x09
				pxBlock = pxBlock->pxNextFreeBlock;
    1188:	eb 85       	ldd	r30, Y+11	; 0x0b
    118a:	fc 85       	ldd	r31, Y+12	; 0x0c
    118c:	80 81       	ld	r24, Z
    118e:	91 81       	ldd	r25, Z+1	; 0x01
    1190:	9c 87       	std	Y+12, r25	; 0x0c
    1192:	8b 87       	std	Y+11, r24	; 0x0b
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
    1194:	eb 85       	ldd	r30, Y+11	; 0x0b
    1196:	fc 85       	ldd	r31, Y+12	; 0x0c
    1198:	22 81       	ldd	r18, Z+2	; 0x02
    119a:	33 81       	ldd	r19, Z+3	; 0x03
    119c:	8d 85       	ldd	r24, Y+13	; 0x0d
    119e:	9e 85       	ldd	r25, Y+14	; 0x0e
    11a0:	28 17       	cp	r18, r24
    11a2:	39 07       	cpc	r19, r25
    11a4:	30 f4       	brcc	.+12     	; 0x11b2 <pvPortMalloc+0xae>
    11a6:	eb 85       	ldd	r30, Y+11	; 0x0b
    11a8:	fc 85       	ldd	r31, Y+12	; 0x0c
    11aa:	80 81       	ld	r24, Z
    11ac:	91 81       	ldd	r25, Z+1	; 0x01
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	39 f7       	brne	.-50     	; 0x1180 <pvPortMalloc+0x7c>
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
    11b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    11b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    11b6:	44 e0       	ldi	r20, 0x04	; 4
    11b8:	8f 3a       	cpi	r24, 0xAF	; 175
    11ba:	94 07       	cpc	r25, r20
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <pvPortMalloc+0xbc>
    11be:	7d c0       	rjmp	.+250    	; 0x12ba <pvPortMalloc+0x1b6>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
    11c0:	e9 85       	ldd	r30, Y+9	; 0x09
    11c2:	fa 85       	ldd	r31, Y+10	; 0x0a
    11c4:	20 81       	ld	r18, Z
    11c6:	31 81       	ldd	r19, Z+1	; 0x01
    11c8:	80 91 73 00 	lds	r24, 0x0073
    11cc:	90 91 74 00 	lds	r25, 0x0074
    11d0:	82 0f       	add	r24, r18
    11d2:	93 1f       	adc	r25, r19
    11d4:	9e 83       	std	Y+6, r25	; 0x06
    11d6:	8d 83       	std	Y+5, r24	; 0x05

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
    11d8:	eb 85       	ldd	r30, Y+11	; 0x0b
    11da:	fc 85       	ldd	r31, Y+12	; 0x0c
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	e9 85       	ldd	r30, Y+9	; 0x09
    11e2:	fa 85       	ldd	r31, Y+10	; 0x0a
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
    11e8:	eb 85       	ldd	r30, Y+11	; 0x0b
    11ea:	fc 85       	ldd	r31, Y+12	; 0x0c
    11ec:	22 81       	ldd	r18, Z+2	; 0x02
    11ee:	33 81       	ldd	r19, Z+3	; 0x03
    11f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f4:	28 1b       	sub	r18, r24
    11f6:	39 0b       	sbc	r19, r25
    11f8:	80 91 73 00 	lds	r24, 0x0073
    11fc:	90 91 74 00 	lds	r25, 0x0074
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	82 17       	cp	r24, r18
    1206:	93 07       	cpc	r25, r19
    1208:	08 f0       	brcs	.+2      	; 0x120c <pvPortMalloc+0x108>
    120a:	47 c0       	rjmp	.+142    	; 0x129a <pvPortMalloc+0x196>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
    120c:	2b 85       	ldd	r18, Y+11	; 0x0b
    120e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1210:	8d 85       	ldd	r24, Y+13	; 0x0d
    1212:	9e 85       	ldd	r25, Y+14	; 0x0e
    1214:	82 0f       	add	r24, r18
    1216:	93 1f       	adc	r25, r19
    1218:	98 87       	std	Y+8, r25	; 0x08
    121a:	8f 83       	std	Y+7, r24	; 0x07

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
    121c:	eb 85       	ldd	r30, Y+11	; 0x0b
    121e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1220:	22 81       	ldd	r18, Z+2	; 0x02
    1222:	33 81       	ldd	r19, Z+3	; 0x03
    1224:	8d 85       	ldd	r24, Y+13	; 0x0d
    1226:	9e 85       	ldd	r25, Y+14	; 0x0e
    1228:	a9 01       	movw	r20, r18
    122a:	48 1b       	sub	r20, r24
    122c:	59 0b       	sbc	r21, r25
    122e:	ca 01       	movw	r24, r20
    1230:	ef 81       	ldd	r30, Y+7	; 0x07
    1232:	f8 85       	ldd	r31, Y+8	; 0x08
    1234:	93 83       	std	Z+3, r25	; 0x03
    1236:	82 83       	std	Z+2, r24	; 0x02
					pxBlock->xBlockSize = xWantedSize;
    1238:	eb 85       	ldd	r30, Y+11	; 0x0b
    123a:	fc 85       	ldd	r31, Y+12	; 0x0c
    123c:	8d 85       	ldd	r24, Y+13	; 0x0d
    123e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1240:	93 83       	std	Z+3, r25	; 0x03
    1242:	82 83       	std	Z+2, r24	; 0x02

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
    1244:	ef 81       	ldd	r30, Y+7	; 0x07
    1246:	f8 85       	ldd	r31, Y+8	; 0x08
    1248:	82 81       	ldd	r24, Z+2	; 0x02
    124a:	93 81       	ldd	r25, Z+3	; 0x03
    124c:	9a 83       	std	Y+2, r25	; 0x02
    124e:	89 83       	std	Y+1, r24	; 0x01
    1250:	8b ea       	ldi	r24, 0xAB	; 171
    1252:	94 e0       	ldi	r25, 0x04	; 4
    1254:	9c 83       	std	Y+4, r25	; 0x04
    1256:	8b 83       	std	Y+3, r24	; 0x03
    1258:	06 c0       	rjmp	.+12     	; 0x1266 <pvPortMalloc+0x162>
    125a:	eb 81       	ldd	r30, Y+3	; 0x03
    125c:	fc 81       	ldd	r31, Y+4	; 0x04
    125e:	80 81       	ld	r24, Z
    1260:	91 81       	ldd	r25, Z+1	; 0x01
    1262:	9c 83       	std	Y+4, r25	; 0x04
    1264:	8b 83       	std	Y+3, r24	; 0x03
    1266:	eb 81       	ldd	r30, Y+3	; 0x03
    1268:	fc 81       	ldd	r31, Y+4	; 0x04
    126a:	01 90       	ld	r0, Z+
    126c:	f0 81       	ld	r31, Z
    126e:	e0 2d       	mov	r30, r0
    1270:	22 81       	ldd	r18, Z+2	; 0x02
    1272:	33 81       	ldd	r19, Z+3	; 0x03
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	9a 81       	ldd	r25, Y+2	; 0x02
    1278:	28 17       	cp	r18, r24
    127a:	39 07       	cpc	r19, r25
    127c:	70 f3       	brcs	.-36     	; 0x125a <pvPortMalloc+0x156>
    127e:	eb 81       	ldd	r30, Y+3	; 0x03
    1280:	fc 81       	ldd	r31, Y+4	; 0x04
    1282:	80 81       	ld	r24, Z
    1284:	91 81       	ldd	r25, Z+1	; 0x01
    1286:	ef 81       	ldd	r30, Y+7	; 0x07
    1288:	f8 85       	ldd	r31, Y+8	; 0x08
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	80 83       	st	Z, r24
    128e:	eb 81       	ldd	r30, Y+3	; 0x03
    1290:	fc 81       	ldd	r31, Y+4	; 0x04
    1292:	8f 81       	ldd	r24, Y+7	; 0x07
    1294:	98 85       	ldd	r25, Y+8	; 0x08
    1296:	91 83       	std	Z+1, r25	; 0x01
    1298:	80 83       	st	Z, r24
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
    129a:	20 91 71 00 	lds	r18, 0x0071
    129e:	30 91 72 00 	lds	r19, 0x0072
    12a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    12a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    12a6:	82 81       	ldd	r24, Z+2	; 0x02
    12a8:	93 81       	ldd	r25, Z+3	; 0x03
    12aa:	a9 01       	movw	r20, r18
    12ac:	48 1b       	sub	r20, r24
    12ae:	59 0b       	sbc	r21, r25
    12b0:	ca 01       	movw	r24, r20
    12b2:	90 93 72 00 	sts	0x0072, r25
    12b6:	80 93 71 00 	sts	0x0071, r24
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    12ba:	0e 94 3f 1b 	call	0x367e	; 0x367e <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    12be:	8d 81       	ldd	r24, Y+5	; 0x05
    12c0:	9e 81       	ldd	r25, Y+6	; 0x06
}
    12c2:	2e 96       	adiw	r28, 0x0e	; 14
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	08 95       	ret

000012d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    12d4:	df 93       	push	r29
    12d6:	cf 93       	push	r28
    12d8:	cd b7       	in	r28, 0x3d	; 61
    12da:	de b7       	in	r29, 0x3e	; 62
    12dc:	2a 97       	sbiw	r28, 0x0a	; 10
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	9a 87       	std	Y+10, r25	; 0x0a
    12ea:	89 87       	std	Y+9, r24	; 0x09
uint8_t *puc = ( uint8_t * ) pv;
    12ec:	89 85       	ldd	r24, Y+9	; 0x09
    12ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f0:	98 87       	std	Y+8, r25	; 0x08
    12f2:	8f 83       	std	Y+7, r24	; 0x07
BlockLink_t *pxLink;

	if( pv != NULL )
    12f4:	89 85       	ldd	r24, Y+9	; 0x09
    12f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	09 f4       	brne	.+2      	; 0x12fe <vPortFree+0x2a>
    12fc:	4f c0       	rjmp	.+158    	; 0x139c <vPortFree+0xc8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
    12fe:	80 91 73 00 	lds	r24, 0x0073
    1302:	90 91 74 00 	lds	r25, 0x0074
    1306:	22 27       	eor	r18, r18
    1308:	33 27       	eor	r19, r19
    130a:	28 1b       	sub	r18, r24
    130c:	39 0b       	sbc	r19, r25
    130e:	8f 81       	ldd	r24, Y+7	; 0x07
    1310:	98 85       	ldd	r25, Y+8	; 0x08
    1312:	82 0f       	add	r24, r18
    1314:	93 1f       	adc	r25, r19
    1316:	98 87       	std	Y+8, r25	; 0x08
    1318:	8f 83       	std	Y+7, r24	; 0x07

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
    131a:	8f 81       	ldd	r24, Y+7	; 0x07
    131c:	98 85       	ldd	r25, Y+8	; 0x08
    131e:	9e 83       	std	Y+6, r25	; 0x06
    1320:	8d 83       	std	Y+5, r24	; 0x05

		vTaskSuspendAll();
    1322:	0e 94 33 1b 	call	0x3666	; 0x3666 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
    1326:	ed 81       	ldd	r30, Y+5	; 0x05
    1328:	fe 81       	ldd	r31, Y+6	; 0x06
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	93 81       	ldd	r25, Z+3	; 0x03
    132e:	9a 83       	std	Y+2, r25	; 0x02
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	8b ea       	ldi	r24, 0xAB	; 171
    1334:	94 e0       	ldi	r25, 0x04	; 4
    1336:	9c 83       	std	Y+4, r25	; 0x04
    1338:	8b 83       	std	Y+3, r24	; 0x03
    133a:	06 c0       	rjmp	.+12     	; 0x1348 <vPortFree+0x74>
    133c:	eb 81       	ldd	r30, Y+3	; 0x03
    133e:	fc 81       	ldd	r31, Y+4	; 0x04
    1340:	80 81       	ld	r24, Z
    1342:	91 81       	ldd	r25, Z+1	; 0x01
    1344:	9c 83       	std	Y+4, r25	; 0x04
    1346:	8b 83       	std	Y+3, r24	; 0x03
    1348:	eb 81       	ldd	r30, Y+3	; 0x03
    134a:	fc 81       	ldd	r31, Y+4	; 0x04
    134c:	01 90       	ld	r0, Z+
    134e:	f0 81       	ld	r31, Z
    1350:	e0 2d       	mov	r30, r0
    1352:	22 81       	ldd	r18, Z+2	; 0x02
    1354:	33 81       	ldd	r19, Z+3	; 0x03
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	28 17       	cp	r18, r24
    135c:	39 07       	cpc	r19, r25
    135e:	70 f3       	brcs	.-36     	; 0x133c <vPortFree+0x68>
    1360:	eb 81       	ldd	r30, Y+3	; 0x03
    1362:	fc 81       	ldd	r31, Y+4	; 0x04
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	ed 81       	ldd	r30, Y+5	; 0x05
    136a:	fe 81       	ldd	r31, Y+6	; 0x06
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	80 83       	st	Z, r24
    1370:	eb 81       	ldd	r30, Y+3	; 0x03
    1372:	fc 81       	ldd	r31, Y+4	; 0x04
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	91 83       	std	Z+1, r25	; 0x01
    137a:	80 83       	st	Z, r24
			xFreeBytesRemaining += pxLink->xBlockSize;
    137c:	ed 81       	ldd	r30, Y+5	; 0x05
    137e:	fe 81       	ldd	r31, Y+6	; 0x06
    1380:	22 81       	ldd	r18, Z+2	; 0x02
    1382:	33 81       	ldd	r19, Z+3	; 0x03
    1384:	80 91 71 00 	lds	r24, 0x0071
    1388:	90 91 72 00 	lds	r25, 0x0072
    138c:	82 0f       	add	r24, r18
    138e:	93 1f       	adc	r25, r19
    1390:	90 93 72 00 	sts	0x0072, r25
    1394:	80 93 71 00 	sts	0x0071, r24
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
    1398:	0e 94 3f 1b 	call	0x367e	; 0x367e <xTaskResumeAll>
	}
}
    139c:	2a 96       	adiw	r28, 0x0a	; 10
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	de bf       	out	0x3e, r29	; 62
    13a4:	0f be       	out	0x3f, r0	; 63
    13a6:	cd bf       	out	0x3d, r28	; 61
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
	return xFreeBytesRemaining;
    13b6:	80 91 71 00 	lds	r24, 0x0071
    13ba:	90 91 72 00 	lds	r25, 0x0072
}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
	/* This just exists to keep the linker quiet. */
}
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <prvHeapInit>:
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <prvHeapInit+0x6>
    13d8:	00 d0       	rcall	.+0      	; 0x13da <prvHeapInit+0x8>
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    13de:	84 ec       	ldi	r24, 0xC4	; 196
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9a 83       	std	Y+2, r25	; 0x02
    13e4:	89 83       	std	Y+1, r24	; 0x01

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ea:	90 93 ac 04 	sts	0x04AC, r25
    13ee:	80 93 ab 04 	sts	0x04AB, r24
	xStart.xBlockSize = ( size_t ) 0;
    13f2:	10 92 ae 04 	sts	0x04AE, r1
    13f6:	10 92 ad 04 	sts	0x04AD, r1

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
    13fa:	87 ee       	ldi	r24, 0xE7	; 231
    13fc:	93 e0       	ldi	r25, 0x03	; 3
    13fe:	90 93 b2 04 	sts	0x04B2, r25
    1402:	80 93 b1 04 	sts	0x04B1, r24
	xEnd.pxNextFreeBlock = NULL;
    1406:	10 92 b0 04 	sts	0x04B0, r1
    140a:	10 92 af 04 	sts	0x04AF, r1

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	9a 81       	ldd	r25, Y+2	; 0x02
    1412:	9c 83       	std	Y+4, r25	; 0x04
    1414:	8b 83       	std	Y+3, r24	; 0x03
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
    1416:	eb 81       	ldd	r30, Y+3	; 0x03
    1418:	fc 81       	ldd	r31, Y+4	; 0x04
    141a:	87 ee       	ldi	r24, 0xE7	; 231
    141c:	93 e0       	ldi	r25, 0x03	; 3
    141e:	93 83       	std	Z+3, r25	; 0x03
    1420:	82 83       	std	Z+2, r24	; 0x02
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
    1422:	eb 81       	ldd	r30, Y+3	; 0x03
    1424:	fc 81       	ldd	r31, Y+4	; 0x04
    1426:	8f ea       	ldi	r24, 0xAF	; 175
    1428:	94 e0       	ldi	r25, 0x04	; 4
    142a:	91 83       	std	Z+1, r25	; 0x01
    142c:	80 83       	st	Z, r24
}
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	0f 90       	pop	r0
    1436:	cf 91       	pop	r28
    1438:	df 91       	pop	r29
    143a:	08 95       	ret

0000143c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    143c:	df 93       	push	r29
    143e:	cf 93       	push	r28
    1440:	00 d0       	rcall	.+0      	; 0x1442 <vListInitialise+0x6>
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	9a 83       	std	Y+2, r25	; 0x02
    1448:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	03 96       	adiw	r24, 0x03	; 3
    1450:	e9 81       	ldd	r30, Y+1	; 0x01
    1452:	fa 81       	ldd	r31, Y+2	; 0x02
    1454:	92 83       	std	Z+2, r25	; 0x02
    1456:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1458:	e9 81       	ldd	r30, Y+1	; 0x01
    145a:	fa 81       	ldd	r31, Y+2	; 0x02
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	9f ef       	ldi	r25, 0xFF	; 255
    1460:	94 83       	std	Z+4, r25	; 0x04
    1462:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	9a 81       	ldd	r25, Y+2	; 0x02
    1468:	03 96       	adiw	r24, 0x03	; 3
    146a:	e9 81       	ldd	r30, Y+1	; 0x01
    146c:	fa 81       	ldd	r31, Y+2	; 0x02
    146e:	96 83       	std	Z+6, r25	; 0x06
    1470:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	03 96       	adiw	r24, 0x03	; 3
    1478:	e9 81       	ldd	r30, Y+1	; 0x01
    147a:	fa 81       	ldd	r31, Y+2	; 0x02
    147c:	90 87       	std	Z+8, r25	; 0x08
    147e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1480:	e9 81       	ldd	r30, Y+1	; 0x01
    1482:	fa 81       	ldd	r31, Y+2	; 0x02
    1484:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	00 d0       	rcall	.+0      	; 0x1496 <vListInitialiseItem+0x6>
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    149e:	e9 81       	ldd	r30, Y+1	; 0x01
    14a0:	fa 81       	ldd	r31, Y+2	; 0x02
    14a2:	11 86       	std	Z+9, r1	; 0x09
    14a4:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	cf 91       	pop	r28
    14ac:	df 91       	pop	r29
    14ae:	08 95       	ret

000014b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <vListInsertEnd+0x6>
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <vListInsertEnd+0x8>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <vListInsertEnd+0xa>
    14ba:	cd b7       	in	r28, 0x3d	; 61
    14bc:	de b7       	in	r29, 0x3e	; 62
    14be:	9c 83       	std	Y+4, r25	; 0x04
    14c0:	8b 83       	std	Y+3, r24	; 0x03
    14c2:	7e 83       	std	Y+6, r23	; 0x06
    14c4:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    14c6:	eb 81       	ldd	r30, Y+3	; 0x03
    14c8:	fc 81       	ldd	r31, Y+4	; 0x04
    14ca:	81 81       	ldd	r24, Z+1	; 0x01
    14cc:	92 81       	ldd	r25, Z+2	; 0x02
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    14d2:	ed 81       	ldd	r30, Y+5	; 0x05
    14d4:	fe 81       	ldd	r31, Y+6	; 0x06
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	9a 81       	ldd	r25, Y+2	; 0x02
    14da:	93 83       	std	Z+3, r25	; 0x03
    14dc:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    14de:	e9 81       	ldd	r30, Y+1	; 0x01
    14e0:	fa 81       	ldd	r31, Y+2	; 0x02
    14e2:	84 81       	ldd	r24, Z+4	; 0x04
    14e4:	95 81       	ldd	r25, Z+5	; 0x05
    14e6:	ed 81       	ldd	r30, Y+5	; 0x05
    14e8:	fe 81       	ldd	r31, Y+6	; 0x06
    14ea:	95 83       	std	Z+5, r25	; 0x05
    14ec:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    14ee:	e9 81       	ldd	r30, Y+1	; 0x01
    14f0:	fa 81       	ldd	r31, Y+2	; 0x02
    14f2:	04 80       	ldd	r0, Z+4	; 0x04
    14f4:	f5 81       	ldd	r31, Z+5	; 0x05
    14f6:	e0 2d       	mov	r30, r0
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	93 83       	std	Z+3, r25	; 0x03
    14fe:	82 83       	std	Z+2, r24	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1500:	e9 81       	ldd	r30, Y+1	; 0x01
    1502:	fa 81       	ldd	r31, Y+2	; 0x02
    1504:	8d 81       	ldd	r24, Y+5	; 0x05
    1506:	9e 81       	ldd	r25, Y+6	; 0x06
    1508:	95 83       	std	Z+5, r25	; 0x05
    150a:	84 83       	std	Z+4, r24	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    150c:	ed 81       	ldd	r30, Y+5	; 0x05
    150e:	fe 81       	ldd	r31, Y+6	; 0x06
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	91 87       	std	Z+9, r25	; 0x09
    1516:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1518:	eb 81       	ldd	r30, Y+3	; 0x03
    151a:	fc 81       	ldd	r31, Y+4	; 0x04
    151c:	80 81       	ld	r24, Z
    151e:	8f 5f       	subi	r24, 0xFF	; 255
    1520:	eb 81       	ldd	r30, Y+3	; 0x03
    1522:	fc 81       	ldd	r31, Y+4	; 0x04
    1524:	80 83       	st	Z, r24
}
    1526:	26 96       	adiw	r28, 0x06	; 6
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	cf 91       	pop	r28
    1534:	df 91       	pop	r29
    1536:	08 95       	ret

00001538 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1538:	df 93       	push	r29
    153a:	cf 93       	push	r28
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	28 97       	sbiw	r28, 0x08	; 8
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	f8 94       	cli
    1546:	de bf       	out	0x3e, r29	; 62
    1548:	0f be       	out	0x3f, r0	; 63
    154a:	cd bf       	out	0x3d, r28	; 61
    154c:	9e 83       	std	Y+6, r25	; 0x06
    154e:	8d 83       	std	Y+5, r24	; 0x05
    1550:	78 87       	std	Y+8, r23	; 0x08
    1552:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1554:	ef 81       	ldd	r30, Y+7	; 0x07
    1556:	f8 85       	ldd	r31, Y+8	; 0x08
    1558:	80 81       	ld	r24, Z
    155a:	91 81       	ldd	r25, Z+1	; 0x01
    155c:	9a 83       	std	Y+2, r25	; 0x02
    155e:	89 83       	std	Y+1, r24	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	9a 81       	ldd	r25, Y+2	; 0x02
    1564:	2f ef       	ldi	r18, 0xFF	; 255
    1566:	8f 3f       	cpi	r24, 0xFF	; 255
    1568:	92 07       	cpc	r25, r18
    156a:	39 f4       	brne	.+14     	; 0x157a <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    156c:	ed 81       	ldd	r30, Y+5	; 0x05
    156e:	fe 81       	ldd	r31, Y+6	; 0x06
    1570:	87 81       	ldd	r24, Z+7	; 0x07
    1572:	90 85       	ldd	r25, Z+8	; 0x08
    1574:	9c 83       	std	Y+4, r25	; 0x04
    1576:	8b 83       	std	Y+3, r24	; 0x03
    1578:	18 c0       	rjmp	.+48     	; 0x15aa <vListInsert+0x72>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    157a:	8d 81       	ldd	r24, Y+5	; 0x05
    157c:	9e 81       	ldd	r25, Y+6	; 0x06
    157e:	03 96       	adiw	r24, 0x03	; 3
    1580:	9c 83       	std	Y+4, r25	; 0x04
    1582:	8b 83       	std	Y+3, r24	; 0x03
    1584:	06 c0       	rjmp	.+12     	; 0x1592 <vListInsert+0x5a>
    1586:	eb 81       	ldd	r30, Y+3	; 0x03
    1588:	fc 81       	ldd	r31, Y+4	; 0x04
    158a:	82 81       	ldd	r24, Z+2	; 0x02
    158c:	93 81       	ldd	r25, Z+3	; 0x03
    158e:	9c 83       	std	Y+4, r25	; 0x04
    1590:	8b 83       	std	Y+3, r24	; 0x03
    1592:	eb 81       	ldd	r30, Y+3	; 0x03
    1594:	fc 81       	ldd	r31, Y+4	; 0x04
    1596:	02 80       	ldd	r0, Z+2	; 0x02
    1598:	f3 81       	ldd	r31, Z+3	; 0x03
    159a:	e0 2d       	mov	r30, r0
    159c:	20 81       	ld	r18, Z
    159e:	31 81       	ldd	r19, Z+1	; 0x01
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	9a 81       	ldd	r25, Y+2	; 0x02
    15a4:	82 17       	cp	r24, r18
    15a6:	93 07       	cpc	r25, r19
    15a8:	70 f7       	brcc	.-36     	; 0x1586 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    15aa:	eb 81       	ldd	r30, Y+3	; 0x03
    15ac:	fc 81       	ldd	r31, Y+4	; 0x04
    15ae:	82 81       	ldd	r24, Z+2	; 0x02
    15b0:	93 81       	ldd	r25, Z+3	; 0x03
    15b2:	ef 81       	ldd	r30, Y+7	; 0x07
    15b4:	f8 85       	ldd	r31, Y+8	; 0x08
    15b6:	93 83       	std	Z+3, r25	; 0x03
    15b8:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    15ba:	ef 81       	ldd	r30, Y+7	; 0x07
    15bc:	f8 85       	ldd	r31, Y+8	; 0x08
    15be:	02 80       	ldd	r0, Z+2	; 0x02
    15c0:	f3 81       	ldd	r31, Z+3	; 0x03
    15c2:	e0 2d       	mov	r30, r0
    15c4:	8f 81       	ldd	r24, Y+7	; 0x07
    15c6:	98 85       	ldd	r25, Y+8	; 0x08
    15c8:	95 83       	std	Z+5, r25	; 0x05
    15ca:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    15cc:	ef 81       	ldd	r30, Y+7	; 0x07
    15ce:	f8 85       	ldd	r31, Y+8	; 0x08
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	95 83       	std	Z+5, r25	; 0x05
    15d6:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = pxNewListItem;
    15d8:	eb 81       	ldd	r30, Y+3	; 0x03
    15da:	fc 81       	ldd	r31, Y+4	; 0x04
    15dc:	8f 81       	ldd	r24, Y+7	; 0x07
    15de:	98 85       	ldd	r25, Y+8	; 0x08
    15e0:	93 83       	std	Z+3, r25	; 0x03
    15e2:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    15e4:	ef 81       	ldd	r30, Y+7	; 0x07
    15e6:	f8 85       	ldd	r31, Y+8	; 0x08
    15e8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ea:	9e 81       	ldd	r25, Y+6	; 0x06
    15ec:	91 87       	std	Z+9, r25	; 0x09
    15ee:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    15f0:	ed 81       	ldd	r30, Y+5	; 0x05
    15f2:	fe 81       	ldd	r31, Y+6	; 0x06
    15f4:	80 81       	ld	r24, Z
    15f6:	8f 5f       	subi	r24, 0xFF	; 255
    15f8:	ed 81       	ldd	r30, Y+5	; 0x05
    15fa:	fe 81       	ldd	r31, Y+6	; 0x06
    15fc:	80 83       	st	Z, r24
}
    15fe:	28 96       	adiw	r28, 0x08	; 8
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	08 95       	ret

00001610 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1610:	df 93       	push	r29
    1612:	cf 93       	push	r28
    1614:	00 d0       	rcall	.+0      	; 0x1616 <uxListRemove+0x6>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <uxListRemove+0x8>
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	9c 83       	std	Y+4, r25	; 0x04
    161e:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1620:	eb 81       	ldd	r30, Y+3	; 0x03
    1622:	fc 81       	ldd	r31, Y+4	; 0x04
    1624:	80 85       	ldd	r24, Z+8	; 0x08
    1626:	91 85       	ldd	r25, Z+9	; 0x09
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    162c:	eb 81       	ldd	r30, Y+3	; 0x03
    162e:	fc 81       	ldd	r31, Y+4	; 0x04
    1630:	a2 81       	ldd	r26, Z+2	; 0x02
    1632:	b3 81       	ldd	r27, Z+3	; 0x03
    1634:	eb 81       	ldd	r30, Y+3	; 0x03
    1636:	fc 81       	ldd	r31, Y+4	; 0x04
    1638:	84 81       	ldd	r24, Z+4	; 0x04
    163a:	95 81       	ldd	r25, Z+5	; 0x05
    163c:	15 96       	adiw	r26, 0x05	; 5
    163e:	9c 93       	st	X, r25
    1640:	8e 93       	st	-X, r24
    1642:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1644:	eb 81       	ldd	r30, Y+3	; 0x03
    1646:	fc 81       	ldd	r31, Y+4	; 0x04
    1648:	a4 81       	ldd	r26, Z+4	; 0x04
    164a:	b5 81       	ldd	r27, Z+5	; 0x05
    164c:	eb 81       	ldd	r30, Y+3	; 0x03
    164e:	fc 81       	ldd	r31, Y+4	; 0x04
    1650:	82 81       	ldd	r24, Z+2	; 0x02
    1652:	93 81       	ldd	r25, Z+3	; 0x03
    1654:	13 96       	adiw	r26, 0x03	; 3
    1656:	9c 93       	st	X, r25
    1658:	8e 93       	st	-X, r24
    165a:	12 97       	sbiw	r26, 0x02	; 2

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    165c:	e9 81       	ldd	r30, Y+1	; 0x01
    165e:	fa 81       	ldd	r31, Y+2	; 0x02
    1660:	21 81       	ldd	r18, Z+1	; 0x01
    1662:	32 81       	ldd	r19, Z+2	; 0x02
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	28 17       	cp	r18, r24
    166a:	39 07       	cpc	r19, r25
    166c:	41 f4       	brne	.+16     	; 0x167e <uxListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    166e:	eb 81       	ldd	r30, Y+3	; 0x03
    1670:	fc 81       	ldd	r31, Y+4	; 0x04
    1672:	84 81       	ldd	r24, Z+4	; 0x04
    1674:	95 81       	ldd	r25, Z+5	; 0x05
    1676:	e9 81       	ldd	r30, Y+1	; 0x01
    1678:	fa 81       	ldd	r31, Y+2	; 0x02
    167a:	92 83       	std	Z+2, r25	; 0x02
    167c:	81 83       	std	Z+1, r24	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    167e:	eb 81       	ldd	r30, Y+3	; 0x03
    1680:	fc 81       	ldd	r31, Y+4	; 0x04
    1682:	11 86       	std	Z+9, r1	; 0x09
    1684:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1686:	e9 81       	ldd	r30, Y+1	; 0x01
    1688:	fa 81       	ldd	r31, Y+2	; 0x02
    168a:	80 81       	ld	r24, Z
    168c:	81 50       	subi	r24, 0x01	; 1
    168e:	e9 81       	ldd	r30, Y+1	; 0x01
    1690:	fa 81       	ldd	r31, Y+2	; 0x02
    1692:	80 83       	st	Z, r24

	return pxList->uxNumberOfItems;
    1694:	e9 81       	ldd	r30, Y+1	; 0x01
    1696:	fa 81       	ldd	r31, Y+2	; 0x02
    1698:	80 81       	ld	r24, Z
}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	cf 91       	pop	r28
    16a4:	df 91       	pop	r29
    16a6:	08 95       	ret

000016a8 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
    16a8:	df 93       	push	r29
    16aa:	cf 93       	push	r28
    16ac:	cd b7       	in	r28, 0x3d	; 61
    16ae:	de b7       	in	r29, 0x3e	; 62
    16b0:	28 97       	sbiw	r28, 0x08	; 8
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	9c 83       	std	Y+4, r25	; 0x04
    16be:	8b 83       	std	Y+3, r24	; 0x03
    16c0:	7e 83       	std	Y+6, r23	; 0x06
    16c2:	6d 83       	std	Y+5, r22	; 0x05
    16c4:	58 87       	std	Y+8, r21	; 0x08
    16c6:	4f 83       	std	Y+7, r20	; 0x07
uint16_t usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    16c8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ca:	fc 81       	ldd	r31, Y+4	; 0x04
    16cc:	81 e1       	ldi	r24, 0x11	; 17
    16ce:	80 83       	st	Z, r24
	pxTopOfStack--;
    16d0:	8b 81       	ldd	r24, Y+3	; 0x03
    16d2:	9c 81       	ldd	r25, Y+4	; 0x04
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	9c 83       	std	Y+4, r25	; 0x04
    16d8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    16da:	eb 81       	ldd	r30, Y+3	; 0x03
    16dc:	fc 81       	ldd	r31, Y+4	; 0x04
    16de:	82 e2       	ldi	r24, 0x22	; 34
    16e0:	80 83       	st	Z, r24
	pxTopOfStack--;
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	9c 83       	std	Y+4, r25	; 0x04
    16ea:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    16ec:	eb 81       	ldd	r30, Y+3	; 0x03
    16ee:	fc 81       	ldd	r31, Y+4	; 0x04
    16f0:	83 e3       	ldi	r24, 0x33	; 51
    16f2:	80 83       	st	Z, r24
	pxTopOfStack--;
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( uint16_t ) pxCode;
    16fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1700:	9e 81       	ldd	r25, Y+6	; 0x06
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	eb 81       	ldd	r30, Y+3	; 0x03
    170a:	fc 81       	ldd	r31, Y+4	; 0x04
    170c:	80 83       	st	Z, r24
	pxTopOfStack--;
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	9c 81       	ldd	r25, Y+4	; 0x04
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	9c 83       	std	Y+4, r25	; 0x04
    1716:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	89 2f       	mov	r24, r25
    171e:	99 27       	eor	r25, r25
    1720:	9a 83       	std	Y+2, r25	; 0x02
    1722:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	eb 81       	ldd	r30, Y+3	; 0x03
    1728:	fc 81       	ldd	r31, Y+4	; 0x04
    172a:	80 83       	st	Z, r24
	pxTopOfStack--;
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	9c 81       	ldd	r25, Y+4	; 0x04
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	9c 83       	std	Y+4, r25	; 0x04
    1734:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R0 */
    1736:	eb 81       	ldd	r30, Y+3	; 0x03
    1738:	fc 81       	ldd	r31, Y+4	; 0x04
    173a:	10 82       	st	Z, r1
	pxTopOfStack--;
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    1746:	eb 81       	ldd	r30, Y+3	; 0x03
    1748:	fc 81       	ldd	r31, Y+4	; 0x04
    174a:	80 e8       	ldi	r24, 0x80	; 128
    174c:	80 83       	st	Z, r24
	pxTopOfStack--;
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	9c 83       	std	Y+4, r25	; 0x04
    1756:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( StackType_t ) 0x00;	/* R1 */
    1758:	eb 81       	ldd	r30, Y+3	; 0x03
    175a:	fc 81       	ldd	r31, Y+4	; 0x04
    175c:	10 82       	st	Z, r1
	pxTopOfStack--;
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	9c 81       	ldd	r25, Y+4	; 0x04
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	9c 83       	std	Y+4, r25	; 0x04
    1766:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x02;	/* R2 */
    1768:	eb 81       	ldd	r30, Y+3	; 0x03
    176a:	fc 81       	ldd	r31, Y+4	; 0x04
    176c:	82 e0       	ldi	r24, 0x02	; 2
    176e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	9c 83       	std	Y+4, r25	; 0x04
    1778:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x03;	/* R3 */
    177a:	eb 81       	ldd	r30, Y+3	; 0x03
    177c:	fc 81       	ldd	r31, Y+4	; 0x04
    177e:	83 e0       	ldi	r24, 0x03	; 3
    1780:	80 83       	st	Z, r24
	pxTopOfStack--;
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	9c 81       	ldd	r25, Y+4	; 0x04
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	9c 83       	std	Y+4, r25	; 0x04
    178a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x04;	/* R4 */
    178c:	eb 81       	ldd	r30, Y+3	; 0x03
    178e:	fc 81       	ldd	r31, Y+4	; 0x04
    1790:	84 e0       	ldi	r24, 0x04	; 4
    1792:	80 83       	st	Z, r24
	pxTopOfStack--;
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	9c 83       	std	Y+4, r25	; 0x04
    179c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x05;	/* R5 */
    179e:	eb 81       	ldd	r30, Y+3	; 0x03
    17a0:	fc 81       	ldd	r31, Y+4	; 0x04
    17a2:	85 e0       	ldi	r24, 0x05	; 5
    17a4:	80 83       	st	Z, r24
	pxTopOfStack--;
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	9c 81       	ldd	r25, Y+4	; 0x04
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	9c 83       	std	Y+4, r25	; 0x04
    17ae:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x06;	/* R6 */
    17b0:	eb 81       	ldd	r30, Y+3	; 0x03
    17b2:	fc 81       	ldd	r31, Y+4	; 0x04
    17b4:	86 e0       	ldi	r24, 0x06	; 6
    17b6:	80 83       	st	Z, r24
	pxTopOfStack--;
    17b8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ba:	9c 81       	ldd	r25, Y+4	; 0x04
    17bc:	01 97       	sbiw	r24, 0x01	; 1
    17be:	9c 83       	std	Y+4, r25	; 0x04
    17c0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x07;	/* R7 */
    17c2:	eb 81       	ldd	r30, Y+3	; 0x03
    17c4:	fc 81       	ldd	r31, Y+4	; 0x04
    17c6:	87 e0       	ldi	r24, 0x07	; 7
    17c8:	80 83       	st	Z, r24
	pxTopOfStack--;
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	9c 81       	ldd	r25, Y+4	; 0x04
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	9c 83       	std	Y+4, r25	; 0x04
    17d2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x08;	/* R8 */
    17d4:	eb 81       	ldd	r30, Y+3	; 0x03
    17d6:	fc 81       	ldd	r31, Y+4	; 0x04
    17d8:	88 e0       	ldi	r24, 0x08	; 8
    17da:	80 83       	st	Z, r24
	pxTopOfStack--;
    17dc:	8b 81       	ldd	r24, Y+3	; 0x03
    17de:	9c 81       	ldd	r25, Y+4	; 0x04
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	9c 83       	std	Y+4, r25	; 0x04
    17e4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x09;	/* R9 */
    17e6:	eb 81       	ldd	r30, Y+3	; 0x03
    17e8:	fc 81       	ldd	r31, Y+4	; 0x04
    17ea:	89 e0       	ldi	r24, 0x09	; 9
    17ec:	80 83       	st	Z, r24
	pxTopOfStack--;
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	9c 83       	std	Y+4, r25	; 0x04
    17f6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x10;	/* R10 */
    17f8:	eb 81       	ldd	r30, Y+3	; 0x03
    17fa:	fc 81       	ldd	r31, Y+4	; 0x04
    17fc:	80 e1       	ldi	r24, 0x10	; 16
    17fe:	80 83       	st	Z, r24
	pxTopOfStack--;
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	9c 83       	std	Y+4, r25	; 0x04
    1808:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x11;	/* R11 */
    180a:	eb 81       	ldd	r30, Y+3	; 0x03
    180c:	fc 81       	ldd	r31, Y+4	; 0x04
    180e:	81 e1       	ldi	r24, 0x11	; 17
    1810:	80 83       	st	Z, r24
	pxTopOfStack--;
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	9c 83       	std	Y+4, r25	; 0x04
    181a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x12;	/* R12 */
    181c:	eb 81       	ldd	r30, Y+3	; 0x03
    181e:	fc 81       	ldd	r31, Y+4	; 0x04
    1820:	82 e1       	ldi	r24, 0x12	; 18
    1822:	80 83       	st	Z, r24
	pxTopOfStack--;
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	9c 83       	std	Y+4, r25	; 0x04
    182c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x13;	/* R13 */
    182e:	eb 81       	ldd	r30, Y+3	; 0x03
    1830:	fc 81       	ldd	r31, Y+4	; 0x04
    1832:	83 e1       	ldi	r24, 0x13	; 19
    1834:	80 83       	st	Z, r24
	pxTopOfStack--;
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	9c 83       	std	Y+4, r25	; 0x04
    183e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x14;	/* R14 */
    1840:	eb 81       	ldd	r30, Y+3	; 0x03
    1842:	fc 81       	ldd	r31, Y+4	; 0x04
    1844:	84 e1       	ldi	r24, 0x14	; 20
    1846:	80 83       	st	Z, r24
	pxTopOfStack--;
    1848:	8b 81       	ldd	r24, Y+3	; 0x03
    184a:	9c 81       	ldd	r25, Y+4	; 0x04
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	9c 83       	std	Y+4, r25	; 0x04
    1850:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x15;	/* R15 */
    1852:	eb 81       	ldd	r30, Y+3	; 0x03
    1854:	fc 81       	ldd	r31, Y+4	; 0x04
    1856:	85 e1       	ldi	r24, 0x15	; 21
    1858:	80 83       	st	Z, r24
	pxTopOfStack--;
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	01 97       	sbiw	r24, 0x01	; 1
    1860:	9c 83       	std	Y+4, r25	; 0x04
    1862:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x16;	/* R16 */
    1864:	eb 81       	ldd	r30, Y+3	; 0x03
    1866:	fc 81       	ldd	r31, Y+4	; 0x04
    1868:	86 e1       	ldi	r24, 0x16	; 22
    186a:	80 83       	st	Z, r24
	pxTopOfStack--;
    186c:	8b 81       	ldd	r24, Y+3	; 0x03
    186e:	9c 81       	ldd	r25, Y+4	; 0x04
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	9c 83       	std	Y+4, r25	; 0x04
    1874:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x17;	/* R17 */
    1876:	eb 81       	ldd	r30, Y+3	; 0x03
    1878:	fc 81       	ldd	r31, Y+4	; 0x04
    187a:	87 e1       	ldi	r24, 0x17	; 23
    187c:	80 83       	st	Z, r24
	pxTopOfStack--;
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	9c 81       	ldd	r25, Y+4	; 0x04
    1882:	01 97       	sbiw	r24, 0x01	; 1
    1884:	9c 83       	std	Y+4, r25	; 0x04
    1886:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x18;	/* R18 */
    1888:	eb 81       	ldd	r30, Y+3	; 0x03
    188a:	fc 81       	ldd	r31, Y+4	; 0x04
    188c:	88 e1       	ldi	r24, 0x18	; 24
    188e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1890:	8b 81       	ldd	r24, Y+3	; 0x03
    1892:	9c 81       	ldd	r25, Y+4	; 0x04
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	9c 83       	std	Y+4, r25	; 0x04
    1898:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x19;	/* R19 */
    189a:	eb 81       	ldd	r30, Y+3	; 0x03
    189c:	fc 81       	ldd	r31, Y+4	; 0x04
    189e:	89 e1       	ldi	r24, 0x19	; 25
    18a0:	80 83       	st	Z, r24
	pxTopOfStack--;
    18a2:	8b 81       	ldd	r24, Y+3	; 0x03
    18a4:	9c 81       	ldd	r25, Y+4	; 0x04
    18a6:	01 97       	sbiw	r24, 0x01	; 1
    18a8:	9c 83       	std	Y+4, r25	; 0x04
    18aa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x20;	/* R20 */
    18ac:	eb 81       	ldd	r30, Y+3	; 0x03
    18ae:	fc 81       	ldd	r31, Y+4	; 0x04
    18b0:	80 e2       	ldi	r24, 0x20	; 32
    18b2:	80 83       	st	Z, r24
	pxTopOfStack--;
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	9c 83       	std	Y+4, r25	; 0x04
    18bc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x21;	/* R21 */
    18be:	eb 81       	ldd	r30, Y+3	; 0x03
    18c0:	fc 81       	ldd	r31, Y+4	; 0x04
    18c2:	81 e2       	ldi	r24, 0x21	; 33
    18c4:	80 83       	st	Z, r24
	pxTopOfStack--;
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ca:	01 97       	sbiw	r24, 0x01	; 1
    18cc:	9c 83       	std	Y+4, r25	; 0x04
    18ce:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x22;	/* R22 */
    18d0:	eb 81       	ldd	r30, Y+3	; 0x03
    18d2:	fc 81       	ldd	r31, Y+4	; 0x04
    18d4:	82 e2       	ldi	r24, 0x22	; 34
    18d6:	80 83       	st	Z, r24
	pxTopOfStack--;
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	9c 83       	std	Y+4, r25	; 0x04
    18e0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x23;	/* R23 */
    18e2:	eb 81       	ldd	r30, Y+3	; 0x03
    18e4:	fc 81       	ldd	r31, Y+4	; 0x04
    18e6:	83 e2       	ldi	r24, 0x23	; 35
    18e8:	80 83       	st	Z, r24
	pxTopOfStack--;
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	01 97       	sbiw	r24, 0x01	; 1
    18f0:	9c 83       	std	Y+4, r25	; 0x04
    18f2:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( uint16_t ) pvParameters;
    18f4:	8f 81       	ldd	r24, Y+7	; 0x07
    18f6:	98 85       	ldd	r25, Y+8	; 0x08
    18f8:	9a 83       	std	Y+2, r25	; 0x02
    18fa:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1900:	fc 81       	ldd	r31, Y+4	; 0x04
    1902:	80 83       	st	Z, r24
	pxTopOfStack--;
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	9c 83       	std	Y+4, r25	; 0x04
    190c:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	9a 81       	ldd	r25, Y+2	; 0x02
    1912:	89 2f       	mov	r24, r25
    1914:	99 27       	eor	r25, r25
    1916:	9a 83       	std	Y+2, r25	; 0x02
    1918:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( StackType_t ) ( usAddress & ( uint16_t ) 0x00ff );
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	eb 81       	ldd	r30, Y+3	; 0x03
    191e:	fc 81       	ldd	r31, Y+4	; 0x04
    1920:	80 83       	st	Z, r24
	pxTopOfStack--;
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	9c 81       	ldd	r25, Y+4	; 0x04
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	9c 83       	std	Y+4, r25	; 0x04
    192a:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( StackType_t ) 0x26;	/* R26 X */
    192c:	eb 81       	ldd	r30, Y+3	; 0x03
    192e:	fc 81       	ldd	r31, Y+4	; 0x04
    1930:	86 e2       	ldi	r24, 0x26	; 38
    1932:	80 83       	st	Z, r24
	pxTopOfStack--;
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	9c 81       	ldd	r25, Y+4	; 0x04
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	9c 83       	std	Y+4, r25	; 0x04
    193c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x27;	/* R27 */
    193e:	eb 81       	ldd	r30, Y+3	; 0x03
    1940:	fc 81       	ldd	r31, Y+4	; 0x04
    1942:	87 e2       	ldi	r24, 0x27	; 39
    1944:	80 83       	st	Z, r24
	pxTopOfStack--;
    1946:	8b 81       	ldd	r24, Y+3	; 0x03
    1948:	9c 81       	ldd	r25, Y+4	; 0x04
    194a:	01 97       	sbiw	r24, 0x01	; 1
    194c:	9c 83       	std	Y+4, r25	; 0x04
    194e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x28;	/* R28 Y */
    1950:	eb 81       	ldd	r30, Y+3	; 0x03
    1952:	fc 81       	ldd	r31, Y+4	; 0x04
    1954:	88 e2       	ldi	r24, 0x28	; 40
    1956:	80 83       	st	Z, r24
	pxTopOfStack--;
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	9c 83       	std	Y+4, r25	; 0x04
    1960:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x29;	/* R29 */
    1962:	eb 81       	ldd	r30, Y+3	; 0x03
    1964:	fc 81       	ldd	r31, Y+4	; 0x04
    1966:	89 e2       	ldi	r24, 0x29	; 41
    1968:	80 83       	st	Z, r24
	pxTopOfStack--;
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	9c 81       	ldd	r25, Y+4	; 0x04
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	9c 83       	std	Y+4, r25	; 0x04
    1972:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x30;	/* R30 Z */
    1974:	eb 81       	ldd	r30, Y+3	; 0x03
    1976:	fc 81       	ldd	r31, Y+4	; 0x04
    1978:	80 e3       	ldi	r24, 0x30	; 48
    197a:	80 83       	st	Z, r24
	pxTopOfStack--;
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	9c 83       	std	Y+4, r25	; 0x04
    1984:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( StackType_t ) 0x031;	/* R31 */
    1986:	eb 81       	ldd	r30, Y+3	; 0x03
    1988:	fc 81       	ldd	r31, Y+4	; 0x04
    198a:	81 e3       	ldi	r24, 0x31	; 49
    198c:	80 83       	st	Z, r24
	pxTopOfStack--;
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	9c 83       	std	Y+4, r25	; 0x04
    1996:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    1998:	8b 81       	ldd	r24, Y+3	; 0x03
    199a:	9c 81       	ldd	r25, Y+4	; 0x04
}
    199c:	28 96       	adiw	r28, 0x08	; 8
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
    19a8:	cf 91       	pop	r28
    19aa:	df 91       	pop	r29
    19ac:	08 95       	ret

000019ae <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void )
{
    19ae:	df 93       	push	r29
    19b0:	cf 93       	push	r28
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    19b6:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    19ba:	a0 91 b3 04 	lds	r26, 0x04B3
    19be:	b0 91 b4 04 	lds	r27, 0x04B4
    19c2:	cd 91       	ld	r28, X+
    19c4:	cd bf       	out	0x3d, r28	; 61
    19c6:	dd 91       	ld	r29, X+
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	ff 91       	pop	r31
    19cc:	ef 91       	pop	r30
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	bf 91       	pop	r27
    19d4:	af 91       	pop	r26
    19d6:	9f 91       	pop	r25
    19d8:	8f 91       	pop	r24
    19da:	7f 91       	pop	r23
    19dc:	6f 91       	pop	r22
    19de:	5f 91       	pop	r21
    19e0:	4f 91       	pop	r20
    19e2:	3f 91       	pop	r19
    19e4:	2f 91       	pop	r18
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	ff 90       	pop	r15
    19ec:	ef 90       	pop	r14
    19ee:	df 90       	pop	r13
    19f0:	cf 90       	pop	r12
    19f2:	bf 90       	pop	r11
    19f4:	af 90       	pop	r10
    19f6:	9f 90       	pop	r9
    19f8:	8f 90       	pop	r8
    19fa:	7f 90       	pop	r7
    19fc:	6f 90       	pop	r6
    19fe:	5f 90       	pop	r5
    1a00:	4f 90       	pop	r4
    1a02:	3f 90       	pop	r3
    1a04:	2f 90       	pop	r2
    1a06:	1f 90       	pop	r1
    1a08:	0f 90       	pop	r0
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    1a0e:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    1a10:	81 e0       	ldi	r24, 0x01	; 1
}
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	cd b7       	in	r28, 0x3d	; 61
    1a1e:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1a26:	0f 92       	push	r0
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	0f 92       	push	r0
    1a2e:	1f 92       	push	r1
    1a30:	11 24       	eor	r1, r1
    1a32:	2f 92       	push	r2
    1a34:	3f 92       	push	r3
    1a36:	4f 92       	push	r4
    1a38:	5f 92       	push	r5
    1a3a:	6f 92       	push	r6
    1a3c:	7f 92       	push	r7
    1a3e:	8f 92       	push	r8
    1a40:	9f 92       	push	r9
    1a42:	af 92       	push	r10
    1a44:	bf 92       	push	r11
    1a46:	cf 92       	push	r12
    1a48:	df 92       	push	r13
    1a4a:	ef 92       	push	r14
    1a4c:	ff 92       	push	r15
    1a4e:	0f 93       	push	r16
    1a50:	1f 93       	push	r17
    1a52:	2f 93       	push	r18
    1a54:	3f 93       	push	r19
    1a56:	4f 93       	push	r20
    1a58:	5f 93       	push	r21
    1a5a:	6f 93       	push	r22
    1a5c:	7f 93       	push	r23
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	af 93       	push	r26
    1a64:	bf 93       	push	r27
    1a66:	cf 93       	push	r28
    1a68:	df 93       	push	r29
    1a6a:	ef 93       	push	r30
    1a6c:	ff 93       	push	r31
    1a6e:	a0 91 b3 04 	lds	r26, 0x04B3
    1a72:	b0 91 b4 04 	lds	r27, 0x04B4
    1a76:	0d b6       	in	r0, 0x3d	; 61
    1a78:	0d 92       	st	X+, r0
    1a7a:	0e b6       	in	r0, 0x3e	; 62
    1a7c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1a7e:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1a82:	a0 91 b3 04 	lds	r26, 0x04B3
    1a86:	b0 91 b4 04 	lds	r27, 0x04B4
    1a8a:	cd 91       	ld	r28, X+
    1a8c:	cd bf       	out	0x3d, r28	; 61
    1a8e:	dd 91       	ld	r29, X+
    1a90:	de bf       	out	0x3e, r29	; 62
    1a92:	ff 91       	pop	r31
    1a94:	ef 91       	pop	r30
    1a96:	df 91       	pop	r29
    1a98:	cf 91       	pop	r28
    1a9a:	bf 91       	pop	r27
    1a9c:	af 91       	pop	r26
    1a9e:	9f 91       	pop	r25
    1aa0:	8f 91       	pop	r24
    1aa2:	7f 91       	pop	r23
    1aa4:	6f 91       	pop	r22
    1aa6:	5f 91       	pop	r21
    1aa8:	4f 91       	pop	r20
    1aaa:	3f 91       	pop	r19
    1aac:	2f 91       	pop	r18
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	ff 90       	pop	r15
    1ab4:	ef 90       	pop	r14
    1ab6:	df 90       	pop	r13
    1ab8:	cf 90       	pop	r12
    1aba:	bf 90       	pop	r11
    1abc:	af 90       	pop	r10
    1abe:	9f 90       	pop	r9
    1ac0:	8f 90       	pop	r8
    1ac2:	7f 90       	pop	r7
    1ac4:	6f 90       	pop	r6
    1ac6:	5f 90       	pop	r5
    1ac8:	4f 90       	pop	r4
    1aca:	3f 90       	pop	r3
    1acc:	2f 90       	pop	r2
    1ace:	1f 90       	pop	r1
    1ad0:	0f 90       	pop	r0
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1ad6:	08 95       	ret

00001ad8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1ad8:	0f 92       	push	r0
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	0f 92       	push	r0
    1ae0:	1f 92       	push	r1
    1ae2:	11 24       	eor	r1, r1
    1ae4:	2f 92       	push	r2
    1ae6:	3f 92       	push	r3
    1ae8:	4f 92       	push	r4
    1aea:	5f 92       	push	r5
    1aec:	6f 92       	push	r6
    1aee:	7f 92       	push	r7
    1af0:	8f 92       	push	r8
    1af2:	9f 92       	push	r9
    1af4:	af 92       	push	r10
    1af6:	bf 92       	push	r11
    1af8:	cf 92       	push	r12
    1afa:	df 92       	push	r13
    1afc:	ef 92       	push	r14
    1afe:	ff 92       	push	r15
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	2f 93       	push	r18
    1b06:	3f 93       	push	r19
    1b08:	4f 93       	push	r20
    1b0a:	5f 93       	push	r21
    1b0c:	6f 93       	push	r22
    1b0e:	7f 93       	push	r23
    1b10:	8f 93       	push	r24
    1b12:	9f 93       	push	r25
    1b14:	af 93       	push	r26
    1b16:	bf 93       	push	r27
    1b18:	cf 93       	push	r28
    1b1a:	df 93       	push	r29
    1b1c:	ef 93       	push	r30
    1b1e:	ff 93       	push	r31
    1b20:	a0 91 b3 04 	lds	r26, 0x04B3
    1b24:	b0 91 b4 04 	lds	r27, 0x04B4
    1b28:	0d b6       	in	r0, 0x3d	; 61
    1b2a:	0d 92       	st	X+, r0
    1b2c:	0e b6       	in	r0, 0x3e	; 62
    1b2e:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1b30:	0e 94 2f 1c 	call	0x385e	; 0x385e <xTaskIncrementTick>
    1b34:	88 23       	and	r24, r24
    1b36:	11 f0       	breq	.+4      	; 0x1b3c <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    1b38:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1b3c:	a0 91 b3 04 	lds	r26, 0x04B3
    1b40:	b0 91 b4 04 	lds	r27, 0x04B4
    1b44:	cd 91       	ld	r28, X+
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	dd 91       	ld	r29, X+
    1b4a:	de bf       	out	0x3e, r29	; 62
    1b4c:	ff 91       	pop	r31
    1b4e:	ef 91       	pop	r30
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	bf 91       	pop	r27
    1b56:	af 91       	pop	r26
    1b58:	9f 91       	pop	r25
    1b5a:	8f 91       	pop	r24
    1b5c:	7f 91       	pop	r23
    1b5e:	6f 91       	pop	r22
    1b60:	5f 91       	pop	r21
    1b62:	4f 91       	pop	r20
    1b64:	3f 91       	pop	r19
    1b66:	2f 91       	pop	r18
    1b68:	1f 91       	pop	r17
    1b6a:	0f 91       	pop	r16
    1b6c:	ff 90       	pop	r15
    1b6e:	ef 90       	pop	r14
    1b70:	df 90       	pop	r13
    1b72:	cf 90       	pop	r12
    1b74:	bf 90       	pop	r11
    1b76:	af 90       	pop	r10
    1b78:	9f 90       	pop	r9
    1b7a:	8f 90       	pop	r8
    1b7c:	7f 90       	pop	r7
    1b7e:	6f 90       	pop	r6
    1b80:	5f 90       	pop	r5
    1b82:	4f 90       	pop	r4
    1b84:	3f 90       	pop	r3
    1b86:	2f 90       	pop	r2
    1b88:	1f 90       	pop	r1
    1b8a:	0f 90       	pop	r0
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1b90:	08 95       	ret

00001b92 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	00 d0       	rcall	.+0      	; 0x1b98 <prvSetupTimerInterrupt+0x6>
    1b98:	00 d0       	rcall	.+0      	; 0x1b9a <prvSetupTimerInterrupt+0x8>
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <prvSetupTimerInterrupt+0xa>
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1ba0:	80 e8       	ldi	r24, 0x80	; 128
    1ba2:	9e e3       	ldi	r25, 0x3E	; 62
    1ba4:	a0 e0       	ldi	r26, 0x00	; 0
    1ba6:	b0 e0       	ldi	r27, 0x00	; 0
    1ba8:	8b 83       	std	Y+3, r24	; 0x03
    1baa:	9c 83       	std	Y+4, r25	; 0x04
    1bac:	ad 83       	std	Y+5, r26	; 0x05
    1bae:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	ad 81       	ldd	r26, Y+5	; 0x05
    1bb6:	be 81       	ldd	r27, Y+6	; 0x06
    1bb8:	68 94       	set
    1bba:	15 f8       	bld	r1, 5
    1bbc:	b6 95       	lsr	r27
    1bbe:	a7 95       	ror	r26
    1bc0:	97 95       	ror	r25
    1bc2:	87 95       	ror	r24
    1bc4:	16 94       	lsr	r1
    1bc6:	d1 f7       	brne	.-12     	; 0x1bbc <prvSetupTimerInterrupt+0x2a>
    1bc8:	8b 83       	std	Y+3, r24	; 0x03
    1bca:	9c 83       	std	Y+4, r25	; 0x04
    1bcc:	ad 83       	std	Y+5, r26	; 0x05
    1bce:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	ad 81       	ldd	r26, Y+5	; 0x05
    1bd6:	be 81       	ldd	r27, Y+6	; 0x06
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	a1 09       	sbc	r26, r1
    1bdc:	b1 09       	sbc	r27, r1
    1bde:	8b 83       	std	Y+3, r24	; 0x03
    1be0:	9c 83       	std	Y+4, r25	; 0x04
    1be2:	ad 83       	std	Y+5, r26	; 0x05
    1be4:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	ad 81       	ldd	r26, Y+5	; 0x05
    1bf0:	be 81       	ldd	r27, Y+6	; 0x06
    1bf2:	89 2f       	mov	r24, r25
    1bf4:	9a 2f       	mov	r25, r26
    1bf6:	ab 2f       	mov	r26, r27
    1bf8:	bb 27       	eor	r27, r27
    1bfa:	8b 83       	std	Y+3, r24	; 0x03
    1bfc:	9c 83       	std	Y+4, r25	; 0x04
    1bfe:	ad 83       	std	Y+5, r26	; 0x05
    1c00:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    1c06:	eb e4       	ldi	r30, 0x4B	; 75
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    1c0e:	ea e4       	ldi	r30, 0x4A	; 74
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1c16:	8b e0       	ldi	r24, 0x0B	; 11
    1c18:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    1c1a:	ee e4       	ldi	r30, 0x4E	; 78
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	89 81       	ldd	r24, Y+1	; 0x01
    1c20:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    1c22:	e9 e5       	ldi	r30, 0x59	; 89
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	80 61       	ori	r24, 0x10	; 16
    1c2e:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    1c30:	e9 e5       	ldi	r30, 0x59	; 89
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	80 83       	st	Z, r24
}
    1c38:	26 96       	adiw	r28, 0x06	; 6
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	cf 91       	pop	r28
    1c46:	df 91       	pop	r29
    1c48:	08 95       	ret

00001c4a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    1c4a:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1c4e:	18 95       	reti

00001c50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <xQueueGenericReset+0x6>
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <xQueueGenericReset+0x8>
    1c58:	0f 92       	push	r0
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	9c 83       	std	Y+4, r25	; 0x04
    1c60:	8b 83       	std	Y+3, r24	; 0x03
    1c62:	6d 83       	std	Y+5, r22	; 0x05
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	9c 81       	ldd	r25, Y+4	; 0x04
    1c68:	9a 83       	std	Y+2, r25	; 0x02
    1c6a:	89 83       	std	Y+1, r24	; 0x01

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	0f 92       	push	r0
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	40 81       	ld	r20, Z
    1c78:	51 81       	ldd	r21, Z+1	; 0x01
    1c7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c80:	28 2f       	mov	r18, r24
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	e9 81       	ldd	r30, Y+1	; 0x01
    1c86:	fa 81       	ldd	r31, Y+2	; 0x02
    1c88:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	bc 01       	movw	r22, r24
    1c90:	26 9f       	mul	r18, r22
    1c92:	c0 01       	movw	r24, r0
    1c94:	27 9f       	mul	r18, r23
    1c96:	90 0d       	add	r25, r0
    1c98:	36 9f       	mul	r19, r22
    1c9a:	90 0d       	add	r25, r0
    1c9c:	11 24       	eor	r1, r1
    1c9e:	84 0f       	add	r24, r20
    1ca0:	95 1f       	adc	r25, r21
    1ca2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca6:	93 83       	std	Z+3, r25	; 0x03
    1ca8:	82 83       	std	Z+2, r24	; 0x02
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
    1caa:	e9 81       	ldd	r30, Y+1	; 0x01
    1cac:	fa 81       	ldd	r31, Y+2	; 0x02
    1cae:	12 8e       	std	Z+26, r1	; 0x1a
		pxQueue->pcWriteTo = pxQueue->pcHead;
    1cb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb4:	80 81       	ld	r24, Z
    1cb6:	91 81       	ldd	r25, Z+1	; 0x01
    1cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cba:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbc:	95 83       	std	Z+5, r25	; 0x05
    1cbe:	84 83       	std	Z+4, r24	; 0x04
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
    1cc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc4:	40 81       	ld	r20, Z
    1cc6:	51 81       	ldd	r21, Z+1	; 0x01
    1cc8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cca:	fa 81       	ldd	r31, Y+2	; 0x02
    1ccc:	83 8d       	ldd	r24, Z+27	; 0x1b
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9c 01       	movw	r18, r24
    1cd4:	21 50       	subi	r18, 0x01	; 1
    1cd6:	30 40       	sbci	r19, 0x00	; 0
    1cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cda:	fa 81       	ldd	r31, Y+2	; 0x02
    1cdc:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cde:	88 2f       	mov	r24, r24
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	26 9f       	mul	r18, r22
    1ce6:	c0 01       	movw	r24, r0
    1ce8:	27 9f       	mul	r18, r23
    1cea:	90 0d       	add	r25, r0
    1cec:	36 9f       	mul	r19, r22
    1cee:	90 0d       	add	r25, r0
    1cf0:	11 24       	eor	r1, r1
    1cf2:	84 0f       	add	r24, r20
    1cf4:	95 1f       	adc	r25, r21
    1cf6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfa:	97 83       	std	Z+7, r25	; 0x07
    1cfc:	86 83       	std	Z+6, r24	; 0x06
		pxQueue->cRxLock = queueUNLOCKED;
    1cfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1d00:	fa 81       	ldd	r31, Y+2	; 0x02
    1d02:	8f ef       	ldi	r24, 0xFF	; 255
    1d04:	85 8f       	std	Z+29, r24	; 0x1d
		pxQueue->cTxLock = queueUNLOCKED;
    1d06:	e9 81       	ldd	r30, Y+1	; 0x01
    1d08:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0a:	8f ef       	ldi	r24, 0xFF	; 255
    1d0c:	86 8f       	std	Z+30, r24	; 0x1e

		if( xNewQueue == pdFALSE )
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	88 23       	and	r24, r24
    1d12:	79 f4       	brne	.+30     	; 0x1d32 <xQueueGenericReset+0xe2>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1d14:	e9 81       	ldd	r30, Y+1	; 0x01
    1d16:	fa 81       	ldd	r31, Y+2	; 0x02
    1d18:	80 85       	ldd	r24, Z+8	; 0x08
    1d1a:	88 23       	and	r24, r24
    1d1c:	a1 f0       	breq	.+40     	; 0x1d46 <xQueueGenericReset+0xf6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	08 96       	adiw	r24, 0x08	; 8
    1d24:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <xTaskRemoveFromEventList>
    1d28:	88 23       	and	r24, r24
    1d2a:	69 f0       	breq	.+26     	; 0x1d46 <xQueueGenericReset+0xf6>
				{
					queueYIELD_IF_USING_PREEMPTION();
    1d2c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
    1d30:	0a c0       	rjmp	.+20     	; 0x1d46 <xQueueGenericReset+0xf6>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	9a 81       	ldd	r25, Y+2	; 0x02
    1d36:	08 96       	adiw	r24, 0x08	; 8
    1d38:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	41 96       	adiw	r24, 0x11	; 17
    1d42:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
    1d46:	0f 90       	pop	r0
    1d48:	0f be       	out	0x3f, r0	; 63

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
}
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
    1d5c:	0f 93       	push	r16
    1d5e:	1f 93       	push	r17
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	29 97       	sbiw	r28, 0x09	; 9
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	de bf       	out	0x3e, r29	; 62
    1d70:	0f be       	out	0x3f, r0	; 63
    1d72:	cd bf       	out	0x3d, r28	; 61
    1d74:	8f 83       	std	Y+7, r24	; 0x07
    1d76:	68 87       	std	Y+8, r22	; 0x08
    1d78:	49 87       	std	Y+9, r20	; 0x09
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

		if( uxItemSize == ( UBaseType_t ) 0 )
    1d7a:	88 85       	ldd	r24, Y+8	; 0x08
    1d7c:	88 23       	and	r24, r24
    1d7e:	19 f4       	brne	.+6      	; 0x1d86 <xQueueGenericCreate+0x2a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
    1d80:	1c 82       	std	Y+4, r1	; 0x04
    1d82:	1b 82       	std	Y+3, r1	; 0x03
    1d84:	10 c0       	rjmp	.+32     	; 0x1da6 <xQueueGenericCreate+0x4a>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1d86:	8f 81       	ldd	r24, Y+7	; 0x07
    1d88:	28 2f       	mov	r18, r24
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	88 85       	ldd	r24, Y+8	; 0x08
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	ac 01       	movw	r20, r24
    1d94:	24 9f       	mul	r18, r20
    1d96:	c0 01       	movw	r24, r0
    1d98:	25 9f       	mul	r18, r21
    1d9a:	90 0d       	add	r25, r0
    1d9c:	34 9f       	mul	r19, r20
    1d9e:	90 0d       	add	r25, r0
    1da0:	11 24       	eor	r1, r1
    1da2:	9c 83       	std	Y+4, r25	; 0x04
    1da4:	8b 83       	std	Y+3, r24	; 0x03
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	9c 81       	ldd	r25, Y+4	; 0x04
    1daa:	4f 96       	adiw	r24, 0x1f	; 31
    1dac:	0e 94 82 08 	call	0x1104	; 0x1104 <pvPortMalloc>
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05

		if( pxNewQueue != NULL )
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	81 f0       	breq	.+32     	; 0x1ddc <xQueueGenericCreate+0x80>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc0:	4f 96       	adiw	r24, 0x1f	; 31
    1dc2:	9a 83       	std	Y+2, r25	; 0x02
    1dc4:	89 83       	std	Y+1, r24	; 0x01
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
    1dc6:	29 81       	ldd	r18, Y+1	; 0x01
    1dc8:	3a 81       	ldd	r19, Y+2	; 0x02
    1dca:	ed 81       	ldd	r30, Y+5	; 0x05
    1dcc:	fe 81       	ldd	r31, Y+6	; 0x06
    1dce:	8f 81       	ldd	r24, Y+7	; 0x07
    1dd0:	68 85       	ldd	r22, Y+8	; 0x08
    1dd2:	a9 01       	movw	r20, r18
    1dd4:	29 85       	ldd	r18, Y+9	; 0x09
    1dd6:	8f 01       	movw	r16, r30
    1dd8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
    1ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dde:	9e 81       	ldd	r25, Y+6	; 0x06
	}
    1de0:	29 96       	adiw	r28, 0x09	; 9
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	08 95       	ret

00001df6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
    1df6:	0f 93       	push	r16
    1df8:	1f 93       	push	r17
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	27 97       	sbiw	r28, 0x07	; 7
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	6a 83       	std	Y+2, r22	; 0x02
    1e12:	5c 83       	std	Y+4, r21	; 0x04
    1e14:	4b 83       	std	Y+3, r20	; 0x03
    1e16:	2d 83       	std	Y+5, r18	; 0x05
    1e18:	1f 83       	std	Y+7, r17	; 0x07
    1e1a:	0e 83       	std	Y+6, r16	; 0x06
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	88 23       	and	r24, r24
    1e20:	39 f4       	brne	.+14     	; 0x1e30 <prvInitialiseNewQueue+0x3a>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
    1e22:	8e 81       	ldd	r24, Y+6	; 0x06
    1e24:	9f 81       	ldd	r25, Y+7	; 0x07
    1e26:	ee 81       	ldd	r30, Y+6	; 0x06
    1e28:	ff 81       	ldd	r31, Y+7	; 0x07
    1e2a:	91 83       	std	Z+1, r25	; 0x01
    1e2c:	80 83       	st	Z, r24
    1e2e:	06 c0       	rjmp	.+12     	; 0x1e3c <prvInitialiseNewQueue+0x46>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
    1e30:	8b 81       	ldd	r24, Y+3	; 0x03
    1e32:	9c 81       	ldd	r25, Y+4	; 0x04
    1e34:	ee 81       	ldd	r30, Y+6	; 0x06
    1e36:	ff 81       	ldd	r31, Y+7	; 0x07
    1e38:	91 83       	std	Z+1, r25	; 0x01
    1e3a:	80 83       	st	Z, r24
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
    1e3c:	ee 81       	ldd	r30, Y+6	; 0x06
    1e3e:	ff 81       	ldd	r31, Y+7	; 0x07
    1e40:	89 81       	ldd	r24, Y+1	; 0x01
    1e42:	83 8f       	std	Z+27, r24	; 0x1b
	pxNewQueue->uxItemSize = uxItemSize;
    1e44:	ee 81       	ldd	r30, Y+6	; 0x06
    1e46:	ff 81       	ldd	r31, Y+7	; 0x07
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	84 8f       	std	Z+28, r24	; 0x1c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
    1e4c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e50:	61 e0       	ldi	r22, 0x01	; 1
    1e52:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
    1e56:	27 96       	adiw	r28, 0x07	; 7
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	08 95       	ret

00001e6c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <prvInitialiseMutex+0x6>
    1e72:	cd b7       	in	r28, 0x3d	; 61
    1e74:	de b7       	in	r29, 0x3e	; 62
    1e76:	9a 83       	std	Y+2, r25	; 0x02
    1e78:	89 83       	std	Y+1, r24	; 0x01
		if( pxNewQueue != NULL )
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7e:	00 97       	sbiw	r24, 0x00	; 0
    1e80:	a1 f0       	breq	.+40     	; 0x1eaa <prvInitialiseMutex+0x3e>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    1e82:	e9 81       	ldd	r30, Y+1	; 0x01
    1e84:	fa 81       	ldd	r31, Y+2	; 0x02
    1e86:	13 82       	std	Z+3, r1	; 0x03
    1e88:	12 82       	std	Z+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    1e8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8e:	11 82       	std	Z+1, r1	; 0x01
    1e90:	10 82       	st	Z, r1

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
    1e92:	e9 81       	ldd	r30, Y+1	; 0x01
    1e94:	fa 81       	ldd	r31, Y+2	; 0x02
    1e96:	16 82       	std	Z+6, r1	; 0x06

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	70 e0       	ldi	r23, 0x00	; 0
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <xQueueCreateMutex+0x6>
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <xQueueCreateMutex+0x8>
    1ebc:	0f 92       	push	r0
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	8d 83       	std	Y+5, r24	; 0x05
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	8a 83       	std	Y+2, r24	; 0x02
    1ec8:	19 82       	std	Y+1, r1	; 0x01

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	69 81       	ldd	r22, Y+1	; 0x01
    1ece:	4d 81       	ldd	r20, Y+5	; 0x05
    1ed0:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <xQueueGenericCreate>
    1ed4:	9c 83       	std	Y+4, r25	; 0x04
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
		prvInitialiseMutex( pxNewQueue );
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <prvInitialiseMutex>

		return pxNewQueue;
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	9c 81       	ldd	r25, Y+4	; 0x04
	}
    1ee4:	0f 90       	pop	r0
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	0f 90       	pop	r0
    1eee:	cf 91       	pop	r28
    1ef0:	df 91       	pop	r29
    1ef2:	08 95       	ret

00001ef4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
    1ef4:	df 93       	push	r29
    1ef6:	cf 93       	push	r28
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	2f 97       	sbiw	r28, 0x0f	; 15
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	99 87       	std	Y+9, r25	; 0x09
    1f0a:	88 87       	std	Y+8, r24	; 0x08
    1f0c:	7b 87       	std	Y+11, r23	; 0x0b
    1f0e:	6a 87       	std	Y+10, r22	; 0x0a
    1f10:	5d 87       	std	Y+13, r21	; 0x0d
    1f12:	4c 87       	std	Y+12, r20	; 0x0c
    1f14:	2e 87       	std	Y+14, r18	; 0x0e
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
    1f16:	1c 82       	std	Y+4, r1	; 0x04
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    1f18:	88 85       	ldd	r24, Y+8	; 0x08
    1f1a:	99 85       	ldd	r25, Y+9	; 0x09
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    1f26:	e9 81       	ldd	r30, Y+1	; 0x01
    1f28:	fa 81       	ldd	r31, Y+2	; 0x02
    1f2a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1f2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f30:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f32:	98 17       	cp	r25, r24
    1f34:	18 f0       	brcs	.+6      	; 0x1f3c <xQueueGenericSend+0x48>
    1f36:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f38:	82 30       	cpi	r24, 0x02	; 2
    1f3a:	11 f5       	brne	.+68     	; 0x1f80 <xQueueGenericSend+0x8c>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f42:	3b 85       	ldd	r19, Y+11	; 0x0b
    1f44:	b9 01       	movw	r22, r18
    1f46:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f48:	0e 94 ae 12 	call	0x255c	; 0x255c <prvCopyDataToQueue>
    1f4c:	8b 83       	std	Y+3, r24	; 0x03
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1f4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1f50:	fa 81       	ldd	r31, Y+2	; 0x02
    1f52:	81 89       	ldd	r24, Z+17	; 0x11
    1f54:	88 23       	and	r24, r24
    1f56:	51 f0       	breq	.+20     	; 0x1f6c <xQueueGenericSend+0x78>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5c:	41 96       	adiw	r24, 0x11	; 17
    1f5e:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <xTaskRemoveFromEventList>
    1f62:	88 23       	and	r24, r24
    1f64:	41 f0       	breq	.+16     	; 0x1f76 <xQueueGenericSend+0x82>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
    1f66:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
    1f6a:	05 c0       	rjmp	.+10     	; 0x1f76 <xQueueGenericSend+0x82>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	88 23       	and	r24, r24
    1f70:	11 f0       	breq	.+4      	; 0x1f76 <xQueueGenericSend+0x82>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
    1f72:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
    1f76:	0f 90       	pop	r0
    1f78:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	8f 87       	std	Y+15, r24	; 0x0f
    1f7e:	5c c0       	rjmp	.+184    	; 0x2038 <xQueueGenericSend+0x144>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    1f80:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f82:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f84:	00 97       	sbiw	r24, 0x00	; 0
    1f86:	21 f4       	brne	.+8      	; 0x1f90 <xQueueGenericSend+0x9c>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1f88:	0f 90       	pop	r0
    1f8a:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1f8c:	1f 86       	std	Y+15, r1	; 0x0f
    1f8e:	54 c0       	rjmp	.+168    	; 0x2038 <xQueueGenericSend+0x144>
				}
				else if( xEntryTimeSet == pdFALSE )
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	88 23       	and	r24, r24
    1f94:	31 f4       	brne	.+12     	; 0x1fa2 <xQueueGenericSend+0xae>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1f96:	ce 01       	movw	r24, r28
    1f98:	05 96       	adiw	r24, 0x05	; 5
    1f9a:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	8c 83       	std	Y+4, r24	; 0x04
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    1fa2:	0f 90       	pop	r0
    1fa4:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1fa6:	0e 94 33 1b 	call	0x3666	; 0x3666 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1faa:	0f b6       	in	r0, 0x3f	; 63
    1fac:	f8 94       	cli
    1fae:	0f 92       	push	r0
    1fb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1fb6:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb8:	19 f4       	brne	.+6      	; 0x1fc0 <xQueueGenericSend+0xcc>
    1fba:	e9 81       	ldd	r30, Y+1	; 0x01
    1fbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fbe:	15 8e       	std	Z+29, r1	; 0x1d
    1fc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc4:	86 8d       	ldd	r24, Z+30	; 0x1e
    1fc6:	8f 3f       	cpi	r24, 0xFF	; 255
    1fc8:	19 f4       	brne	.+6      	; 0x1fd0 <xQueueGenericSend+0xdc>
    1fca:	e9 81       	ldd	r30, Y+1	; 0x01
    1fcc:	fa 81       	ldd	r31, Y+2	; 0x02
    1fce:	16 8e       	std	Z+30, r1	; 0x1e
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1fd4:	ce 01       	movw	r24, r28
    1fd6:	05 96       	adiw	r24, 0x05	; 5
    1fd8:	9e 01       	movw	r18, r28
    1fda:	24 5f       	subi	r18, 0xF4	; 244
    1fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fde:	b9 01       	movw	r22, r18
    1fe0:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <xTaskCheckForTimeOut>
    1fe4:	88 23       	and	r24, r24
    1fe6:	09 f5       	brne	.+66     	; 0x202a <xQueueGenericSend+0x136>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	9a 81       	ldd	r25, Y+2	; 0x02
    1fec:	0e 94 35 14 	call	0x286a	; 0x286a <prvIsQueueFull>
    1ff0:	88 23       	and	r24, r24
    1ff2:	a1 f0       	breq	.+40     	; 0x201c <xQueueGenericSend+0x128>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff8:	08 96       	adiw	r24, 0x08	; 8
    1ffa:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ffc:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ffe:	b9 01       	movw	r22, r18
    2000:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	9a 81       	ldd	r25, Y+2	; 0x02
    2008:	0e 94 ad 13 	call	0x275a	; 0x275a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    200c:	0e 94 3f 1b 	call	0x367e	; 0x367e <xTaskResumeAll>
    2010:	88 23       	and	r24, r24
    2012:	09 f0       	breq	.+2      	; 0x2016 <xQueueGenericSend+0x122>
    2014:	85 cf       	rjmp	.-246    	; 0x1f20 <xQueueGenericSend+0x2c>
				{
					portYIELD_WITHIN_API();
    2016:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
    201a:	82 cf       	rjmp	.-252    	; 0x1f20 <xQueueGenericSend+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	9a 81       	ldd	r25, Y+2	; 0x02
    2020:	0e 94 ad 13 	call	0x275a	; 0x275a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2024:	0e 94 3f 1b 	call	0x367e	; 0x367e <xTaskResumeAll>
    2028:	7b cf       	rjmp	.-266    	; 0x1f20 <xQueueGenericSend+0x2c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    202a:	89 81       	ldd	r24, Y+1	; 0x01
    202c:	9a 81       	ldd	r25, Y+2	; 0x02
    202e:	0e 94 ad 13 	call	0x275a	; 0x275a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2032:	0e 94 3f 1b 	call	0x367e	; 0x367e <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2036:	1f 86       	std	Y+15, r1	; 0x0f
    2038:	8f 85       	ldd	r24, Y+15	; 0x0f
		}
	}

	return 0;
}
    203a:	2f 96       	adiw	r28, 0x0f	; 15
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	cf 91       	pop	r28
    2048:	df 91       	pop	r29
    204a:	08 95       	ret

0000204c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	2c 97       	sbiw	r28, 0x0c	; 12
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
    2060:	9f 83       	std	Y+7, r25	; 0x07
    2062:	8e 83       	std	Y+6, r24	; 0x06
    2064:	79 87       	std	Y+9, r23	; 0x09
    2066:	68 87       	std	Y+8, r22	; 0x08
    2068:	5b 87       	std	Y+11, r21	; 0x0b
    206a:	4a 87       	std	Y+10, r20	; 0x0a
    206c:	2c 87       	std	Y+12, r18	; 0x0c
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    206e:	8e 81       	ldd	r24, Y+6	; 0x06
    2070:	9f 81       	ldd	r25, Y+7	; 0x07
    2072:	9b 83       	std	Y+3, r25	; 0x03
    2074:	8a 83       	std	Y+2, r24	; 0x02
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2076:	1c 82       	std	Y+4, r1	; 0x04
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
    2078:	ea 81       	ldd	r30, Y+2	; 0x02
    207a:	fb 81       	ldd	r31, Y+3	; 0x03
    207c:	92 8d       	ldd	r25, Z+26	; 0x1a
    207e:	ea 81       	ldd	r30, Y+2	; 0x02
    2080:	fb 81       	ldd	r31, Y+3	; 0x03
    2082:	83 8d       	ldd	r24, Z+27	; 0x1b
    2084:	98 17       	cp	r25, r24
    2086:	18 f0       	brcs	.+6      	; 0x208e <xQueueGenericSendFromISR+0x42>
    2088:	8c 85       	ldd	r24, Y+12	; 0x0c
    208a:	82 30       	cpi	r24, 0x02	; 2
    208c:	61 f5       	brne	.+88     	; 0x20e6 <xQueueGenericSendFromISR+0x9a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    208e:	ea 81       	ldd	r30, Y+2	; 0x02
    2090:	fb 81       	ldd	r31, Y+3	; 0x03
    2092:	86 8d       	ldd	r24, Z+30	; 0x1e
    2094:	89 83       	std	Y+1, r24	; 0x01
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	9b 81       	ldd	r25, Y+3	; 0x03
    209a:	28 85       	ldd	r18, Y+8	; 0x08
    209c:	39 85       	ldd	r19, Y+9	; 0x09
    209e:	b9 01       	movw	r22, r18
    20a0:	4c 85       	ldd	r20, Y+12	; 0x0c
    20a2:	0e 94 ae 12 	call	0x255c	; 0x255c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	8f 3f       	cpi	r24, 0xFF	; 255
    20aa:	a9 f4       	brne	.+42     	; 0x20d6 <xQueueGenericSendFromISR+0x8a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    20ac:	ea 81       	ldd	r30, Y+2	; 0x02
    20ae:	fb 81       	ldd	r31, Y+3	; 0x03
    20b0:	81 89       	ldd	r24, Z+17	; 0x11
    20b2:	88 23       	and	r24, r24
    20b4:	a9 f0       	breq	.+42     	; 0x20e0 <xQueueGenericSendFromISR+0x94>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ba:	41 96       	adiw	r24, 0x11	; 17
    20bc:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <xTaskRemoveFromEventList>
    20c0:	88 23       	and	r24, r24
    20c2:	71 f0       	breq	.+28     	; 0x20e0 <xQueueGenericSendFromISR+0x94>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    20c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c8:	00 97       	sbiw	r24, 0x00	; 0
    20ca:	51 f0       	breq	.+20     	; 0x20e0 <xQueueGenericSendFromISR+0x94>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    20cc:	ea 85       	ldd	r30, Y+10	; 0x0a
    20ce:	fb 85       	ldd	r31, Y+11	; 0x0b
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	80 83       	st	Z, r24
    20d4:	05 c0       	rjmp	.+10     	; 0x20e0 <xQueueGenericSendFromISR+0x94>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	8f 5f       	subi	r24, 0xFF	; 255
    20da:	ea 81       	ldd	r30, Y+2	; 0x02
    20dc:	fb 81       	ldd	r31, Y+3	; 0x03
    20de:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	8d 83       	std	Y+5, r24	; 0x05
    20e4:	01 c0       	rjmp	.+2      	; 0x20e8 <xQueueGenericSendFromISR+0x9c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    20e6:	1d 82       	std	Y+5, r1	; 0x05
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    20e8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    20ea:	2c 96       	adiw	r28, 0x0c	; 12
    20ec:	0f b6       	in	r0, 0x3f	; 63
    20ee:	f8 94       	cli
    20f0:	de bf       	out	0x3e, r29	; 62
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	cd bf       	out	0x3d, r28	; 61
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	cd b7       	in	r28, 0x3d	; 61
    2102:	de b7       	in	r29, 0x3e	; 62
    2104:	2a 97       	sbiw	r28, 0x0a	; 10
    2106:	0f b6       	in	r0, 0x3f	; 63
    2108:	f8 94       	cli
    210a:	de bf       	out	0x3e, r29	; 62
    210c:	0f be       	out	0x3f, r0	; 63
    210e:	cd bf       	out	0x3d, r28	; 61
    2110:	98 87       	std	Y+8, r25	; 0x08
    2112:	8f 83       	std	Y+7, r24	; 0x07
    2114:	7a 87       	std	Y+10, r23	; 0x0a
    2116:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2118:	8f 81       	ldd	r24, Y+7	; 0x07
    211a:	98 85       	ldd	r25, Y+8	; 0x08
    211c:	9c 83       	std	Y+4, r25	; 0x04
    211e:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2120:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2122:	eb 81       	ldd	r30, Y+3	; 0x03
    2124:	fc 81       	ldd	r31, Y+4	; 0x04
    2126:	82 8d       	ldd	r24, Z+26	; 0x1a
    2128:	8a 83       	std	Y+2, r24	; 0x02

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
    212a:	eb 81       	ldd	r30, Y+3	; 0x03
    212c:	fc 81       	ldd	r31, Y+4	; 0x04
    212e:	93 8d       	ldd	r25, Z+27	; 0x1b
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	89 17       	cp	r24, r25
    2134:	48 f5       	brcc	.+82     	; 0x2188 <xQueueGiveFromISR+0x8c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
    2136:	eb 81       	ldd	r30, Y+3	; 0x03
    2138:	fc 81       	ldd	r31, Y+4	; 0x04
    213a:	86 8d       	ldd	r24, Z+30	; 0x1e
    213c:	89 83       	std	Y+1, r24	; 0x01
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	8f 5f       	subi	r24, 0xFF	; 255
    2142:	eb 81       	ldd	r30, Y+3	; 0x03
    2144:	fc 81       	ldd	r31, Y+4	; 0x04
    2146:	82 8f       	std	Z+26, r24	; 0x1a

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	8f 3f       	cpi	r24, 0xFF	; 255
    214c:	a9 f4       	brne	.+42     	; 0x2178 <xQueueGiveFromISR+0x7c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    214e:	eb 81       	ldd	r30, Y+3	; 0x03
    2150:	fc 81       	ldd	r31, Y+4	; 0x04
    2152:	81 89       	ldd	r24, Z+17	; 0x11
    2154:	88 23       	and	r24, r24
    2156:	a9 f0       	breq	.+42     	; 0x2182 <xQueueGiveFromISR+0x86>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	41 96       	adiw	r24, 0x11	; 17
    215e:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <xTaskRemoveFromEventList>
    2162:	88 23       	and	r24, r24
    2164:	71 f0       	breq	.+28     	; 0x2182 <xQueueGiveFromISR+0x86>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
    2166:	89 85       	ldd	r24, Y+9	; 0x09
    2168:	9a 85       	ldd	r25, Y+10	; 0x0a
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	51 f0       	breq	.+20     	; 0x2182 <xQueueGiveFromISR+0x86>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
    216e:	e9 85       	ldd	r30, Y+9	; 0x09
    2170:	fa 85       	ldd	r31, Y+10	; 0x0a
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	80 83       	st	Z, r24
    2176:	05 c0       	rjmp	.+10     	; 0x2182 <xQueueGiveFromISR+0x86>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
    2178:	89 81       	ldd	r24, Y+1	; 0x01
    217a:	8f 5f       	subi	r24, 0xFF	; 255
    217c:	eb 81       	ldd	r30, Y+3	; 0x03
    217e:	fc 81       	ldd	r31, Y+4	; 0x04
    2180:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	8e 83       	std	Y+6, r24	; 0x06
    2186:	01 c0       	rjmp	.+2      	; 0x218a <xQueueGiveFromISR+0x8e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2188:	1e 82       	std	Y+6, r1	; 0x06
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    218a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    218c:	2a 96       	adiw	r28, 0x0a	; 10
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	61 97       	sbiw	r28, 0x11	; 17
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	9b 87       	std	Y+11, r25	; 0x0b
    21b4:	8a 87       	std	Y+10, r24	; 0x0a
    21b6:	7d 87       	std	Y+13, r23	; 0x0d
    21b8:	6c 87       	std	Y+12, r22	; 0x0c
    21ba:	5f 87       	std	Y+15, r21	; 0x0f
    21bc:	4e 87       	std	Y+14, r20	; 0x0e
    21be:	28 8b       	std	Y+16, r18	; 0x10
BaseType_t xEntryTimeSet = pdFALSE;
    21c0:	1e 82       	std	Y+6, r1	; 0x06
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    21c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    21c6:	9b 83       	std	Y+3, r25	; 0x03
    21c8:	8a 83       	std	Y+2, r24	; 0x02
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    21d0:	ea 81       	ldd	r30, Y+2	; 0x02
    21d2:	fb 81       	ldd	r31, Y+3	; 0x03
    21d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    21d6:	89 83       	std	Y+1, r24	; 0x01

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	88 23       	and	r24, r24
    21dc:	09 f4       	brne	.+2      	; 0x21e0 <xQueueGenericReceive+0x42>
    21de:	49 c0       	rjmp	.+146    	; 0x2272 <xQueueGenericReceive+0xd4>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    21e0:	ea 81       	ldd	r30, Y+2	; 0x02
    21e2:	fb 81       	ldd	r31, Y+3	; 0x03
    21e4:	86 81       	ldd	r24, Z+6	; 0x06
    21e6:	97 81       	ldd	r25, Z+7	; 0x07
    21e8:	9d 83       	std	Y+5, r25	; 0x05
    21ea:	8c 83       	std	Y+4, r24	; 0x04

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	9b 81       	ldd	r25, Y+3	; 0x03
    21f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    21f2:	3d 85       	ldd	r19, Y+13	; 0x0d
    21f4:	b9 01       	movw	r22, r18
    21f6:	0e 94 66 13 	call	0x26cc	; 0x26cc <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    21fa:	88 89       	ldd	r24, Y+16	; 0x10
    21fc:	88 23       	and	r24, r24
    21fe:	01 f5       	brne	.+64     	; 0x2240 <xQueueGenericReceive+0xa2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	81 50       	subi	r24, 0x01	; 1
    2204:	ea 81       	ldd	r30, Y+2	; 0x02
    2206:	fb 81       	ldd	r31, Y+3	; 0x03
    2208:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    220a:	ea 81       	ldd	r30, Y+2	; 0x02
    220c:	fb 81       	ldd	r31, Y+3	; 0x03
    220e:	80 81       	ld	r24, Z
    2210:	91 81       	ldd	r25, Z+1	; 0x01
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	31 f4       	brne	.+12     	; 0x2222 <xQueueGenericReceive+0x84>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    2216:	0e 94 34 21 	call	0x4268	; 0x4268 <pvTaskIncrementMutexHeldCount>
    221a:	ea 81       	ldd	r30, Y+2	; 0x02
    221c:	fb 81       	ldd	r31, Y+3	; 0x03
    221e:	93 83       	std	Z+3, r25	; 0x03
    2220:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2222:	ea 81       	ldd	r30, Y+2	; 0x02
    2224:	fb 81       	ldd	r31, Y+3	; 0x03
    2226:	80 85       	ldd	r24, Z+8	; 0x08
    2228:	88 23       	and	r24, r24
    222a:	f1 f0       	breq	.+60     	; 0x2268 <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    222c:	8a 81       	ldd	r24, Y+2	; 0x02
    222e:	9b 81       	ldd	r25, Y+3	; 0x03
    2230:	08 96       	adiw	r24, 0x08	; 8
    2232:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <xTaskRemoveFromEventList>
    2236:	88 23       	and	r24, r24
    2238:	b9 f0       	breq	.+46     	; 0x2268 <xQueueGenericReceive+0xca>
						{
							queueYIELD_IF_USING_PREEMPTION();
    223a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
    223e:	14 c0       	rjmp	.+40     	; 0x2268 <xQueueGenericReceive+0xca>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2240:	ea 81       	ldd	r30, Y+2	; 0x02
    2242:	fb 81       	ldd	r31, Y+3	; 0x03
    2244:	8c 81       	ldd	r24, Y+4	; 0x04
    2246:	9d 81       	ldd	r25, Y+5	; 0x05
    2248:	97 83       	std	Z+7, r25	; 0x07
    224a:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    224c:	ea 81       	ldd	r30, Y+2	; 0x02
    224e:	fb 81       	ldd	r31, Y+3	; 0x03
    2250:	81 89       	ldd	r24, Z+17	; 0x11
    2252:	88 23       	and	r24, r24
    2254:	49 f0       	breq	.+18     	; 0x2268 <xQueueGenericReceive+0xca>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2256:	8a 81       	ldd	r24, Y+2	; 0x02
    2258:	9b 81       	ldd	r25, Y+3	; 0x03
    225a:	41 96       	adiw	r24, 0x11	; 17
    225c:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <xTaskRemoveFromEventList>
    2260:	88 23       	and	r24, r24
    2262:	11 f0       	breq	.+4      	; 0x2268 <xQueueGenericReceive+0xca>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    2264:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    2268:	0f 90       	pop	r0
    226a:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	89 8b       	std	Y+17, r24	; 0x11
    2270:	74 c0       	rjmp	.+232    	; 0x235a <xQueueGenericReceive+0x1bc>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    2272:	8e 85       	ldd	r24, Y+14	; 0x0e
    2274:	9f 85       	ldd	r25, Y+15	; 0x0f
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	21 f4       	brne	.+8      	; 0x2282 <xQueueGenericReceive+0xe4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    227a:	0f 90       	pop	r0
    227c:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    227e:	19 8a       	std	Y+17, r1	; 0x11
    2280:	6c c0       	rjmp	.+216    	; 0x235a <xQueueGenericReceive+0x1bc>
				}
				else if( xEntryTimeSet == pdFALSE )
    2282:	8e 81       	ldd	r24, Y+6	; 0x06
    2284:	88 23       	and	r24, r24
    2286:	31 f4       	brne	.+12     	; 0x2294 <xQueueGenericReceive+0xf6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2288:	ce 01       	movw	r24, r28
    228a:	07 96       	adiw	r24, 0x07	; 7
    228c:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	8e 83       	std	Y+6, r24	; 0x06
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    2294:	0f 90       	pop	r0
    2296:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2298:	0e 94 33 1b 	call	0x3666	; 0x3666 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	0f 92       	push	r0
    22a2:	ea 81       	ldd	r30, Y+2	; 0x02
    22a4:	fb 81       	ldd	r31, Y+3	; 0x03
    22a6:	85 8d       	ldd	r24, Z+29	; 0x1d
    22a8:	8f 3f       	cpi	r24, 0xFF	; 255
    22aa:	19 f4       	brne	.+6      	; 0x22b2 <xQueueGenericReceive+0x114>
    22ac:	ea 81       	ldd	r30, Y+2	; 0x02
    22ae:	fb 81       	ldd	r31, Y+3	; 0x03
    22b0:	15 8e       	std	Z+29, r1	; 0x1d
    22b2:	ea 81       	ldd	r30, Y+2	; 0x02
    22b4:	fb 81       	ldd	r31, Y+3	; 0x03
    22b6:	86 8d       	ldd	r24, Z+30	; 0x1e
    22b8:	8f 3f       	cpi	r24, 0xFF	; 255
    22ba:	19 f4       	brne	.+6      	; 0x22c2 <xQueueGenericReceive+0x124>
    22bc:	ea 81       	ldd	r30, Y+2	; 0x02
    22be:	fb 81       	ldd	r31, Y+3	; 0x03
    22c0:	16 8e       	std	Z+30, r1	; 0x1e
    22c2:	0f 90       	pop	r0
    22c4:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    22c6:	ce 01       	movw	r24, r28
    22c8:	07 96       	adiw	r24, 0x07	; 7
    22ca:	9e 01       	movw	r18, r28
    22cc:	22 5f       	subi	r18, 0xF2	; 242
    22ce:	3f 4f       	sbci	r19, 0xFF	; 255
    22d0:	b9 01       	movw	r22, r18
    22d2:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <xTaskCheckForTimeOut>
    22d6:	88 23       	and	r24, r24
    22d8:	91 f5       	brne	.+100    	; 0x233e <xQueueGenericReceive+0x1a0>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	9b 81       	ldd	r25, Y+3	; 0x03
    22de:	0e 94 00 14 	call	0x2800	; 0x2800 <prvIsQueueEmpty>
    22e2:	88 23       	and	r24, r24
    22e4:	29 f1       	breq	.+74     	; 0x2330 <xQueueGenericReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    22e6:	ea 81       	ldd	r30, Y+2	; 0x02
    22e8:	fb 81       	ldd	r31, Y+3	; 0x03
    22ea:	80 81       	ld	r24, Z
    22ec:	91 81       	ldd	r25, Z+1	; 0x01
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	59 f4       	brne	.+22     	; 0x2308 <xQueueGenericReceive+0x16a>
					{
						taskENTER_CRITICAL();
    22f2:	0f b6       	in	r0, 0x3f	; 63
    22f4:	f8 94       	cli
    22f6:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    22f8:	ea 81       	ldd	r30, Y+2	; 0x02
    22fa:	fb 81       	ldd	r31, Y+3	; 0x03
    22fc:	82 81       	ldd	r24, Z+2	; 0x02
    22fe:	93 81       	ldd	r25, Z+3	; 0x03
    2300:	0e 94 10 20 	call	0x4020	; 0x4020 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    2304:	0f 90       	pop	r0
    2306:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	9b 81       	ldd	r25, Y+3	; 0x03
    230c:	41 96       	adiw	r24, 0x11	; 17
    230e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2310:	3f 85       	ldd	r19, Y+15	; 0x0f
    2312:	b9 01       	movw	r22, r18
    2314:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	9b 81       	ldd	r25, Y+3	; 0x03
    231c:	0e 94 ad 13 	call	0x275a	; 0x275a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    2320:	0e 94 3f 1b 	call	0x367e	; 0x367e <xTaskResumeAll>
    2324:	88 23       	and	r24, r24
    2326:	09 f0       	breq	.+2      	; 0x232a <xQueueGenericReceive+0x18c>
    2328:	50 cf       	rjmp	.-352    	; 0x21ca <xQueueGenericReceive+0x2c>
				{
					portYIELD_WITHIN_API();
    232a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
    232e:	4d cf       	rjmp	.-358    	; 0x21ca <xQueueGenericReceive+0x2c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	9b 81       	ldd	r25, Y+3	; 0x03
    2334:	0e 94 ad 13 	call	0x275a	; 0x275a <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2338:	0e 94 3f 1b 	call	0x367e	; 0x367e <xTaskResumeAll>
    233c:	46 cf       	rjmp	.-372    	; 0x21ca <xQueueGenericReceive+0x2c>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	9b 81       	ldd	r25, Y+3	; 0x03
    2342:	0e 94 ad 13 	call	0x275a	; 0x275a <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2346:	0e 94 3f 1b 	call	0x367e	; 0x367e <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	9b 81       	ldd	r25, Y+3	; 0x03
    234e:	0e 94 00 14 	call	0x2800	; 0x2800 <prvIsQueueEmpty>
    2352:	88 23       	and	r24, r24
    2354:	09 f4       	brne	.+2      	; 0x2358 <xQueueGenericReceive+0x1ba>
    2356:	39 cf       	rjmp	.-398    	; 0x21ca <xQueueGenericReceive+0x2c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
    2358:	19 8a       	std	Y+17, r1	; 0x11
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    235a:	89 89       	ldd	r24, Y+17	; 0x11

	return 0;
}
    235c:	61 96       	adiw	r28, 0x11	; 17
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	de bf       	out	0x3e, r29	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	cd bf       	out	0x3d, r28	; 61
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	2c 97       	sbiw	r28, 0x0c	; 12
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	de bf       	out	0x3e, r29	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	cd bf       	out	0x3d, r28	; 61
    2382:	98 87       	std	Y+8, r25	; 0x08
    2384:	8f 83       	std	Y+7, r24	; 0x07
    2386:	7a 87       	std	Y+10, r23	; 0x0a
    2388:	69 87       	std	Y+9, r22	; 0x09
    238a:	5c 87       	std	Y+12, r21	; 0x0c
    238c:	4b 87       	std	Y+11, r20	; 0x0b
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    238e:	8f 81       	ldd	r24, Y+7	; 0x07
    2390:	98 85       	ldd	r25, Y+8	; 0x08
    2392:	9c 83       	std	Y+4, r25	; 0x04
    2394:	8b 83       	std	Y+3, r24	; 0x03
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2396:	1d 82       	std	Y+5, r1	; 0x05
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    2398:	eb 81       	ldd	r30, Y+3	; 0x03
    239a:	fc 81       	ldd	r31, Y+4	; 0x04
    239c:	82 8d       	ldd	r24, Z+26	; 0x1a
    239e:	8a 83       	std	Y+2, r24	; 0x02

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	88 23       	and	r24, r24
    23a4:	81 f1       	breq	.+96     	; 0x2406 <xQueueReceiveFromISR+0x98>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
    23a6:	eb 81       	ldd	r30, Y+3	; 0x03
    23a8:	fc 81       	ldd	r31, Y+4	; 0x04
    23aa:	85 8d       	ldd	r24, Z+29	; 0x1d
    23ac:	89 83       	std	Y+1, r24	; 0x01

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	29 85       	ldd	r18, Y+9	; 0x09
    23b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    23b6:	b9 01       	movw	r22, r18
    23b8:	0e 94 66 13 	call	0x26cc	; 0x26cc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    23bc:	8a 81       	ldd	r24, Y+2	; 0x02
    23be:	81 50       	subi	r24, 0x01	; 1
    23c0:	eb 81       	ldd	r30, Y+3	; 0x03
    23c2:	fc 81       	ldd	r31, Y+4	; 0x04
    23c4:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	8f 3f       	cpi	r24, 0xFF	; 255
    23ca:	a9 f4       	brne	.+42     	; 0x23f6 <xQueueReceiveFromISR+0x88>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    23cc:	eb 81       	ldd	r30, Y+3	; 0x03
    23ce:	fc 81       	ldd	r31, Y+4	; 0x04
    23d0:	80 85       	ldd	r24, Z+8	; 0x08
    23d2:	88 23       	and	r24, r24
    23d4:	a9 f0       	breq	.+42     	; 0x2400 <xQueueReceiveFromISR+0x92>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	08 96       	adiw	r24, 0x08	; 8
    23dc:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <xTaskRemoveFromEventList>
    23e0:	88 23       	and	r24, r24
    23e2:	71 f0       	breq	.+28     	; 0x2400 <xQueueReceiveFromISR+0x92>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
    23e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    23e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	51 f0       	breq	.+20     	; 0x2400 <xQueueReceiveFromISR+0x92>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
    23ec:	eb 85       	ldd	r30, Y+11	; 0x0b
    23ee:	fc 85       	ldd	r31, Y+12	; 0x0c
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	80 83       	st	Z, r24
    23f4:	05 c0       	rjmp	.+10     	; 0x2400 <xQueueReceiveFromISR+0x92>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	8f 5f       	subi	r24, 0xFF	; 255
    23fa:	eb 81       	ldd	r30, Y+3	; 0x03
    23fc:	fc 81       	ldd	r31, Y+4	; 0x04
    23fe:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	8e 83       	std	Y+6, r24	; 0x06
    2404:	01 c0       	rjmp	.+2      	; 0x2408 <xQueueReceiveFromISR+0x9a>
		}
		else
		{
			xReturn = pdFAIL;
    2406:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2408:	8e 81       	ldd	r24, Y+6	; 0x06
}
    240a:	2c 96       	adiw	r28, 0x0c	; 12
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	de bf       	out	0x3e, r29	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	cd bf       	out	0x3d, r28	; 61
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <xQueuePeekFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
{
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	2a 97       	sbiw	r28, 0x0a	; 10
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	de bf       	out	0x3e, r29	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	cd bf       	out	0x3d, r28	; 61
    2430:	98 87       	std	Y+8, r25	; 0x08
    2432:	8f 83       	std	Y+7, r24	; 0x07
    2434:	7a 87       	std	Y+10, r23	; 0x0a
    2436:	69 87       	std	Y+9, r22	; 0x09
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2438:	8f 81       	ldd	r24, Y+7	; 0x07
    243a:	98 85       	ldd	r25, Y+8	; 0x08
    243c:	9a 83       	std	Y+2, r25	; 0x02
    243e:	89 83       	std	Y+1, r24	; 0x01
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2440:	1d 82       	std	Y+5, r1	; 0x05
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2442:	e9 81       	ldd	r30, Y+1	; 0x01
    2444:	fa 81       	ldd	r31, Y+2	; 0x02
    2446:	82 8d       	ldd	r24, Z+26	; 0x1a
    2448:	88 23       	and	r24, r24
    244a:	b1 f0       	breq	.+44     	; 0x2478 <xQueuePeekFromISR+0x5c>
		{
			traceQUEUE_PEEK_FROM_ISR( pxQueue );

			/* Remember the read position so it can be reset as nothing is
			actually being removed from the queue. */
			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    244c:	e9 81       	ldd	r30, Y+1	; 0x01
    244e:	fa 81       	ldd	r31, Y+2	; 0x02
    2450:	86 81       	ldd	r24, Z+6	; 0x06
    2452:	97 81       	ldd	r25, Z+7	; 0x07
    2454:	9c 83       	std	Y+4, r25	; 0x04
    2456:	8b 83       	std	Y+3, r24	; 0x03
			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	29 85       	ldd	r18, Y+9	; 0x09
    245e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2460:	b9 01       	movw	r22, r18
    2462:	0e 94 66 13 	call	0x26cc	; 0x26cc <prvCopyDataFromQueue>
			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    2466:	e9 81       	ldd	r30, Y+1	; 0x01
    2468:	fa 81       	ldd	r31, Y+2	; 0x02
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	97 83       	std	Z+7, r25	; 0x07
    2470:	86 83       	std	Z+6, r24	; 0x06

			xReturn = pdPASS;
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	8e 83       	std	Y+6, r24	; 0x06
    2476:	01 c0       	rjmp	.+2      	; 0x247a <xQueuePeekFromISR+0x5e>
		}
		else
		{
			xReturn = pdFAIL;
    2478:	1e 82       	std	Y+6, r1	; 0x06
			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    247a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    247c:	2a 96       	adiw	r28, 0x0a	; 10
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	00 d0       	rcall	.+0      	; 0x2494 <uxQueueMessagesWaiting+0x6>
    2494:	0f 92       	push	r0
    2496:	cd b7       	in	r28, 0x3d	; 61
    2498:	de b7       	in	r29, 0x3e	; 62
    249a:	9b 83       	std	Y+3, r25	; 0x03
    249c:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	taskENTER_CRITICAL();
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	0f 92       	push	r0
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    24a4:	ea 81       	ldd	r30, Y+2	; 0x02
    24a6:	fb 81       	ldd	r31, Y+3	; 0x03
    24a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    24aa:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    24ac:	0f 90       	pop	r0
    24ae:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <uxQueueSpacesAvailable+0x6>
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <uxQueueSpacesAvailable+0x8>
    24c6:	0f 92       	push	r0
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	9d 83       	std	Y+5, r25	; 0x05
    24ce:	8c 83       	std	Y+4, r24	; 0x04
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
    24d0:	8c 81       	ldd	r24, Y+4	; 0x04
    24d2:	9d 81       	ldd	r25, Y+5	; 0x05
    24d4:	9a 83       	std	Y+2, r25	; 0x02
    24d6:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	0f 92       	push	r0
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
    24de:	e9 81       	ldd	r30, Y+1	; 0x01
    24e0:	fa 81       	ldd	r31, Y+2	; 0x02
    24e2:	93 8d       	ldd	r25, Z+27	; 0x1b
    24e4:	e9 81       	ldd	r30, Y+1	; 0x01
    24e6:	fa 81       	ldd	r31, Y+2	; 0x02
    24e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    24ea:	29 2f       	mov	r18, r25
    24ec:	28 1b       	sub	r18, r24
    24ee:	82 2f       	mov	r24, r18
    24f0:	8b 83       	std	Y+3, r24	; 0x03
	}
	taskEXIT_CRITICAL();
    24f2:	0f 90       	pop	r0
    24f4:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	cf 91       	pop	r28
    2504:	df 91       	pop	r29
    2506:	08 95       	ret

00002508 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	00 d0       	rcall	.+0      	; 0x250e <uxQueueMessagesWaitingFromISR+0x6>
    250e:	0f 92       	push	r0
    2510:	cd b7       	in	r28, 0x3d	; 61
    2512:	de b7       	in	r29, 0x3e	; 62
    2514:	9b 83       	std	Y+3, r25	; 0x03
    2516:	8a 83       	std	Y+2, r24	; 0x02
UBaseType_t uxReturn;

	configASSERT( xQueue );

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
    2518:	ea 81       	ldd	r30, Y+2	; 0x02
    251a:	fb 81       	ldd	r31, Y+3	; 0x03
    251c:	82 8d       	ldd	r24, Z+26	; 0x1a
    251e:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    2520:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	00 d0       	rcall	.+0      	; 0x2534 <vQueueDelete+0x6>
    2534:	00 d0       	rcall	.+0      	; 0x2536 <vQueueDelete+0x8>
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	9c 83       	std	Y+4, r25	; 0x04
    253c:	8b 83       	std	Y+3, r24	; 0x03
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    253e:	8b 81       	ldd	r24, Y+3	; 0x03
    2540:	9c 81       	ldd	r25, Y+4	; 0x04
    2542:	9a 83       	std	Y+2, r25	; 0x02
    2544:	89 83       	std	Y+1, r24	; 0x01

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
    2546:	89 81       	ldd	r24, Y+1	; 0x01
    2548:	9a 81       	ldd	r25, Y+2	; 0x02
    254a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
    254e:	0f 90       	pop	r0
    2550:	0f 90       	pop	r0
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	27 97       	sbiw	r28, 0x07	; 7
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	de bf       	out	0x3e, r29	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	cd bf       	out	0x3d, r28	; 61
    2570:	9c 83       	std	Y+4, r25	; 0x04
    2572:	8b 83       	std	Y+3, r24	; 0x03
    2574:	7e 83       	std	Y+6, r23	; 0x06
    2576:	6d 83       	std	Y+5, r22	; 0x05
    2578:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    257a:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    257c:	eb 81       	ldd	r30, Y+3	; 0x03
    257e:	fc 81       	ldd	r31, Y+4	; 0x04
    2580:	82 8d       	ldd	r24, Z+26	; 0x1a
    2582:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    2584:	eb 81       	ldd	r30, Y+3	; 0x03
    2586:	fc 81       	ldd	r31, Y+4	; 0x04
    2588:	84 8d       	ldd	r24, Z+28	; 0x1c
    258a:	88 23       	and	r24, r24
    258c:	99 f4       	brne	.+38     	; 0x25b4 <prvCopyDataToQueue+0x58>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    258e:	eb 81       	ldd	r30, Y+3	; 0x03
    2590:	fc 81       	ldd	r31, Y+4	; 0x04
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	09 f0       	breq	.+2      	; 0x259c <prvCopyDataToQueue+0x40>
    259a:	89 c0       	rjmp	.+274    	; 0x26ae <prvCopyDataToQueue+0x152>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    259c:	eb 81       	ldd	r30, Y+3	; 0x03
    259e:	fc 81       	ldd	r31, Y+4	; 0x04
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	0e 94 9b 20 	call	0x4136	; 0x4136 <xTaskPriorityDisinherit>
    25a8:	8a 83       	std	Y+2, r24	; 0x02
				pxQueue->pxMutexHolder = NULL;
    25aa:	eb 81       	ldd	r30, Y+3	; 0x03
    25ac:	fc 81       	ldd	r31, Y+4	; 0x04
    25ae:	13 82       	std	Z+3, r1	; 0x03
    25b0:	12 82       	std	Z+2, r1	; 0x02
    25b2:	7d c0       	rjmp	.+250    	; 0x26ae <prvCopyDataToQueue+0x152>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    25b4:	8f 81       	ldd	r24, Y+7	; 0x07
    25b6:	88 23       	and	r24, r24
    25b8:	99 f5       	brne	.+102    	; 0x2620 <prvCopyDataToQueue+0xc4>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    25ba:	eb 81       	ldd	r30, Y+3	; 0x03
    25bc:	fc 81       	ldd	r31, Y+4	; 0x04
    25be:	64 81       	ldd	r22, Z+4	; 0x04
    25c0:	75 81       	ldd	r23, Z+5	; 0x05
    25c2:	eb 81       	ldd	r30, Y+3	; 0x03
    25c4:	fc 81       	ldd	r31, Y+4	; 0x04
    25c6:	84 8d       	ldd	r24, Z+28	; 0x1c
    25c8:	48 2f       	mov	r20, r24
    25ca:	50 e0       	ldi	r21, 0x00	; 0
    25cc:	2d 81       	ldd	r18, Y+5	; 0x05
    25ce:	3e 81       	ldd	r19, Y+6	; 0x06
    25d0:	cb 01       	movw	r24, r22
    25d2:	b9 01       	movw	r22, r18
    25d4:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    25d8:	eb 81       	ldd	r30, Y+3	; 0x03
    25da:	fc 81       	ldd	r31, Y+4	; 0x04
    25dc:	24 81       	ldd	r18, Z+4	; 0x04
    25de:	35 81       	ldd	r19, Z+5	; 0x05
    25e0:	eb 81       	ldd	r30, Y+3	; 0x03
    25e2:	fc 81       	ldd	r31, Y+4	; 0x04
    25e4:	84 8d       	ldd	r24, Z+28	; 0x1c
    25e6:	88 2f       	mov	r24, r24
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	82 0f       	add	r24, r18
    25ec:	93 1f       	adc	r25, r19
    25ee:	eb 81       	ldd	r30, Y+3	; 0x03
    25f0:	fc 81       	ldd	r31, Y+4	; 0x04
    25f2:	95 83       	std	Z+5, r25	; 0x05
    25f4:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    25f6:	eb 81       	ldd	r30, Y+3	; 0x03
    25f8:	fc 81       	ldd	r31, Y+4	; 0x04
    25fa:	24 81       	ldd	r18, Z+4	; 0x04
    25fc:	35 81       	ldd	r19, Z+5	; 0x05
    25fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2600:	fc 81       	ldd	r31, Y+4	; 0x04
    2602:	82 81       	ldd	r24, Z+2	; 0x02
    2604:	93 81       	ldd	r25, Z+3	; 0x03
    2606:	28 17       	cp	r18, r24
    2608:	39 07       	cpc	r19, r25
    260a:	08 f4       	brcc	.+2      	; 0x260e <prvCopyDataToQueue+0xb2>
    260c:	50 c0       	rjmp	.+160    	; 0x26ae <prvCopyDataToQueue+0x152>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    260e:	eb 81       	ldd	r30, Y+3	; 0x03
    2610:	fc 81       	ldd	r31, Y+4	; 0x04
    2612:	80 81       	ld	r24, Z
    2614:	91 81       	ldd	r25, Z+1	; 0x01
    2616:	eb 81       	ldd	r30, Y+3	; 0x03
    2618:	fc 81       	ldd	r31, Y+4	; 0x04
    261a:	95 83       	std	Z+5, r25	; 0x05
    261c:	84 83       	std	Z+4, r24	; 0x04
    261e:	47 c0       	rjmp	.+142    	; 0x26ae <prvCopyDataToQueue+0x152>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2620:	eb 81       	ldd	r30, Y+3	; 0x03
    2622:	fc 81       	ldd	r31, Y+4	; 0x04
    2624:	66 81       	ldd	r22, Z+6	; 0x06
    2626:	77 81       	ldd	r23, Z+7	; 0x07
    2628:	eb 81       	ldd	r30, Y+3	; 0x03
    262a:	fc 81       	ldd	r31, Y+4	; 0x04
    262c:	84 8d       	ldd	r24, Z+28	; 0x1c
    262e:	48 2f       	mov	r20, r24
    2630:	50 e0       	ldi	r21, 0x00	; 0
    2632:	2d 81       	ldd	r18, Y+5	; 0x05
    2634:	3e 81       	ldd	r19, Y+6	; 0x06
    2636:	cb 01       	movw	r24, r22
    2638:	b9 01       	movw	r22, r18
    263a:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    263e:	eb 81       	ldd	r30, Y+3	; 0x03
    2640:	fc 81       	ldd	r31, Y+4	; 0x04
    2642:	26 81       	ldd	r18, Z+6	; 0x06
    2644:	37 81       	ldd	r19, Z+7	; 0x07
    2646:	eb 81       	ldd	r30, Y+3	; 0x03
    2648:	fc 81       	ldd	r31, Y+4	; 0x04
    264a:	84 8d       	ldd	r24, Z+28	; 0x1c
    264c:	88 2f       	mov	r24, r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	90 95       	com	r25
    2652:	81 95       	neg	r24
    2654:	9f 4f       	sbci	r25, 0xFF	; 255
    2656:	82 0f       	add	r24, r18
    2658:	93 1f       	adc	r25, r19
    265a:	eb 81       	ldd	r30, Y+3	; 0x03
    265c:	fc 81       	ldd	r31, Y+4	; 0x04
    265e:	97 83       	std	Z+7, r25	; 0x07
    2660:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    2662:	eb 81       	ldd	r30, Y+3	; 0x03
    2664:	fc 81       	ldd	r31, Y+4	; 0x04
    2666:	26 81       	ldd	r18, Z+6	; 0x06
    2668:	37 81       	ldd	r19, Z+7	; 0x07
    266a:	eb 81       	ldd	r30, Y+3	; 0x03
    266c:	fc 81       	ldd	r31, Y+4	; 0x04
    266e:	80 81       	ld	r24, Z
    2670:	91 81       	ldd	r25, Z+1	; 0x01
    2672:	28 17       	cp	r18, r24
    2674:	39 07       	cpc	r19, r25
    2676:	90 f4       	brcc	.+36     	; 0x269c <prvCopyDataToQueue+0x140>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    2678:	eb 81       	ldd	r30, Y+3	; 0x03
    267a:	fc 81       	ldd	r31, Y+4	; 0x04
    267c:	22 81       	ldd	r18, Z+2	; 0x02
    267e:	33 81       	ldd	r19, Z+3	; 0x03
    2680:	eb 81       	ldd	r30, Y+3	; 0x03
    2682:	fc 81       	ldd	r31, Y+4	; 0x04
    2684:	84 8d       	ldd	r24, Z+28	; 0x1c
    2686:	88 2f       	mov	r24, r24
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	90 95       	com	r25
    268c:	81 95       	neg	r24
    268e:	9f 4f       	sbci	r25, 0xFF	; 255
    2690:	82 0f       	add	r24, r18
    2692:	93 1f       	adc	r25, r19
    2694:	eb 81       	ldd	r30, Y+3	; 0x03
    2696:	fc 81       	ldd	r31, Y+4	; 0x04
    2698:	97 83       	std	Z+7, r25	; 0x07
    269a:	86 83       	std	Z+6, r24	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    269c:	8f 81       	ldd	r24, Y+7	; 0x07
    269e:	82 30       	cpi	r24, 0x02	; 2
    26a0:	31 f4       	brne	.+12     	; 0x26ae <prvCopyDataToQueue+0x152>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	88 23       	and	r24, r24
    26a6:	19 f0       	breq	.+6      	; 0x26ae <prvCopyDataToQueue+0x152>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	81 50       	subi	r24, 0x01	; 1
    26ac:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	8f 5f       	subi	r24, 0xFF	; 255
    26b2:	eb 81       	ldd	r30, Y+3	; 0x03
    26b4:	fc 81       	ldd	r31, Y+4	; 0x04
    26b6:	82 8f       	std	Z+26, r24	; 0x1a

	return xReturn;
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    26ba:	27 96       	adiw	r28, 0x07	; 7
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	00 d0       	rcall	.+0      	; 0x26d2 <prvCopyDataFromQueue+0x6>
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <prvCopyDataFromQueue+0x8>
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	9a 83       	std	Y+2, r25	; 0x02
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	7c 83       	std	Y+4, r23	; 0x04
    26de:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    26e0:	e9 81       	ldd	r30, Y+1	; 0x01
    26e2:	fa 81       	ldd	r31, Y+2	; 0x02
    26e4:	84 8d       	ldd	r24, Z+28	; 0x1c
    26e6:	88 23       	and	r24, r24
    26e8:	89 f1       	breq	.+98     	; 0x274c <prvCopyDataFromQueue+0x80>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    26ea:	e9 81       	ldd	r30, Y+1	; 0x01
    26ec:	fa 81       	ldd	r31, Y+2	; 0x02
    26ee:	26 81       	ldd	r18, Z+6	; 0x06
    26f0:	37 81       	ldd	r19, Z+7	; 0x07
    26f2:	e9 81       	ldd	r30, Y+1	; 0x01
    26f4:	fa 81       	ldd	r31, Y+2	; 0x02
    26f6:	84 8d       	ldd	r24, Z+28	; 0x1c
    26f8:	88 2f       	mov	r24, r24
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	82 0f       	add	r24, r18
    26fe:	93 1f       	adc	r25, r19
    2700:	e9 81       	ldd	r30, Y+1	; 0x01
    2702:	fa 81       	ldd	r31, Y+2	; 0x02
    2704:	97 83       	std	Z+7, r25	; 0x07
    2706:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    2708:	e9 81       	ldd	r30, Y+1	; 0x01
    270a:	fa 81       	ldd	r31, Y+2	; 0x02
    270c:	26 81       	ldd	r18, Z+6	; 0x06
    270e:	37 81       	ldd	r19, Z+7	; 0x07
    2710:	e9 81       	ldd	r30, Y+1	; 0x01
    2712:	fa 81       	ldd	r31, Y+2	; 0x02
    2714:	82 81       	ldd	r24, Z+2	; 0x02
    2716:	93 81       	ldd	r25, Z+3	; 0x03
    2718:	28 17       	cp	r18, r24
    271a:	39 07       	cpc	r19, r25
    271c:	40 f0       	brcs	.+16     	; 0x272e <prvCopyDataFromQueue+0x62>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    271e:	e9 81       	ldd	r30, Y+1	; 0x01
    2720:	fa 81       	ldd	r31, Y+2	; 0x02
    2722:	80 81       	ld	r24, Z
    2724:	91 81       	ldd	r25, Z+1	; 0x01
    2726:	e9 81       	ldd	r30, Y+1	; 0x01
    2728:	fa 81       	ldd	r31, Y+2	; 0x02
    272a:	97 83       	std	Z+7, r25	; 0x07
    272c:	86 83       	std	Z+6, r24	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    272e:	e9 81       	ldd	r30, Y+1	; 0x01
    2730:	fa 81       	ldd	r31, Y+2	; 0x02
    2732:	46 81       	ldd	r20, Z+6	; 0x06
    2734:	57 81       	ldd	r21, Z+7	; 0x07
    2736:	e9 81       	ldd	r30, Y+1	; 0x01
    2738:	fa 81       	ldd	r31, Y+2	; 0x02
    273a:	84 8d       	ldd	r24, Z+28	; 0x1c
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	8b 81       	ldd	r24, Y+3	; 0x03
    2742:	9c 81       	ldd	r25, Y+4	; 0x04
    2744:	ba 01       	movw	r22, r20
    2746:	a9 01       	movw	r20, r18
    2748:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <memcpy>
	}
}
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	cf 91       	pop	r28
    2756:	df 91       	pop	r29
    2758:	08 95       	ret

0000275a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    275a:	df 93       	push	r29
    275c:	cf 93       	push	r28
    275e:	00 d0       	rcall	.+0      	; 0x2760 <prvUnlockQueue+0x6>
    2760:	00 d0       	rcall	.+0      	; 0x2762 <prvUnlockQueue+0x8>
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	9c 83       	std	Y+4, r25	; 0x04
    2768:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    2770:	eb 81       	ldd	r30, Y+3	; 0x03
    2772:	fc 81       	ldd	r31, Y+4	; 0x04
    2774:	86 8d       	ldd	r24, Z+30	; 0x1e
    2776:	8a 83       	std	Y+2, r24	; 0x02
    2778:	11 c0       	rjmp	.+34     	; 0x279c <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    277a:	eb 81       	ldd	r30, Y+3	; 0x03
    277c:	fc 81       	ldd	r31, Y+4	; 0x04
    277e:	81 89       	ldd	r24, Z+17	; 0x11
    2780:	88 23       	and	r24, r24
    2782:	79 f0       	breq	.+30     	; 0x27a2 <prvUnlockQueue+0x48>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2784:	8b 81       	ldd	r24, Y+3	; 0x03
    2786:	9c 81       	ldd	r25, Y+4	; 0x04
    2788:	41 96       	adiw	r24, 0x11	; 17
    278a:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <xTaskRemoveFromEventList>
    278e:	88 23       	and	r24, r24
    2790:	11 f0       	breq	.+4      	; 0x2796 <prvUnlockQueue+0x3c>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    2792:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    2796:	8a 81       	ldd	r24, Y+2	; 0x02
    2798:	81 50       	subi	r24, 0x01	; 1
    279a:	8a 83       	std	Y+2, r24	; 0x02
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	18 16       	cp	r1, r24
    27a0:	64 f3       	brlt	.-40     	; 0x277a <prvUnlockQueue+0x20>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    27a2:	eb 81       	ldd	r30, Y+3	; 0x03
    27a4:	fc 81       	ldd	r31, Y+4	; 0x04
    27a6:	8f ef       	ldi	r24, 0xFF	; 255
    27a8:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    27aa:	0f 90       	pop	r0
    27ac:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    27b4:	eb 81       	ldd	r30, Y+3	; 0x03
    27b6:	fc 81       	ldd	r31, Y+4	; 0x04
    27b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    27ba:	89 83       	std	Y+1, r24	; 0x01
    27bc:	11 c0       	rjmp	.+34     	; 0x27e0 <prvUnlockQueue+0x86>

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    27be:	eb 81       	ldd	r30, Y+3	; 0x03
    27c0:	fc 81       	ldd	r31, Y+4	; 0x04
    27c2:	80 85       	ldd	r24, Z+8	; 0x08
    27c4:	88 23       	and	r24, r24
    27c6:	79 f0       	breq	.+30     	; 0x27e6 <prvUnlockQueue+0x8c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    27c8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ca:	9c 81       	ldd	r25, Y+4	; 0x04
    27cc:	08 96       	adiw	r24, 0x08	; 8
    27ce:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <xTaskRemoveFromEventList>
    27d2:	88 23       	and	r24, r24
    27d4:	11 f0       	breq	.+4      	; 0x27da <prvUnlockQueue+0x80>
				{
					vTaskMissedYield();
    27d6:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	81 50       	subi	r24, 0x01	; 1
    27de:	89 83       	std	Y+1, r24	; 0x01
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	18 16       	cp	r1, r24
    27e4:	64 f3       	brlt	.-40     	; 0x27be <prvUnlockQueue+0x64>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    27e6:	eb 81       	ldd	r30, Y+3	; 0x03
    27e8:	fc 81       	ldd	r31, Y+4	; 0x04
    27ea:	8f ef       	ldi	r24, 0xFF	; 255
    27ec:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    27ee:	0f 90       	pop	r0
    27f0:	0f be       	out	0x3f, r0	; 63
}
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	cf 91       	pop	r28
    27fc:	df 91       	pop	r29
    27fe:	08 95       	ret

00002800 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    2800:	df 93       	push	r29
    2802:	cf 93       	push	r28
    2804:	00 d0       	rcall	.+0      	; 0x2806 <prvIsQueueEmpty+0x6>
    2806:	0f 92       	push	r0
    2808:	cd b7       	in	r28, 0x3d	; 61
    280a:	de b7       	in	r29, 0x3e	; 62
    280c:	9b 83       	std	Y+3, r25	; 0x03
    280e:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    2816:	ea 81       	ldd	r30, Y+2	; 0x02
    2818:	fb 81       	ldd	r31, Y+3	; 0x03
    281a:	82 8d       	ldd	r24, Z+26	; 0x1a
    281c:	88 23       	and	r24, r24
    281e:	19 f4       	brne	.+6      	; 0x2826 <prvIsQueueEmpty+0x26>
		{
			xReturn = pdTRUE;
    2820:	81 e0       	ldi	r24, 0x01	; 1
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	01 c0       	rjmp	.+2      	; 0x2828 <prvIsQueueEmpty+0x28>
		}
		else
		{
			xReturn = pdFALSE;
    2826:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2828:	0f 90       	pop	r0
    282a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    282c:	89 81       	ldd	r24, Y+1	; 0x01
}
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
    283a:	df 93       	push	r29
    283c:	cf 93       	push	r28
    283e:	00 d0       	rcall	.+0      	; 0x2840 <xQueueIsQueueEmptyFromISR+0x6>
    2840:	0f 92       	push	r0
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	9b 83       	std	Y+3, r25	; 0x03
    2848:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
    284a:	ea 81       	ldd	r30, Y+2	; 0x02
    284c:	fb 81       	ldd	r31, Y+3	; 0x03
    284e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2850:	88 23       	and	r24, r24
    2852:	19 f4       	brne	.+6      	; 0x285a <xQueueIsQueueEmptyFromISR+0x20>
	{
		xReturn = pdTRUE;
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	89 83       	std	Y+1, r24	; 0x01
    2858:	01 c0       	rjmp	.+2      	; 0x285c <xQueueIsQueueEmptyFromISR+0x22>
	}
	else
	{
		xReturn = pdFALSE;
    285a:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    285c:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	00 d0       	rcall	.+0      	; 0x2870 <prvIsQueueFull+0x6>
    2870:	0f 92       	push	r0
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	9b 83       	std	Y+3, r25	; 0x03
    2878:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2880:	ea 81       	ldd	r30, Y+2	; 0x02
    2882:	fb 81       	ldd	r31, Y+3	; 0x03
    2884:	92 8d       	ldd	r25, Z+26	; 0x1a
    2886:	ea 81       	ldd	r30, Y+2	; 0x02
    2888:	fb 81       	ldd	r31, Y+3	; 0x03
    288a:	83 8d       	ldd	r24, Z+27	; 0x1b
    288c:	98 17       	cp	r25, r24
    288e:	19 f4       	brne	.+6      	; 0x2896 <prvIsQueueFull+0x2c>
		{
			xReturn = pdTRUE;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	89 83       	std	Y+1, r24	; 0x01
    2894:	01 c0       	rjmp	.+2      	; 0x2898 <prvIsQueueFull+0x2e>
		}
		else
		{
			xReturn = pdFALSE;
    2896:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2898:	0f 90       	pop	r0
    289a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    289c:	89 81       	ldd	r24, Y+1	; 0x01
}
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	0f 90       	pop	r0
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	00 d0       	rcall	.+0      	; 0x28b0 <xQueueIsQueueFullFromISR+0x6>
    28b0:	0f 92       	push	r0
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	9b 83       	std	Y+3, r25	; 0x03
    28b8:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	configASSERT( xQueue );
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
    28ba:	ea 81       	ldd	r30, Y+2	; 0x02
    28bc:	fb 81       	ldd	r31, Y+3	; 0x03
    28be:	92 8d       	ldd	r25, Z+26	; 0x1a
    28c0:	ea 81       	ldd	r30, Y+2	; 0x02
    28c2:	fb 81       	ldd	r31, Y+3	; 0x03
    28c4:	83 8d       	ldd	r24, Z+27	; 0x1b
    28c6:	98 17       	cp	r25, r24
    28c8:	19 f4       	brne	.+6      	; 0x28d0 <xQueueIsQueueFullFromISR+0x26>
	{
		xReturn = pdTRUE;
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	89 83       	std	Y+1, r24	; 0x01
    28ce:	01 c0       	rjmp	.+2      	; 0x28d2 <xQueueIsQueueFullFromISR+0x28>
	}
	else
	{
		xReturn = pdFALSE;
    28d0:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <xQueueCRSend>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait )
	{
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	cd b7       	in	r28, 0x3d	; 61
    28e6:	de b7       	in	r29, 0x3e	; 62
    28e8:	2a 97       	sbiw	r28, 0x0a	; 10
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	de bf       	out	0x3e, r29	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	cd bf       	out	0x3d, r28	; 61
    28f4:	9d 83       	std	Y+5, r25	; 0x05
    28f6:	8c 83       	std	Y+4, r24	; 0x04
    28f8:	7f 83       	std	Y+7, r23	; 0x07
    28fa:	6e 83       	std	Y+6, r22	; 0x06
    28fc:	59 87       	std	Y+9, r21	; 0x09
    28fe:	48 87       	std	Y+8, r20	; 0x08
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2900:	8c 81       	ldd	r24, Y+4	; 0x04
    2902:	9d 81       	ldd	r25, Y+5	; 0x05
    2904:	9a 83       	std	Y+2, r25	; 0x02
    2906:	89 83       	std	Y+1, r24	; 0x01

		/* If the queue is already full we may have to block.  A critical section
		is required to prevent an interrupt removing something from the queue
		between the check to see if the queue is full and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    2908:	f8 94       	cli
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    290a:	89 81       	ldd	r24, Y+1	; 0x01
    290c:	9a 81       	ldd	r25, Y+2	; 0x02
    290e:	0e 94 35 14 	call	0x286a	; 0x286a <prvIsQueueFull>
    2912:	88 23       	and	r24, r24
    2914:	a9 f0       	breq	.+42     	; 0x2940 <xQueueCRSend+0x60>
			{
				/* The queue is full - do we want to block or just leave without
				posting? */
				if( xTicksToWait > ( TickType_t ) 0 )
    2916:	88 85       	ldd	r24, Y+8	; 0x08
    2918:	99 85       	ldd	r25, Y+9	; 0x09
    291a:	00 97       	sbiw	r24, 0x00	; 0
    291c:	71 f0       	breq	.+28     	; 0x293a <xQueueCRSend+0x5a>
				{
					/* As this is called from a coroutine we cannot block directly, but
					return indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	9a 81       	ldd	r25, Y+2	; 0x02
    2922:	9c 01       	movw	r18, r24
    2924:	28 5f       	subi	r18, 0xF8	; 248
    2926:	3f 4f       	sbci	r19, 0xFF	; 255
    2928:	88 85       	ldd	r24, Y+8	; 0x08
    292a:	99 85       	ldd	r25, Y+9	; 0x09
    292c:	b9 01       	movw	r22, r18
    292e:	0e 94 37 06 	call	0xc6e	; 0xc6e <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    2932:	78 94       	sei
					return errQUEUE_BLOCKED;
    2934:	8c ef       	ldi	r24, 0xFC	; 252
    2936:	8a 87       	std	Y+10, r24	; 0x0a
    2938:	2a c0       	rjmp	.+84     	; 0x298e <xQueueCRSend+0xae>
				}
				else
				{
					portENABLE_INTERRUPTS();
    293a:	78 94       	sei
					return errQUEUE_FULL;
    293c:	1a 86       	std	Y+10, r1	; 0x0a
    293e:	27 c0       	rjmp	.+78     	; 0x298e <xQueueCRSend+0xae>
				}
			}
		}
		portENABLE_INTERRUPTS();
    2940:	78 94       	sei

		portDISABLE_INTERRUPTS();
    2942:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2944:	e9 81       	ldd	r30, Y+1	; 0x01
    2946:	fa 81       	ldd	r31, Y+2	; 0x02
    2948:	92 8d       	ldd	r25, Z+26	; 0x1a
    294a:	e9 81       	ldd	r30, Y+1	; 0x01
    294c:	fa 81       	ldd	r31, Y+2	; 0x02
    294e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2950:	98 17       	cp	r25, r24
    2952:	c8 f4       	brcc	.+50     	; 0x2986 <xQueueCRSend+0xa6>
			{
				/* There is room in the queue, copy the data into the queue. */
				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	9a 81       	ldd	r25, Y+2	; 0x02
    2958:	2e 81       	ldd	r18, Y+6	; 0x06
    295a:	3f 81       	ldd	r19, Y+7	; 0x07
    295c:	b9 01       	movw	r22, r18
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	0e 94 ae 12 	call	0x255c	; 0x255c <prvCopyDataToQueue>
				xReturn = pdPASS;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	8b 83       	std	Y+3, r24	; 0x03

				/* Were any co-routines waiting for data to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2968:	e9 81       	ldd	r30, Y+1	; 0x01
    296a:	fa 81       	ldd	r31, Y+2	; 0x02
    296c:	81 89       	ldd	r24, Z+17	; 0x11
    296e:	88 23       	and	r24, r24
    2970:	59 f0       	breq	.+22     	; 0x2988 <xQueueCRSend+0xa8>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2972:	89 81       	ldd	r24, Y+1	; 0x01
    2974:	9a 81       	ldd	r25, Y+2	; 0x02
    2976:	41 96       	adiw	r24, 0x11	; 17
    2978:	0e 94 4a 08 	call	0x1094	; 0x1094 <xCoRoutineRemoveFromEventList>
    297c:	88 23       	and	r24, r24
    297e:	21 f0       	breq	.+8      	; 0x2988 <xQueueCRSend+0xa8>
					{
						/* The co-routine waiting has a higher priority so record
						that a yield might be appropriate. */
						xReturn = errQUEUE_YIELD;
    2980:	8b ef       	ldi	r24, 0xFB	; 251
    2982:	8b 83       	std	Y+3, r24	; 0x03
    2984:	01 c0       	rjmp	.+2      	; 0x2988 <xQueueCRSend+0xa8>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				xReturn = errQUEUE_FULL;
    2986:	1b 82       	std	Y+3, r1	; 0x03
			}
		}
		portENABLE_INTERRUPTS();
    2988:	78 94       	sei

		return xReturn;
    298a:	8b 81       	ldd	r24, Y+3	; 0x03
    298c:	8a 87       	std	Y+10, r24	; 0x0a
    298e:	8a 85       	ldd	r24, Y+10	; 0x0a
	}
    2990:	2a 96       	adiw	r28, 0x0a	; 10
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <xQueueCRReceive>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
	{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    29aa:	2a 97       	sbiw	r28, 0x0a	; 10
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	9d 83       	std	Y+5, r25	; 0x05
    29b8:	8c 83       	std	Y+4, r24	; 0x04
    29ba:	7f 83       	std	Y+7, r23	; 0x07
    29bc:	6e 83       	std	Y+6, r22	; 0x06
    29be:	59 87       	std	Y+9, r21	; 0x09
    29c0:	48 87       	std	Y+8, r20	; 0x08
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    29c2:	8c 81       	ldd	r24, Y+4	; 0x04
    29c4:	9d 81       	ldd	r25, Y+5	; 0x05
    29c6:	9a 83       	std	Y+2, r25	; 0x02
    29c8:	89 83       	std	Y+1, r24	; 0x01

		/* If the queue is already empty we may have to block.  A critical section
		is required to prevent an interrupt adding something to the queue
		between the check to see if the queue is empty and blocking on the queue. */
		portDISABLE_INTERRUPTS();
    29ca:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
    29cc:	e9 81       	ldd	r30, Y+1	; 0x01
    29ce:	fa 81       	ldd	r31, Y+2	; 0x02
    29d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    29d2:	88 23       	and	r24, r24
    29d4:	a9 f4       	brne	.+42     	; 0x2a00 <xQueueCRReceive+0x5e>
			{
				/* There are no messages in the queue, do we want to block or just
				leave with nothing? */
				if( xTicksToWait > ( TickType_t ) 0 )
    29d6:	88 85       	ldd	r24, Y+8	; 0x08
    29d8:	99 85       	ldd	r25, Y+9	; 0x09
    29da:	00 97       	sbiw	r24, 0x00	; 0
    29dc:	71 f0       	breq	.+28     	; 0x29fa <xQueueCRReceive+0x58>
				{
					/* As this is a co-routine we cannot block directly, but return
					indicating that we need to block. */
					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
    29de:	89 81       	ldd	r24, Y+1	; 0x01
    29e0:	9a 81       	ldd	r25, Y+2	; 0x02
    29e2:	9c 01       	movw	r18, r24
    29e4:	2f 5e       	subi	r18, 0xEF	; 239
    29e6:	3f 4f       	sbci	r19, 0xFF	; 255
    29e8:	88 85       	ldd	r24, Y+8	; 0x08
    29ea:	99 85       	ldd	r25, Y+9	; 0x09
    29ec:	b9 01       	movw	r22, r18
    29ee:	0e 94 37 06 	call	0xc6e	; 0xc6e <vCoRoutineAddToDelayedList>
					portENABLE_INTERRUPTS();
    29f2:	78 94       	sei
					return errQUEUE_BLOCKED;
    29f4:	8c ef       	ldi	r24, 0xFC	; 252
    29f6:	8a 87       	std	Y+10, r24	; 0x0a
    29f8:	58 c0       	rjmp	.+176    	; 0x2aaa <xQueueCRReceive+0x108>
				}
				else
				{
					portENABLE_INTERRUPTS();
    29fa:	78 94       	sei
					return errQUEUE_FULL;
    29fc:	1a 86       	std	Y+10, r1	; 0x0a
    29fe:	55 c0       	rjmp	.+170    	; 0x2aaa <xQueueCRReceive+0x108>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portENABLE_INTERRUPTS();
    2a00:	78 94       	sei

		portDISABLE_INTERRUPTS();
    2a02:	f8 94       	cli
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2a04:	e9 81       	ldd	r30, Y+1	; 0x01
    2a06:	fa 81       	ldd	r31, Y+2	; 0x02
    2a08:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a0a:	88 23       	and	r24, r24
    2a0c:	09 f4       	brne	.+2      	; 0x2a10 <xQueueCRReceive+0x6e>
    2a0e:	49 c0       	rjmp	.+146    	; 0x2aa2 <xQueueCRReceive+0x100>
			{
				/* Data is available from the queue. */
				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2a10:	e9 81       	ldd	r30, Y+1	; 0x01
    2a12:	fa 81       	ldd	r31, Y+2	; 0x02
    2a14:	26 81       	ldd	r18, Z+6	; 0x06
    2a16:	37 81       	ldd	r19, Z+7	; 0x07
    2a18:	e9 81       	ldd	r30, Y+1	; 0x01
    2a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a1c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a1e:	88 2f       	mov	r24, r24
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	82 0f       	add	r24, r18
    2a24:	93 1f       	adc	r25, r19
    2a26:	e9 81       	ldd	r30, Y+1	; 0x01
    2a28:	fa 81       	ldd	r31, Y+2	; 0x02
    2a2a:	97 83       	std	Z+7, r25	; 0x07
    2a2c:	86 83       	std	Z+6, r24	; 0x06
				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
    2a2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a30:	fa 81       	ldd	r31, Y+2	; 0x02
    2a32:	26 81       	ldd	r18, Z+6	; 0x06
    2a34:	37 81       	ldd	r19, Z+7	; 0x07
    2a36:	e9 81       	ldd	r30, Y+1	; 0x01
    2a38:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3a:	82 81       	ldd	r24, Z+2	; 0x02
    2a3c:	93 81       	ldd	r25, Z+3	; 0x03
    2a3e:	28 17       	cp	r18, r24
    2a40:	39 07       	cpc	r19, r25
    2a42:	40 f0       	brcs	.+16     	; 0x2a54 <xQueueCRReceive+0xb2>
				{
					pxQueue->u.pcReadFrom = pxQueue->pcHead;
    2a44:	e9 81       	ldd	r30, Y+1	; 0x01
    2a46:	fa 81       	ldd	r31, Y+2	; 0x02
    2a48:	80 81       	ld	r24, Z
    2a4a:	91 81       	ldd	r25, Z+1	; 0x01
    2a4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a50:	97 83       	std	Z+7, r25	; 0x07
    2a52:	86 83       	std	Z+6, r24	; 0x06
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				--( pxQueue->uxMessagesWaiting );
    2a54:	e9 81       	ldd	r30, Y+1	; 0x01
    2a56:	fa 81       	ldd	r31, Y+2	; 0x02
    2a58:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a5a:	81 50       	subi	r24, 0x01	; 1
    2a5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a60:	82 8f       	std	Z+26, r24	; 0x1a
				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    2a62:	e9 81       	ldd	r30, Y+1	; 0x01
    2a64:	fa 81       	ldd	r31, Y+2	; 0x02
    2a66:	46 81       	ldd	r20, Z+6	; 0x06
    2a68:	57 81       	ldd	r21, Z+7	; 0x07
    2a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a70:	28 2f       	mov	r18, r24
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	8e 81       	ldd	r24, Y+6	; 0x06
    2a76:	9f 81       	ldd	r25, Y+7	; 0x07
    2a78:	ba 01       	movw	r22, r20
    2a7a:	a9 01       	movw	r20, r18
    2a7c:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <memcpy>

				xReturn = pdPASS;
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	8b 83       	std	Y+3, r24	; 0x03

				/* Were any co-routines waiting for space to become available? */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2a84:	e9 81       	ldd	r30, Y+1	; 0x01
    2a86:	fa 81       	ldd	r31, Y+2	; 0x02
    2a88:	80 85       	ldd	r24, Z+8	; 0x08
    2a8a:	88 23       	and	r24, r24
    2a8c:	59 f0       	breq	.+22     	; 0x2aa4 <xQueueCRReceive+0x102>
				{
					/* In this instance the co-routine could be placed directly
					into the ready list as we are within a critical section.
					Instead the same pending ready list mechanism is used as if
					the event were caused from within an interrupt. */
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2a8e:	89 81       	ldd	r24, Y+1	; 0x01
    2a90:	9a 81       	ldd	r25, Y+2	; 0x02
    2a92:	08 96       	adiw	r24, 0x08	; 8
    2a94:	0e 94 4a 08 	call	0x1094	; 0x1094 <xCoRoutineRemoveFromEventList>
    2a98:	88 23       	and	r24, r24
    2a9a:	21 f0       	breq	.+8      	; 0x2aa4 <xQueueCRReceive+0x102>
					{
						xReturn = errQUEUE_YIELD;
    2a9c:	8b ef       	ldi	r24, 0xFB	; 251
    2a9e:	8b 83       	std	Y+3, r24	; 0x03
    2aa0:	01 c0       	rjmp	.+2      	; 0x2aa4 <xQueueCRReceive+0x102>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				xReturn = pdFAIL;
    2aa2:	1b 82       	std	Y+3, r1	; 0x03
			}
		}
		portENABLE_INTERRUPTS();
    2aa4:	78 94       	sei

		return xReturn;
    2aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa8:	8a 87       	std	Y+10, r24	; 0x0a
    2aaa:	8a 85       	ldd	r24, Y+10	; 0x0a
	}
    2aac:	2a 96       	adiw	r28, 0x0a	; 10
    2aae:	0f b6       	in	r0, 0x3f	; 63
    2ab0:	f8 94       	cli
    2ab2:	de bf       	out	0x3e, r29	; 62
    2ab4:	0f be       	out	0x3f, r0	; 63
    2ab6:	cd bf       	out	0x3d, r28	; 61
    2ab8:	cf 91       	pop	r28
    2aba:	df 91       	pop	r29
    2abc:	08 95       	ret

00002abe <xQueueCRSendFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRoutinePreviouslyWoken )
	{
    2abe:	df 93       	push	r29
    2ac0:	cf 93       	push	r28
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	28 97       	sbiw	r28, 0x08	; 8
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	9c 83       	std	Y+4, r25	; 0x04
    2ad4:	8b 83       	std	Y+3, r24	; 0x03
    2ad6:	7e 83       	std	Y+6, r23	; 0x06
    2ad8:	6d 83       	std	Y+5, r22	; 0x05
    2ada:	4f 83       	std	Y+7, r20	; 0x07
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2adc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ade:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	89 83       	std	Y+1, r24	; 0x01

		/* Cannot block within an ISR so if there is no space on the queue then
		exit without doing anything. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2ae4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ae6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ae8:	92 8d       	ldd	r25, Z+26	; 0x1a
    2aea:	e9 81       	ldd	r30, Y+1	; 0x01
    2aec:	fa 81       	ldd	r31, Y+2	; 0x02
    2aee:	83 8d       	ldd	r24, Z+27	; 0x1b
    2af0:	98 17       	cp	r25, r24
    2af2:	d0 f4       	brcc	.+52     	; 0x2b28 <xQueueCRSendFromISR+0x6a>
		{
			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
    2af4:	89 81       	ldd	r24, Y+1	; 0x01
    2af6:	9a 81       	ldd	r25, Y+2	; 0x02
    2af8:	2d 81       	ldd	r18, Y+5	; 0x05
    2afa:	3e 81       	ldd	r19, Y+6	; 0x06
    2afc:	b9 01       	movw	r22, r18
    2afe:	40 e0       	ldi	r20, 0x00	; 0
    2b00:	0e 94 ae 12 	call	0x255c	; 0x255c <prvCopyDataToQueue>

			/* We only want to wake one co-routine per ISR, so check that a
			co-routine has not already been woken. */
			if( xCoRoutinePreviouslyWoken == pdFALSE )
    2b04:	8f 81       	ldd	r24, Y+7	; 0x07
    2b06:	88 23       	and	r24, r24
    2b08:	79 f4       	brne	.+30     	; 0x2b28 <xQueueCRSendFromISR+0x6a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2b0a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b0c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b0e:	81 89       	ldd	r24, Z+17	; 0x11
    2b10:	88 23       	and	r24, r24
    2b12:	51 f0       	breq	.+20     	; 0x2b28 <xQueueCRSendFromISR+0x6a>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	9a 81       	ldd	r25, Y+2	; 0x02
    2b18:	41 96       	adiw	r24, 0x11	; 17
    2b1a:	0e 94 4a 08 	call	0x1094	; 0x1094 <xCoRoutineRemoveFromEventList>
    2b1e:	88 23       	and	r24, r24
    2b20:	19 f0       	breq	.+6      	; 0x2b28 <xQueueCRSendFromISR+0x6a>
					{
						return pdTRUE;
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	88 87       	std	Y+8, r24	; 0x08
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <xQueueCRSendFromISR+0x6e>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xCoRoutinePreviouslyWoken;
    2b28:	8f 81       	ldd	r24, Y+7	; 0x07
    2b2a:	88 87       	std	Y+8, r24	; 0x08
    2b2c:	88 85       	ldd	r24, Y+8	; 0x08
	}
    2b2e:	28 96       	adiw	r28, 0x08	; 8
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	de bf       	out	0x3e, r29	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	cd bf       	out	0x3d, r28	; 61
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	08 95       	ret

00002b40 <xQueueCRReceiveFromISR>:
/*-----------------------------------------------------------*/

#if ( configUSE_CO_ROUTINES == 1 )

	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWoken )
	{
    2b40:	df 93       	push	r29
    2b42:	cf 93       	push	r28
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
    2b48:	29 97       	sbiw	r28, 0x09	; 9
    2b4a:	0f b6       	in	r0, 0x3f	; 63
    2b4c:	f8 94       	cli
    2b4e:	de bf       	out	0x3e, r29	; 62
    2b50:	0f be       	out	0x3f, r0	; 63
    2b52:	cd bf       	out	0x3d, r28	; 61
    2b54:	9d 83       	std	Y+5, r25	; 0x05
    2b56:	8c 83       	std	Y+4, r24	; 0x04
    2b58:	7f 83       	std	Y+7, r23	; 0x07
    2b5a:	6e 83       	std	Y+6, r22	; 0x06
    2b5c:	59 87       	std	Y+9, r21	; 0x09
    2b5e:	48 87       	std	Y+8, r20	; 0x08
	BaseType_t xReturn;
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
    2b60:	8c 81       	ldd	r24, Y+4	; 0x04
    2b62:	9d 81       	ldd	r25, Y+5	; 0x05
    2b64:	9a 83       	std	Y+2, r25	; 0x02
    2b66:	89 83       	std	Y+1, r24	; 0x01

		/* We cannot block from an ISR, so check there is data available. If
		not then just leave without doing anything. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
    2b68:	e9 81       	ldd	r30, Y+1	; 0x01
    2b6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b6c:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b6e:	88 23       	and	r24, r24
    2b70:	09 f4       	brne	.+2      	; 0x2b74 <xQueueCRReceiveFromISR+0x34>
    2b72:	50 c0       	rjmp	.+160    	; 0x2c14 <xQueueCRReceiveFromISR+0xd4>
		{
			/* Copy the data from the queue. */
			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    2b74:	e9 81       	ldd	r30, Y+1	; 0x01
    2b76:	fa 81       	ldd	r31, Y+2	; 0x02
    2b78:	26 81       	ldd	r18, Z+6	; 0x06
    2b7a:	37 81       	ldd	r19, Z+7	; 0x07
    2b7c:	e9 81       	ldd	r30, Y+1	; 0x01
    2b7e:	fa 81       	ldd	r31, Y+2	; 0x02
    2b80:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b82:	88 2f       	mov	r24, r24
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	82 0f       	add	r24, r18
    2b88:	93 1f       	adc	r25, r19
    2b8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b8e:	97 83       	std	Z+7, r25	; 0x07
    2b90:	86 83       	std	Z+6, r24	; 0x06
			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
    2b92:	e9 81       	ldd	r30, Y+1	; 0x01
    2b94:	fa 81       	ldd	r31, Y+2	; 0x02
    2b96:	26 81       	ldd	r18, Z+6	; 0x06
    2b98:	37 81       	ldd	r19, Z+7	; 0x07
    2b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b9e:	82 81       	ldd	r24, Z+2	; 0x02
    2ba0:	93 81       	ldd	r25, Z+3	; 0x03
    2ba2:	28 17       	cp	r18, r24
    2ba4:	39 07       	cpc	r19, r25
    2ba6:	40 f0       	brcs	.+16     	; 0x2bb8 <xQueueCRReceiveFromISR+0x78>
			{
				pxQueue->u.pcReadFrom = pxQueue->pcHead;
    2ba8:	e9 81       	ldd	r30, Y+1	; 0x01
    2baa:	fa 81       	ldd	r31, Y+2	; 0x02
    2bac:	80 81       	ld	r24, Z
    2bae:	91 81       	ldd	r25, Z+1	; 0x01
    2bb0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bb2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bb4:	97 83       	std	Z+7, r25	; 0x07
    2bb6:	86 83       	std	Z+6, r24	; 0x06
			}
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
			--( pxQueue->uxMessagesWaiting );
    2bb8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bba:	fa 81       	ldd	r31, Y+2	; 0x02
    2bbc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bbe:	81 50       	subi	r24, 0x01	; 1
    2bc0:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc2:	fa 81       	ldd	r31, Y+2	; 0x02
    2bc4:	82 8f       	std	Z+26, r24	; 0x1a
			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    2bc6:	e9 81       	ldd	r30, Y+1	; 0x01
    2bc8:	fa 81       	ldd	r31, Y+2	; 0x02
    2bca:	46 81       	ldd	r20, Z+6	; 0x06
    2bcc:	57 81       	ldd	r21, Z+7	; 0x07
    2bce:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd2:	84 8d       	ldd	r24, Z+28	; 0x1c
    2bd4:	28 2f       	mov	r18, r24
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bda:	9f 81       	ldd	r25, Y+7	; 0x07
    2bdc:	ba 01       	movw	r22, r20
    2bde:	a9 01       	movw	r20, r18
    2be0:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <memcpy>

			if( ( *pxCoRoutineWoken ) == pdFALSE )
    2be4:	e8 85       	ldd	r30, Y+8	; 0x08
    2be6:	f9 85       	ldd	r31, Y+9	; 0x09
    2be8:	80 81       	ld	r24, Z
    2bea:	88 23       	and	r24, r24
    2bec:	81 f4       	brne	.+32     	; 0x2c0e <xQueueCRReceiveFromISR+0xce>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2bee:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf0:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf2:	80 85       	ldd	r24, Z+8	; 0x08
    2bf4:	88 23       	and	r24, r24
    2bf6:	59 f0       	breq	.+22     	; 0x2c0e <xQueueCRReceiveFromISR+0xce>
				{
					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfc:	08 96       	adiw	r24, 0x08	; 8
    2bfe:	0e 94 4a 08 	call	0x1094	; 0x1094 <xCoRoutineRemoveFromEventList>
    2c02:	88 23       	and	r24, r24
    2c04:	21 f0       	breq	.+8      	; 0x2c0e <xQueueCRReceiveFromISR+0xce>
					{
						*pxCoRoutineWoken = pdTRUE;
    2c06:	e8 85       	ldd	r30, Y+8	; 0x08
    2c08:	f9 85       	ldd	r31, Y+9	; 0x09
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	80 83       	st	Z, r24
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	8b 83       	std	Y+3, r24	; 0x03
    2c12:	01 c0       	rjmp	.+2      	; 0x2c16 <xQueueCRReceiveFromISR+0xd6>
		}
		else
		{
			xReturn = pdFAIL;
    2c14:	1b 82       	std	Y+3, r1	; 0x03
		}

		return xReturn;
    2c16:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    2c18:	29 96       	adiw	r28, 0x09	; 9
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	cf 91       	pop	r28
    2c26:	df 91       	pop	r29
    2c28:	08 95       	ret

00002c2a <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
    2c2a:	8f 92       	push	r8
    2c2c:	9f 92       	push	r9
    2c2e:	af 92       	push	r10
    2c30:	bf 92       	push	r11
    2c32:	cf 92       	push	r12
    2c34:	df 92       	push	r13
    2c36:	ef 92       	push	r14
    2c38:	ff 92       	push	r15
    2c3a:	0f 93       	push	r16
    2c3c:	1f 93       	push	r17
    2c3e:	df 93       	push	r29
    2c40:	cf 93       	push	r28
    2c42:	cd b7       	in	r28, 0x3d	; 61
    2c44:	de b7       	in	r29, 0x3e	; 62
    2c46:	60 97       	sbiw	r28, 0x10	; 16
    2c48:	0f b6       	in	r0, 0x3f	; 63
    2c4a:	f8 94       	cli
    2c4c:	de bf       	out	0x3e, r29	; 62
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	cd bf       	out	0x3d, r28	; 61
    2c52:	9f 83       	std	Y+7, r25	; 0x07
    2c54:	8e 83       	std	Y+6, r24	; 0x06
    2c56:	79 87       	std	Y+9, r23	; 0x09
    2c58:	68 87       	std	Y+8, r22	; 0x08
    2c5a:	5b 87       	std	Y+11, r21	; 0x0b
    2c5c:	4a 87       	std	Y+10, r20	; 0x0a
    2c5e:	3d 87       	std	Y+13, r19	; 0x0d
    2c60:	2c 87       	std	Y+12, r18	; 0x0c
    2c62:	0e 87       	std	Y+14, r16	; 0x0e
    2c64:	f8 8a       	std	Y+16, r15	; 0x10
    2c66:	ef 86       	std	Y+15, r14	; 0x0f
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2c68:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c6c:	0e 94 82 08 	call	0x1104	; 0x1104 <pvPortMalloc>
    2c70:	9a 83       	std	Y+2, r25	; 0x02
    2c72:	89 83       	std	Y+1, r24	; 0x01

			if( pxStack != NULL )
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	9a 81       	ldd	r25, Y+2	; 0x02
    2c78:	00 97       	sbiw	r24, 0x00	; 0
    2c7a:	b1 f0       	breq	.+44     	; 0x2ca8 <xTaskCreate+0x7e>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
    2c7c:	88 e2       	ldi	r24, 0x28	; 40
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 82 08 	call	0x1104	; 0x1104 <pvPortMalloc>
    2c84:	9d 83       	std	Y+5, r25	; 0x05
    2c86:	8c 83       	std	Y+4, r24	; 0x04

				if( pxNewTCB != NULL )
    2c88:	8c 81       	ldd	r24, Y+4	; 0x04
    2c8a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	39 f0       	breq	.+14     	; 0x2c9e <xTaskCreate+0x74>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
    2c90:	ec 81       	ldd	r30, Y+4	; 0x04
    2c92:	fd 81       	ldd	r31, Y+5	; 0x05
    2c94:	89 81       	ldd	r24, Y+1	; 0x01
    2c96:	9a 81       	ldd	r25, Y+2	; 0x02
    2c98:	90 8f       	std	Z+24, r25	; 0x18
    2c9a:	87 8b       	std	Z+23, r24	; 0x17
    2c9c:	07 c0       	rjmp	.+14     	; 0x2cac <xTaskCreate+0x82>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <vPortFree>
    2ca6:	02 c0       	rjmp	.+4      	; 0x2cac <xTaskCreate+0x82>
				}
			}
			else
			{
				pxNewTCB = NULL;
    2ca8:	1d 82       	std	Y+5, r1	; 0x05
    2caa:	1c 82       	std	Y+4, r1	; 0x04
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
    2cac:	8c 81       	ldd	r24, Y+4	; 0x04
    2cae:	9d 81       	ldd	r25, Y+5	; 0x05
    2cb0:	00 97       	sbiw	r24, 0x00	; 0
    2cb2:	e9 f0       	breq	.+58     	; 0x2cee <xTaskCreate+0xc4>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
    2cb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cb8:	9c 01       	movw	r18, r24
    2cba:	40 e0       	ldi	r20, 0x00	; 0
    2cbc:	50 e0       	ldi	r21, 0x00	; 0
    2cbe:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc0:	9f 81       	ldd	r25, Y+7	; 0x07
    2cc2:	68 85       	ldd	r22, Y+8	; 0x08
    2cc4:	79 85       	ldd	r23, Y+9	; 0x09
    2cc6:	ec 85       	ldd	r30, Y+12	; 0x0c
    2cc8:	fd 85       	ldd	r31, Y+13	; 0x0d
    2cca:	af 85       	ldd	r26, Y+15	; 0x0f
    2ccc:	b8 89       	ldd	r27, Y+16	; 0x10
    2cce:	ac 80       	ldd	r10, Y+4	; 0x04
    2cd0:	bd 80       	ldd	r11, Y+5	; 0x05
    2cd2:	8f 01       	movw	r16, r30
    2cd4:	ee 84       	ldd	r14, Y+14	; 0x0e
    2cd6:	6d 01       	movw	r12, r26
    2cd8:	88 24       	eor	r8, r8
    2cda:	99 24       	eor	r9, r9
    2cdc:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
    2ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce4:	0e 94 48 17 	call	0x2e90	; 0x2e90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	8b 83       	std	Y+3, r24	; 0x03
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <xTaskCreate+0xc8>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    2cee:	8f ef       	ldi	r24, 0xFF	; 255
    2cf0:	8b 83       	std	Y+3, r24	; 0x03
		}

		return xReturn;
    2cf2:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    2cf4:	60 96       	adiw	r28, 0x10	; 16
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	1f 91       	pop	r17
    2d06:	0f 91       	pop	r16
    2d08:	ff 90       	pop	r15
    2d0a:	ef 90       	pop	r14
    2d0c:	df 90       	pop	r13
    2d0e:	cf 90       	pop	r12
    2d10:	bf 90       	pop	r11
    2d12:	af 90       	pop	r10
    2d14:	9f 90       	pop	r9
    2d16:	8f 90       	pop	r8
    2d18:	08 95       	ret

00002d1a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    2d1a:	8f 92       	push	r8
    2d1c:	9f 92       	push	r9
    2d1e:	af 92       	push	r10
    2d20:	bf 92       	push	r11
    2d22:	cf 92       	push	r12
    2d24:	df 92       	push	r13
    2d26:	ef 92       	push	r14
    2d28:	0f 93       	push	r16
    2d2a:	1f 93       	push	r17
    2d2c:	df 93       	push	r29
    2d2e:	cf 93       	push	r28
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	64 97       	sbiw	r28, 0x14	; 20
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	f8 94       	cli
    2d3a:	de bf       	out	0x3e, r29	; 62
    2d3c:	0f be       	out	0x3f, r0	; 63
    2d3e:	cd bf       	out	0x3d, r28	; 61
    2d40:	9d 83       	std	Y+5, r25	; 0x05
    2d42:	8c 83       	std	Y+4, r24	; 0x04
    2d44:	7f 83       	std	Y+7, r23	; 0x07
    2d46:	6e 83       	std	Y+6, r22	; 0x06
    2d48:	28 87       	std	Y+8, r18	; 0x08
    2d4a:	39 87       	std	Y+9, r19	; 0x09
    2d4c:	4a 87       	std	Y+10, r20	; 0x0a
    2d4e:	5b 87       	std	Y+11, r21	; 0x0b
    2d50:	1d 87       	std	Y+13, r17	; 0x0d
    2d52:	0c 87       	std	Y+12, r16	; 0x0c
    2d54:	ee 86       	std	Y+14, r14	; 0x0e
    2d56:	d8 8a       	std	Y+16, r13	; 0x10
    2d58:	cf 86       	std	Y+15, r12	; 0x0f
    2d5a:	ba 8a       	std	Y+18, r11	; 0x12
    2d5c:	a9 8a       	std	Y+17, r10	; 0x11
    2d5e:	9c 8a       	std	Y+20, r9	; 0x14
    2d60:	8b 8a       	std	Y+19, r8	; 0x13
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    2d62:	e9 89       	ldd	r30, Y+17	; 0x11
    2d64:	fa 89       	ldd	r31, Y+18	; 0x12
    2d66:	27 89       	ldd	r18, Z+23	; 0x17
    2d68:	30 8d       	ldd	r19, Z+24	; 0x18
    2d6a:	88 85       	ldd	r24, Y+8	; 0x08
    2d6c:	99 85       	ldd	r25, Y+9	; 0x09
    2d6e:	01 97       	sbiw	r24, 0x01	; 1
    2d70:	82 0f       	add	r24, r18
    2d72:	93 1f       	adc	r25, r19
    2d74:	9b 83       	std	Y+3, r25	; 0x03
    2d76:	8a 83       	std	Y+2, r24	; 0x02
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2d78:	19 82       	std	Y+1, r1	; 0x01
    2d7a:	21 c0       	rjmp	.+66     	; 0x2dbe <prvInitialiseNewTask+0xa4>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	48 2f       	mov	r20, r24
    2d80:	50 e0       	ldi	r21, 0x00	; 0
    2d82:	89 81       	ldd	r24, Y+1	; 0x01
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	8e 81       	ldd	r24, Y+6	; 0x06
    2d8a:	9f 81       	ldd	r25, Y+7	; 0x07
    2d8c:	fc 01       	movw	r30, r24
    2d8e:	e2 0f       	add	r30, r18
    2d90:	f3 1f       	adc	r31, r19
    2d92:	20 81       	ld	r18, Z
    2d94:	89 89       	ldd	r24, Y+17	; 0x11
    2d96:	9a 89       	ldd	r25, Y+18	; 0x12
    2d98:	84 0f       	add	r24, r20
    2d9a:	95 1f       	adc	r25, r21
    2d9c:	fc 01       	movw	r30, r24
    2d9e:	79 96       	adiw	r30, 0x19	; 25
    2da0:	20 83       	st	Z, r18

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	8e 81       	ldd	r24, Y+6	; 0x06
    2daa:	9f 81       	ldd	r25, Y+7	; 0x07
    2dac:	fc 01       	movw	r30, r24
    2dae:	e2 0f       	add	r30, r18
    2db0:	f3 1f       	adc	r31, r19
    2db2:	80 81       	ld	r24, Z
    2db4:	88 23       	and	r24, r24
    2db6:	31 f0       	breq	.+12     	; 0x2dc4 <prvInitialiseNewTask+0xaa>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	8f 5f       	subi	r24, 0xFF	; 255
    2dbc:	89 83       	std	Y+1, r24	; 0x01
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	88 30       	cpi	r24, 0x08	; 8
    2dc2:	e0 f2       	brcs	.-72     	; 0x2d7c <prvInitialiseNewTask+0x62>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
    2dc4:	e9 89       	ldd	r30, Y+17	; 0x11
    2dc6:	fa 89       	ldd	r31, Y+18	; 0x12
    2dc8:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    2dca:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dcc:	87 30       	cpi	r24, 0x07	; 7
    2dce:	10 f0       	brcs	.+4      	; 0x2dd4 <prvInitialiseNewTask+0xba>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    2dd0:	86 e0       	ldi	r24, 0x06	; 6
    2dd2:	8e 87       	std	Y+14, r24	; 0x0e
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
    2dd4:	e9 89       	ldd	r30, Y+17	; 0x11
    2dd6:	fa 89       	ldd	r31, Y+18	; 0x12
    2dd8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dda:	86 8b       	std	Z+22, r24	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
    2ddc:	e9 89       	ldd	r30, Y+17	; 0x11
    2dde:	fa 89       	ldd	r31, Y+18	; 0x12
    2de0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2de2:	81 a3       	std	Z+33, r24	; 0x21
		pxNewTCB->uxMutexesHeld = 0;
    2de4:	e9 89       	ldd	r30, Y+17	; 0x11
    2de6:	fa 89       	ldd	r31, Y+18	; 0x12
    2de8:	12 a2       	std	Z+34, r1	; 0x22
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
    2dea:	89 89       	ldd	r24, Y+17	; 0x11
    2dec:	9a 89       	ldd	r25, Y+18	; 0x12
    2dee:	02 96       	adiw	r24, 0x02	; 2
    2df0:	0e 94 48 0a 	call	0x1490	; 0x1490 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
    2df4:	89 89       	ldd	r24, Y+17	; 0x11
    2df6:	9a 89       	ldd	r25, Y+18	; 0x12
    2df8:	0c 96       	adiw	r24, 0x0c	; 12
    2dfa:	0e 94 48 0a 	call	0x1490	; 0x1490 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
    2dfe:	e9 89       	ldd	r30, Y+17	; 0x11
    2e00:	fa 89       	ldd	r31, Y+18	; 0x12
    2e02:	89 89       	ldd	r24, Y+17	; 0x11
    2e04:	9a 89       	ldd	r25, Y+18	; 0x12
    2e06:	91 87       	std	Z+9, r25	; 0x09
    2e08:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    2e0a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e0c:	28 2f       	mov	r18, r24
    2e0e:	30 e0       	ldi	r19, 0x00	; 0
    2e10:	87 e0       	ldi	r24, 0x07	; 7
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	82 1b       	sub	r24, r18
    2e16:	93 0b       	sbc	r25, r19
    2e18:	e9 89       	ldd	r30, Y+17	; 0x11
    2e1a:	fa 89       	ldd	r31, Y+18	; 0x12
    2e1c:	95 87       	std	Z+13, r25	; 0x0d
    2e1e:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
    2e20:	e9 89       	ldd	r30, Y+17	; 0x11
    2e22:	fa 89       	ldd	r31, Y+18	; 0x12
    2e24:	89 89       	ldd	r24, Y+17	; 0x11
    2e26:	9a 89       	ldd	r25, Y+18	; 0x12
    2e28:	93 8b       	std	Z+19, r25	; 0x13
    2e2a:	82 8b       	std	Z+18, r24	; 0x12
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
    2e2c:	e9 89       	ldd	r30, Y+17	; 0x11
    2e2e:	fa 89       	ldd	r31, Y+18	; 0x12
    2e30:	13 a2       	std	Z+35, r1	; 0x23
    2e32:	14 a2       	std	Z+36, r1	; 0x24
    2e34:	15 a2       	std	Z+37, r1	; 0x25
    2e36:	16 a2       	std	Z+38, r1	; 0x26
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    2e38:	e9 89       	ldd	r30, Y+17	; 0x11
    2e3a:	fa 89       	ldd	r31, Y+18	; 0x12
    2e3c:	17 a2       	std	Z+39, r1	; 0x27
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	9b 81       	ldd	r25, Y+3	; 0x03
    2e42:	2c 81       	ldd	r18, Y+4	; 0x04
    2e44:	3d 81       	ldd	r19, Y+5	; 0x05
    2e46:	4c 85       	ldd	r20, Y+12	; 0x0c
    2e48:	5d 85       	ldd	r21, Y+13	; 0x0d
    2e4a:	b9 01       	movw	r22, r18
    2e4c:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <pxPortInitialiseStack>
    2e50:	e9 89       	ldd	r30, Y+17	; 0x11
    2e52:	fa 89       	ldd	r31, Y+18	; 0x12
    2e54:	91 83       	std	Z+1, r25	; 0x01
    2e56:	80 83       	st	Z, r24
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
    2e58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e5a:	98 89       	ldd	r25, Y+16	; 0x10
    2e5c:	00 97       	sbiw	r24, 0x00	; 0
    2e5e:	31 f0       	breq	.+12     	; 0x2e6c <prvInitialiseNewTask+0x152>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
    2e60:	ef 85       	ldd	r30, Y+15	; 0x0f
    2e62:	f8 89       	ldd	r31, Y+16	; 0x10
    2e64:	89 89       	ldd	r24, Y+17	; 0x11
    2e66:	9a 89       	ldd	r25, Y+18	; 0x12
    2e68:	91 83       	std	Z+1, r25	; 0x01
    2e6a:	80 83       	st	Z, r24
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    2e6c:	64 96       	adiw	r28, 0x14	; 20
    2e6e:	0f b6       	in	r0, 0x3f	; 63
    2e70:	f8 94       	cli
    2e72:	de bf       	out	0x3e, r29	; 62
    2e74:	0f be       	out	0x3f, r0	; 63
    2e76:	cd bf       	out	0x3d, r28	; 61
    2e78:	cf 91       	pop	r28
    2e7a:	df 91       	pop	r29
    2e7c:	1f 91       	pop	r17
    2e7e:	0f 91       	pop	r16
    2e80:	ef 90       	pop	r14
    2e82:	df 90       	pop	r13
    2e84:	cf 90       	pop	r12
    2e86:	bf 90       	pop	r11
    2e88:	af 90       	pop	r10
    2e8a:	9f 90       	pop	r9
    2e8c:	8f 90       	pop	r8
    2e8e:	08 95       	ret

00002e90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
    2e90:	df 93       	push	r29
    2e92:	cf 93       	push	r28
    2e94:	00 d0       	rcall	.+0      	; 0x2e96 <prvAddNewTaskToReadyList+0x6>
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	9a 83       	std	Y+2, r25	; 0x02
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	0f 92       	push	r0
	{
		uxCurrentNumberOfTasks++;
    2ea4:	80 91 b6 04 	lds	r24, 0x04B6
    2ea8:	8f 5f       	subi	r24, 0xFF	; 255
    2eaa:	80 93 b6 04 	sts	0x04B6, r24
		if( pxCurrentTCB == NULL )
    2eae:	80 91 b3 04 	lds	r24, 0x04B3
    2eb2:	90 91 b4 04 	lds	r25, 0x04B4
    2eb6:	00 97       	sbiw	r24, 0x00	; 0
    2eb8:	69 f4       	brne	.+26     	; 0x2ed4 <prvAddNewTaskToReadyList+0x44>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ebe:	90 93 b4 04 	sts	0x04B4, r25
    2ec2:	80 93 b3 04 	sts	0x04B3, r24

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
    2ec6:	80 91 b6 04 	lds	r24, 0x04B6
    2eca:	81 30       	cpi	r24, 0x01	; 1
    2ecc:	b9 f4       	brne	.+46     	; 0x2efc <prvAddNewTaskToReadyList+0x6c>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
    2ece:	0e 94 3d 1f 	call	0x3e7a	; 0x3e7a <prvInitialiseTaskLists>
    2ed2:	14 c0       	rjmp	.+40     	; 0x2efc <prvAddNewTaskToReadyList+0x6c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
    2ed4:	80 91 ba 04 	lds	r24, 0x04BA
    2ed8:	88 23       	and	r24, r24
    2eda:	81 f4       	brne	.+32     	; 0x2efc <prvAddNewTaskToReadyList+0x6c>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
    2edc:	e0 91 b3 04 	lds	r30, 0x04B3
    2ee0:	f0 91 b4 04 	lds	r31, 0x04B4
    2ee4:	96 89       	ldd	r25, Z+22	; 0x16
    2ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eea:	86 89       	ldd	r24, Z+22	; 0x16
    2eec:	89 17       	cp	r24, r25
    2eee:	30 f0       	brcs	.+12     	; 0x2efc <prvAddNewTaskToReadyList+0x6c>
				{
					pxCurrentTCB = pxNewTCB;
    2ef0:	89 81       	ldd	r24, Y+1	; 0x01
    2ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef4:	90 93 b4 04 	sts	0x04B4, r25
    2ef8:	80 93 b3 04 	sts	0x04B3, r24
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
    2efc:	80 91 be 04 	lds	r24, 0x04BE
    2f00:	8f 5f       	subi	r24, 0xFF	; 255
    2f02:	80 93 be 04 	sts	0x04BE, r24
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
    2f06:	e9 81       	ldd	r30, Y+1	; 0x01
    2f08:	fa 81       	ldd	r31, Y+2	; 0x02
    2f0a:	96 89       	ldd	r25, Z+22	; 0x16
    2f0c:	80 91 b9 04 	lds	r24, 0x04B9
    2f10:	89 17       	cp	r24, r25
    2f12:	28 f4       	brcc	.+10     	; 0x2f1e <prvAddNewTaskToReadyList+0x8e>
    2f14:	e9 81       	ldd	r30, Y+1	; 0x01
    2f16:	fa 81       	ldd	r31, Y+2	; 0x02
    2f18:	86 89       	ldd	r24, Z+22	; 0x16
    2f1a:	80 93 b9 04 	sts	0x04B9, r24
    2f1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f20:	fa 81       	ldd	r31, Y+2	; 0x02
    2f22:	86 89       	ldd	r24, Z+22	; 0x16
    2f24:	28 2f       	mov	r18, r24
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	c9 01       	movw	r24, r18
    2f2a:	88 0f       	add	r24, r24
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	88 0f       	add	r24, r24
    2f30:	99 1f       	adc	r25, r25
    2f32:	88 0f       	add	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	82 0f       	add	r24, r18
    2f38:	93 1f       	adc	r25, r19
    2f3a:	ac 01       	movw	r20, r24
    2f3c:	4c 53       	subi	r20, 0x3C	; 60
    2f3e:	5b 4f       	sbci	r21, 0xFB	; 251
    2f40:	89 81       	ldd	r24, Y+1	; 0x01
    2f42:	9a 81       	ldd	r25, Y+2	; 0x02
    2f44:	9c 01       	movw	r18, r24
    2f46:	2e 5f       	subi	r18, 0xFE	; 254
    2f48:	3f 4f       	sbci	r19, 0xFF	; 255
    2f4a:	ca 01       	movw	r24, r20
    2f4c:	b9 01       	movw	r22, r18
    2f4e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
    2f52:	0f 90       	pop	r0
    2f54:	0f be       	out	0x3f, r0	; 63

	if( xSchedulerRunning != pdFALSE )
    2f56:	80 91 ba 04 	lds	r24, 0x04BA
    2f5a:	88 23       	and	r24, r24
    2f5c:	61 f0       	breq	.+24     	; 0x2f76 <prvAddNewTaskToReadyList+0xe6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
    2f5e:	e0 91 b3 04 	lds	r30, 0x04B3
    2f62:	f0 91 b4 04 	lds	r31, 0x04B4
    2f66:	96 89       	ldd	r25, Z+22	; 0x16
    2f68:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6c:	86 89       	ldd	r24, Z+22	; 0x16
    2f6e:	98 17       	cp	r25, r24
    2f70:	10 f4       	brcc	.+4      	; 0x2f76 <prvAddNewTaskToReadyList+0xe6>
		{
			taskYIELD_IF_USING_PREEMPTION();
    2f72:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
    2f76:	0f 90       	pop	r0
    2f78:	0f 90       	pop	r0
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	08 95       	ret

00002f80 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
    2f80:	df 93       	push	r29
    2f82:	cf 93       	push	r28
    2f84:	00 d0       	rcall	.+0      	; 0x2f86 <vTaskDelete+0x6>
    2f86:	00 d0       	rcall	.+0      	; 0x2f88 <vTaskDelete+0x8>
    2f88:	00 d0       	rcall	.+0      	; 0x2f8a <vTaskDelete+0xa>
    2f8a:	cd b7       	in	r28, 0x3d	; 61
    2f8c:	de b7       	in	r29, 0x3e	; 62
    2f8e:	9c 83       	std	Y+4, r25	; 0x04
    2f90:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
    2f98:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f9c:	00 97       	sbiw	r24, 0x00	; 0
    2f9e:	39 f4       	brne	.+14     	; 0x2fae <vTaskDelete+0x2e>
    2fa0:	80 91 b3 04 	lds	r24, 0x04B3
    2fa4:	90 91 b4 04 	lds	r25, 0x04B4
    2fa8:	9e 83       	std	Y+6, r25	; 0x06
    2faa:	8d 83       	std	Y+5, r24	; 0x05
    2fac:	04 c0       	rjmp	.+8      	; 0x2fb6 <vTaskDelete+0x36>
    2fae:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb2:	9e 83       	std	Y+6, r25	; 0x06
    2fb4:	8d 83       	std	Y+5, r24	; 0x05
    2fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fba:	9a 83       	std	Y+2, r25	; 0x02
    2fbc:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2fbe:	89 81       	ldd	r24, Y+1	; 0x01
    2fc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fc2:	02 96       	adiw	r24, 0x02	; 2
    2fc4:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    2fc8:	e9 81       	ldd	r30, Y+1	; 0x01
    2fca:	fa 81       	ldd	r31, Y+2	; 0x02
    2fcc:	84 89       	ldd	r24, Z+20	; 0x14
    2fce:	95 89       	ldd	r25, Z+21	; 0x15
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	29 f0       	breq	.+10     	; 0x2fde <vTaskDelete+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    2fd4:	89 81       	ldd	r24, Y+1	; 0x01
    2fd6:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd8:	0c 96       	adiw	r24, 0x0c	; 12
    2fda:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
    2fde:	80 91 be 04 	lds	r24, 0x04BE
    2fe2:	8f 5f       	subi	r24, 0xFF	; 255
    2fe4:	80 93 be 04 	sts	0x04BE, r24

			if( pxTCB == pxCurrentTCB )
    2fe8:	20 91 b3 04 	lds	r18, 0x04B3
    2fec:	30 91 b4 04 	lds	r19, 0x04B4
    2ff0:	89 81       	ldd	r24, Y+1	; 0x01
    2ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ff4:	82 17       	cp	r24, r18
    2ff6:	93 07       	cpc	r25, r19
    2ff8:	81 f4       	brne	.+32     	; 0x301a <vTaskDelete+0x9a>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffe:	9c 01       	movw	r18, r24
    3000:	2e 5f       	subi	r18, 0xFE	; 254
    3002:	3f 4f       	sbci	r19, 0xFF	; 255
    3004:	82 e2       	ldi	r24, 0x22	; 34
    3006:	95 e0       	ldi	r25, 0x05	; 5
    3008:	b9 01       	movw	r22, r18
    300a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
    300e:	80 91 b5 04 	lds	r24, 0x04B5
    3012:	8f 5f       	subi	r24, 0xFF	; 255
    3014:	80 93 b5 04 	sts	0x04B5, r24
    3018:	0b c0       	rjmp	.+22     	; 0x3030 <vTaskDelete+0xb0>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
    301a:	80 91 b6 04 	lds	r24, 0x04B6
    301e:	81 50       	subi	r24, 0x01	; 1
    3020:	80 93 b6 04 	sts	0x04B6, r24
				prvDeleteTCB( pxTCB );
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	9a 81       	ldd	r25, Y+2	; 0x02
    3028:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
    302c:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    3030:	0f 90       	pop	r0
    3032:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
    3034:	80 91 ba 04 	lds	r24, 0x04BA
    3038:	88 23       	and	r24, r24
    303a:	59 f0       	breq	.+22     	; 0x3052 <vTaskDelete+0xd2>
		{
			if( pxTCB == pxCurrentTCB )
    303c:	20 91 b3 04 	lds	r18, 0x04B3
    3040:	30 91 b4 04 	lds	r19, 0x04B4
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	9a 81       	ldd	r25, Y+2	; 0x02
    3048:	82 17       	cp	r24, r18
    304a:	93 07       	cpc	r25, r19
    304c:	11 f4       	brne	.+4      	; 0x3052 <vTaskDelete+0xd2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    304e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
    3052:	26 96       	adiw	r28, 0x06	; 6
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	f8 94       	cli
    3058:	de bf       	out	0x3e, r29	; 62
    305a:	0f be       	out	0x3f, r0	; 63
    305c:	cd bf       	out	0x3d, r28	; 61
    305e:	cf 91       	pop	r28
    3060:	df 91       	pop	r29
    3062:	08 95       	ret

00003064 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
    3064:	df 93       	push	r29
    3066:	cf 93       	push	r28
    3068:	cd b7       	in	r28, 0x3d	; 61
    306a:	de b7       	in	r29, 0x3e	; 62
    306c:	2a 97       	sbiw	r28, 0x0a	; 10
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	98 87       	std	Y+8, r25	; 0x08
    307a:	8f 83       	std	Y+7, r24	; 0x07
    307c:	7a 87       	std	Y+10, r23	; 0x0a
    307e:	69 87       	std	Y+9, r22	; 0x09
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
    3080:	1b 82       	std	Y+3, r1	; 0x03

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );
		configASSERT( uxSchedulerSuspended == 0 );

		vTaskSuspendAll();
    3082:	0e 94 33 1b 	call	0x3666	; 0x3666 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
    3086:	80 91 b7 04 	lds	r24, 0x04B7
    308a:	90 91 b8 04 	lds	r25, 0x04B8
    308e:	9a 83       	std	Y+2, r25	; 0x02
    3090:	89 83       	std	Y+1, r24	; 0x01

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    3092:	ef 81       	ldd	r30, Y+7	; 0x07
    3094:	f8 85       	ldd	r31, Y+8	; 0x08
    3096:	20 81       	ld	r18, Z
    3098:	31 81       	ldd	r19, Z+1	; 0x01
    309a:	89 85       	ldd	r24, Y+9	; 0x09
    309c:	9a 85       	ldd	r25, Y+10	; 0x0a
    309e:	82 0f       	add	r24, r18
    30a0:	93 1f       	adc	r25, r19
    30a2:	9e 83       	std	Y+6, r25	; 0x06
    30a4:	8d 83       	std	Y+5, r24	; 0x05

			if( xConstTickCount < *pxPreviousWakeTime )
    30a6:	ef 81       	ldd	r30, Y+7	; 0x07
    30a8:	f8 85       	ldd	r31, Y+8	; 0x08
    30aa:	20 81       	ld	r18, Z
    30ac:	31 81       	ldd	r19, Z+1	; 0x01
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	9a 81       	ldd	r25, Y+2	; 0x02
    30b2:	82 17       	cp	r24, r18
    30b4:	93 07       	cpc	r25, r19
    30b6:	98 f4       	brcc	.+38     	; 0x30de <vTaskDelayUntil+0x7a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
    30b8:	ef 81       	ldd	r30, Y+7	; 0x07
    30ba:	f8 85       	ldd	r31, Y+8	; 0x08
    30bc:	20 81       	ld	r18, Z
    30be:	31 81       	ldd	r19, Z+1	; 0x01
    30c0:	8d 81       	ldd	r24, Y+5	; 0x05
    30c2:	9e 81       	ldd	r25, Y+6	; 0x06
    30c4:	82 17       	cp	r24, r18
    30c6:	93 07       	cpc	r25, r19
    30c8:	e0 f4       	brcc	.+56     	; 0x3102 <vTaskDelayUntil+0x9e>
    30ca:	2d 81       	ldd	r18, Y+5	; 0x05
    30cc:	3e 81       	ldd	r19, Y+6	; 0x06
    30ce:	89 81       	ldd	r24, Y+1	; 0x01
    30d0:	9a 81       	ldd	r25, Y+2	; 0x02
    30d2:	82 17       	cp	r24, r18
    30d4:	93 07       	cpc	r25, r19
    30d6:	a8 f4       	brcc	.+42     	; 0x3102 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	8b 83       	std	Y+3, r24	; 0x03
    30dc:	12 c0       	rjmp	.+36     	; 0x3102 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
    30de:	ef 81       	ldd	r30, Y+7	; 0x07
    30e0:	f8 85       	ldd	r31, Y+8	; 0x08
    30e2:	20 81       	ld	r18, Z
    30e4:	31 81       	ldd	r19, Z+1	; 0x01
    30e6:	8d 81       	ldd	r24, Y+5	; 0x05
    30e8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ea:	82 17       	cp	r24, r18
    30ec:	93 07       	cpc	r25, r19
    30ee:	38 f0       	brcs	.+14     	; 0x30fe <vTaskDelayUntil+0x9a>
    30f0:	2d 81       	ldd	r18, Y+5	; 0x05
    30f2:	3e 81       	ldd	r19, Y+6	; 0x06
    30f4:	89 81       	ldd	r24, Y+1	; 0x01
    30f6:	9a 81       	ldd	r25, Y+2	; 0x02
    30f8:	82 17       	cp	r24, r18
    30fa:	93 07       	cpc	r25, r19
    30fc:	10 f4       	brcc	.+4      	; 0x3102 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	8b 83       	std	Y+3, r24	; 0x03
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3102:	ef 81       	ldd	r30, Y+7	; 0x07
    3104:	f8 85       	ldd	r31, Y+8	; 0x08
    3106:	8d 81       	ldd	r24, Y+5	; 0x05
    3108:	9e 81       	ldd	r25, Y+6	; 0x06
    310a:	91 83       	std	Z+1, r25	; 0x01
    310c:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    310e:	8b 81       	ldd	r24, Y+3	; 0x03
    3110:	88 23       	and	r24, r24
    3112:	49 f0       	breq	.+18     	; 0x3126 <vTaskDelayUntil+0xc2>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
    3114:	8d 81       	ldd	r24, Y+5	; 0x05
    3116:	9e 81       	ldd	r25, Y+6	; 0x06
    3118:	29 81       	ldd	r18, Y+1	; 0x01
    311a:	3a 81       	ldd	r19, Y+2	; 0x02
    311c:	82 1b       	sub	r24, r18
    311e:	93 0b       	sbc	r25, r19
    3120:	60 e0       	ldi	r22, 0x00	; 0
    3122:	0e 94 f6 24 	call	0x49ec	; 0x49ec <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    3126:	0e 94 3f 1b 	call	0x367e	; 0x367e <xTaskResumeAll>
    312a:	8c 83       	std	Y+4, r24	; 0x04

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    312c:	8c 81       	ldd	r24, Y+4	; 0x04
    312e:	88 23       	and	r24, r24
    3130:	11 f4       	brne	.+4      	; 0x3136 <vTaskDelayUntil+0xd2>
		{
			portYIELD_WITHIN_API();
    3132:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3136:	2a 96       	adiw	r28, 0x0a	; 10
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	de bf       	out	0x3e, r29	; 62
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	cd bf       	out	0x3d, r28	; 61
    3142:	cf 91       	pop	r28
    3144:	df 91       	pop	r29
    3146:	08 95       	ret

00003148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    3148:	df 93       	push	r29
    314a:	cf 93       	push	r28
    314c:	00 d0       	rcall	.+0      	; 0x314e <vTaskDelay+0x6>
    314e:	0f 92       	push	r0
    3150:	cd b7       	in	r28, 0x3d	; 61
    3152:	de b7       	in	r29, 0x3e	; 62
    3154:	9b 83       	std	Y+3, r25	; 0x03
    3156:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xAlreadyYielded = pdFALSE;
    3158:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    315a:	8a 81       	ldd	r24, Y+2	; 0x02
    315c:	9b 81       	ldd	r25, Y+3	; 0x03
    315e:	00 97       	sbiw	r24, 0x00	; 0
    3160:	51 f0       	breq	.+20     	; 0x3176 <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    3162:	0e 94 33 1b 	call	0x3666	; 0x3666 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
    3166:	8a 81       	ldd	r24, Y+2	; 0x02
    3168:	9b 81       	ldd	r25, Y+3	; 0x03
    316a:	60 e0       	ldi	r22, 0x00	; 0
    316c:	0e 94 f6 24 	call	0x49ec	; 0x49ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    3170:	0e 94 3f 1b 	call	0x367e	; 0x367e <xTaskResumeAll>
    3174:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	88 23       	and	r24, r24
    317a:	11 f4       	brne	.+4      	; 0x3180 <vTaskDelay+0x38>
		{
			portYIELD_WITHIN_API();
    317c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3180:	0f 90       	pop	r0
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	cf 91       	pop	r28
    3188:	df 91       	pop	r29
    318a:	08 95       	ret

0000318c <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
    318c:	df 93       	push	r29
    318e:	cf 93       	push	r28
    3190:	cd b7       	in	r28, 0x3d	; 61
    3192:	de b7       	in	r29, 0x3e	; 62
    3194:	2a 97       	sbiw	r28, 0x0a	; 10
    3196:	0f b6       	in	r0, 0x3f	; 63
    3198:	f8 94       	cli
    319a:	de bf       	out	0x3e, r29	; 62
    319c:	0f be       	out	0x3f, r0	; 63
    319e:	cd bf       	out	0x3d, r28	; 61
    31a0:	9f 83       	std	Y+7, r25	; 0x07
    31a2:	8e 83       	std	Y+6, r24	; 0x06
    31a4:	68 87       	std	Y+8, r22	; 0x08
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
    31a6:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
    31a8:	88 85       	ldd	r24, Y+8	; 0x08
    31aa:	87 30       	cpi	r24, 0x07	; 7
    31ac:	10 f0       	brcs	.+4      	; 0x31b2 <vTaskPrioritySet+0x26>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
    31ae:	86 e0       	ldi	r24, 0x06	; 6
    31b0:	88 87       	std	Y+8, r24	; 0x08
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
    31b8:	8e 81       	ldd	r24, Y+6	; 0x06
    31ba:	9f 81       	ldd	r25, Y+7	; 0x07
    31bc:	00 97       	sbiw	r24, 0x00	; 0
    31be:	39 f4       	brne	.+14     	; 0x31ce <vTaskPrioritySet+0x42>
    31c0:	80 91 b3 04 	lds	r24, 0x04B3
    31c4:	90 91 b4 04 	lds	r25, 0x04B4
    31c8:	9a 87       	std	Y+10, r25	; 0x0a
    31ca:	89 87       	std	Y+9, r24	; 0x09
    31cc:	04 c0       	rjmp	.+8      	; 0x31d6 <vTaskPrioritySet+0x4a>
    31ce:	8e 81       	ldd	r24, Y+6	; 0x06
    31d0:	9f 81       	ldd	r25, Y+7	; 0x07
    31d2:	9a 87       	std	Y+10, r25	; 0x0a
    31d4:	89 87       	std	Y+9, r24	; 0x09
    31d6:	89 85       	ldd	r24, Y+9	; 0x09
    31d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    31da:	9d 83       	std	Y+5, r25	; 0x05
    31dc:	8c 83       	std	Y+4, r24	; 0x04

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
    31de:	ec 81       	ldd	r30, Y+4	; 0x04
    31e0:	fd 81       	ldd	r31, Y+5	; 0x05
    31e2:	81 a1       	ldd	r24, Z+33	; 0x21
    31e4:	8b 83       	std	Y+3, r24	; 0x03
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
    31e6:	9b 81       	ldd	r25, Y+3	; 0x03
    31e8:	88 85       	ldd	r24, Y+8	; 0x08
    31ea:	98 17       	cp	r25, r24
    31ec:	09 f4       	brne	.+2      	; 0x31f0 <vTaskPrioritySet+0x64>
    31ee:	8d c0       	rjmp	.+282    	; 0x330a <vTaskPrioritySet+0x17e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
    31f0:	98 85       	ldd	r25, Y+8	; 0x08
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	89 17       	cp	r24, r25
    31f6:	a0 f4       	brcc	.+40     	; 0x3220 <vTaskPrioritySet+0x94>
				{
					if( pxTCB != pxCurrentTCB )
    31f8:	20 91 b3 04 	lds	r18, 0x04B3
    31fc:	30 91 b4 04 	lds	r19, 0x04B4
    3200:	8c 81       	ldd	r24, Y+4	; 0x04
    3202:	9d 81       	ldd	r25, Y+5	; 0x05
    3204:	82 17       	cp	r24, r18
    3206:	93 07       	cpc	r25, r19
    3208:	b1 f0       	breq	.+44     	; 0x3236 <vTaskPrioritySet+0xaa>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
    320a:	e0 91 b3 04 	lds	r30, 0x04B3
    320e:	f0 91 b4 04 	lds	r31, 0x04B4
    3212:	96 89       	ldd	r25, Z+22	; 0x16
    3214:	88 85       	ldd	r24, Y+8	; 0x08
    3216:	89 17       	cp	r24, r25
    3218:	70 f0       	brcs	.+28     	; 0x3236 <vTaskPrioritySet+0xaa>
						{
							xYieldRequired = pdTRUE;
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	89 83       	std	Y+1, r24	; 0x01
    321e:	0b c0       	rjmp	.+22     	; 0x3236 <vTaskPrioritySet+0xaa>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
    3220:	20 91 b3 04 	lds	r18, 0x04B3
    3224:	30 91 b4 04 	lds	r19, 0x04B4
    3228:	8c 81       	ldd	r24, Y+4	; 0x04
    322a:	9d 81       	ldd	r25, Y+5	; 0x05
    322c:	82 17       	cp	r24, r18
    322e:	93 07       	cpc	r25, r19
    3230:	11 f4       	brne	.+4      	; 0x3236 <vTaskPrioritySet+0xaa>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	89 83       	std	Y+1, r24	; 0x01
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
    3236:	ec 81       	ldd	r30, Y+4	; 0x04
    3238:	fd 81       	ldd	r31, Y+5	; 0x05
    323a:	86 89       	ldd	r24, Z+22	; 0x16
    323c:	8a 83       	std	Y+2, r24	; 0x02

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    323e:	ec 81       	ldd	r30, Y+4	; 0x04
    3240:	fd 81       	ldd	r31, Y+5	; 0x05
    3242:	91 a1       	ldd	r25, Z+33	; 0x21
    3244:	ec 81       	ldd	r30, Y+4	; 0x04
    3246:	fd 81       	ldd	r31, Y+5	; 0x05
    3248:	86 89       	ldd	r24, Z+22	; 0x16
    324a:	98 17       	cp	r25, r24
    324c:	21 f4       	brne	.+8      	; 0x3256 <vTaskPrioritySet+0xca>
					{
						pxTCB->uxPriority = uxNewPriority;
    324e:	ec 81       	ldd	r30, Y+4	; 0x04
    3250:	fd 81       	ldd	r31, Y+5	; 0x05
    3252:	88 85       	ldd	r24, Y+8	; 0x08
    3254:	86 8b       	std	Z+22, r24	; 0x16
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    3256:	ec 81       	ldd	r30, Y+4	; 0x04
    3258:	fd 81       	ldd	r31, Y+5	; 0x05
    325a:	88 85       	ldd	r24, Y+8	; 0x08
    325c:	81 a3       	std	Z+33, r24	; 0x21
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    325e:	ec 81       	ldd	r30, Y+4	; 0x04
    3260:	fd 81       	ldd	r31, Y+5	; 0x05
    3262:	84 85       	ldd	r24, Z+12	; 0x0c
    3264:	95 85       	ldd	r25, Z+13	; 0x0d
    3266:	99 23       	and	r25, r25
    3268:	5c f0       	brlt	.+22     	; 0x3280 <vTaskPrioritySet+0xf4>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    326a:	88 85       	ldd	r24, Y+8	; 0x08
    326c:	28 2f       	mov	r18, r24
    326e:	30 e0       	ldi	r19, 0x00	; 0
    3270:	87 e0       	ldi	r24, 0x07	; 7
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	82 1b       	sub	r24, r18
    3276:	93 0b       	sbc	r25, r19
    3278:	ec 81       	ldd	r30, Y+4	; 0x04
    327a:	fd 81       	ldd	r31, Y+5	; 0x05
    327c:	95 87       	std	Z+13, r25	; 0x0d
    327e:	84 87       	std	Z+12, r24	; 0x0c

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    3280:	ec 81       	ldd	r30, Y+4	; 0x04
    3282:	fd 81       	ldd	r31, Y+5	; 0x05
    3284:	42 85       	ldd	r20, Z+10	; 0x0a
    3286:	53 85       	ldd	r21, Z+11	; 0x0b
    3288:	8a 81       	ldd	r24, Y+2	; 0x02
    328a:	28 2f       	mov	r18, r24
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	c9 01       	movw	r24, r18
    3290:	88 0f       	add	r24, r24
    3292:	99 1f       	adc	r25, r25
    3294:	88 0f       	add	r24, r24
    3296:	99 1f       	adc	r25, r25
    3298:	88 0f       	add	r24, r24
    329a:	99 1f       	adc	r25, r25
    329c:	82 0f       	add	r24, r18
    329e:	93 1f       	adc	r25, r19
    32a0:	8c 53       	subi	r24, 0x3C	; 60
    32a2:	9b 4f       	sbci	r25, 0xFB	; 251
    32a4:	48 17       	cp	r20, r24
    32a6:	59 07       	cpc	r21, r25
    32a8:	59 f5       	brne	.+86     	; 0x3300 <vTaskPrioritySet+0x174>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    32aa:	8c 81       	ldd	r24, Y+4	; 0x04
    32ac:	9d 81       	ldd	r25, Y+5	; 0x05
    32ae:	02 96       	adiw	r24, 0x02	; 2
    32b0:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
    32b4:	ec 81       	ldd	r30, Y+4	; 0x04
    32b6:	fd 81       	ldd	r31, Y+5	; 0x05
    32b8:	96 89       	ldd	r25, Z+22	; 0x16
    32ba:	80 91 b9 04 	lds	r24, 0x04B9
    32be:	89 17       	cp	r24, r25
    32c0:	28 f4       	brcc	.+10     	; 0x32cc <vTaskPrioritySet+0x140>
    32c2:	ec 81       	ldd	r30, Y+4	; 0x04
    32c4:	fd 81       	ldd	r31, Y+5	; 0x05
    32c6:	86 89       	ldd	r24, Z+22	; 0x16
    32c8:	80 93 b9 04 	sts	0x04B9, r24
    32cc:	ec 81       	ldd	r30, Y+4	; 0x04
    32ce:	fd 81       	ldd	r31, Y+5	; 0x05
    32d0:	86 89       	ldd	r24, Z+22	; 0x16
    32d2:	28 2f       	mov	r18, r24
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	c9 01       	movw	r24, r18
    32d8:	88 0f       	add	r24, r24
    32da:	99 1f       	adc	r25, r25
    32dc:	88 0f       	add	r24, r24
    32de:	99 1f       	adc	r25, r25
    32e0:	88 0f       	add	r24, r24
    32e2:	99 1f       	adc	r25, r25
    32e4:	82 0f       	add	r24, r18
    32e6:	93 1f       	adc	r25, r19
    32e8:	ac 01       	movw	r20, r24
    32ea:	4c 53       	subi	r20, 0x3C	; 60
    32ec:	5b 4f       	sbci	r21, 0xFB	; 251
    32ee:	8c 81       	ldd	r24, Y+4	; 0x04
    32f0:	9d 81       	ldd	r25, Y+5	; 0x05
    32f2:	9c 01       	movw	r18, r24
    32f4:	2e 5f       	subi	r18, 0xFE	; 254
    32f6:	3f 4f       	sbci	r19, 0xFF	; 255
    32f8:	ca 01       	movw	r24, r20
    32fa:	b9 01       	movw	r22, r18
    32fc:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
    3300:	89 81       	ldd	r24, Y+1	; 0x01
    3302:	88 23       	and	r24, r24
    3304:	11 f0       	breq	.+4      	; 0x330a <vTaskPrioritySet+0x17e>
				{
					taskYIELD_IF_USING_PREEMPTION();
    3306:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
    330a:	0f 90       	pop	r0
    330c:	0f be       	out	0x3f, r0	; 63
	}
    330e:	2a 96       	adiw	r28, 0x0a	; 10
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	cd bf       	out	0x3d, r28	; 61
    331a:	cf 91       	pop	r28
    331c:	df 91       	pop	r29
    331e:	08 95       	ret

00003320 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
    3320:	df 93       	push	r29
    3322:	cf 93       	push	r28
    3324:	00 d0       	rcall	.+0      	; 0x3326 <vTaskSuspend+0x6>
    3326:	00 d0       	rcall	.+0      	; 0x3328 <vTaskSuspend+0x8>
    3328:	00 d0       	rcall	.+0      	; 0x332a <vTaskSuspend+0xa>
    332a:	cd b7       	in	r28, 0x3d	; 61
    332c:	de b7       	in	r29, 0x3e	; 62
    332e:	9c 83       	std	Y+4, r25	; 0x04
    3330:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	0f 92       	push	r0
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
    3338:	8b 81       	ldd	r24, Y+3	; 0x03
    333a:	9c 81       	ldd	r25, Y+4	; 0x04
    333c:	00 97       	sbiw	r24, 0x00	; 0
    333e:	39 f4       	brne	.+14     	; 0x334e <vTaskSuspend+0x2e>
    3340:	80 91 b3 04 	lds	r24, 0x04B3
    3344:	90 91 b4 04 	lds	r25, 0x04B4
    3348:	9e 83       	std	Y+6, r25	; 0x06
    334a:	8d 83       	std	Y+5, r24	; 0x05
    334c:	04 c0       	rjmp	.+8      	; 0x3356 <vTaskSuspend+0x36>
    334e:	8b 81       	ldd	r24, Y+3	; 0x03
    3350:	9c 81       	ldd	r25, Y+4	; 0x04
    3352:	9e 83       	std	Y+6, r25	; 0x06
    3354:	8d 83       	std	Y+5, r24	; 0x05
    3356:	8d 81       	ldd	r24, Y+5	; 0x05
    3358:	9e 81       	ldd	r25, Y+6	; 0x06
    335a:	9a 83       	std	Y+2, r25	; 0x02
    335c:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	9a 81       	ldd	r25, Y+2	; 0x02
    3362:	02 96       	adiw	r24, 0x02	; 2
    3364:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    3368:	e9 81       	ldd	r30, Y+1	; 0x01
    336a:	fa 81       	ldd	r31, Y+2	; 0x02
    336c:	84 89       	ldd	r24, Z+20	; 0x14
    336e:	95 89       	ldd	r25, Z+21	; 0x15
    3370:	00 97       	sbiw	r24, 0x00	; 0
    3372:	29 f0       	breq	.+10     	; 0x337e <vTaskSuspend+0x5e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	9a 81       	ldd	r25, Y+2	; 0x02
    3378:	0c 96       	adiw	r24, 0x0c	; 12
    337a:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
    337e:	89 81       	ldd	r24, Y+1	; 0x01
    3380:	9a 81       	ldd	r25, Y+2	; 0x02
    3382:	9c 01       	movw	r18, r24
    3384:	2e 5f       	subi	r18, 0xFE	; 254
    3386:	3f 4f       	sbci	r19, 0xFF	; 255
    3388:	8b e2       	ldi	r24, 0x2B	; 43
    338a:	95 e0       	ldi	r25, 0x05	; 5
    338c:	b9 01       	movw	r22, r18
    338e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3392:	0f 90       	pop	r0
    3394:	0f be       	out	0x3f, r0	; 63

		if( xSchedulerRunning != pdFALSE )
    3396:	80 91 ba 04 	lds	r24, 0x04BA
    339a:	88 23       	and	r24, r24
    339c:	39 f0       	breq	.+14     	; 0x33ac <vTaskSuspend+0x8c>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	f8 94       	cli
    33a2:	0f 92       	push	r0
			{
				prvResetNextTaskUnblockTime();
    33a4:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
    33a8:	0f 90       	pop	r0
    33aa:	0f be       	out	0x3f, r0	; 63
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
    33ac:	20 91 b3 04 	lds	r18, 0x04B3
    33b0:	30 91 b4 04 	lds	r19, 0x04B4
    33b4:	89 81       	ldd	r24, Y+1	; 0x01
    33b6:	9a 81       	ldd	r25, Y+2	; 0x02
    33b8:	82 17       	cp	r24, r18
    33ba:	93 07       	cpc	r25, r19
    33bc:	a1 f4       	brne	.+40     	; 0x33e6 <vTaskSuspend+0xc6>
		{
			if( xSchedulerRunning != pdFALSE )
    33be:	80 91 ba 04 	lds	r24, 0x04BA
    33c2:	88 23       	and	r24, r24
    33c4:	19 f0       	breq	.+6      	; 0x33cc <vTaskSuspend+0xac>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
    33c6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
    33ca:	0d c0       	rjmp	.+26     	; 0x33e6 <vTaskSuspend+0xc6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    33cc:	90 91 2b 05 	lds	r25, 0x052B
    33d0:	80 91 b6 04 	lds	r24, 0x04B6
    33d4:	98 17       	cp	r25, r24
    33d6:	29 f4       	brne	.+10     	; 0x33e2 <vTaskSuspend+0xc2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    33d8:	10 92 b4 04 	sts	0x04B4, r1
    33dc:	10 92 b3 04 	sts	0x04B3, r1
    33e0:	02 c0       	rjmp	.+4      	; 0x33e6 <vTaskSuspend+0xc6>
				}
				else
				{
					vTaskSwitchContext();
    33e2:	0e 94 14 1d 	call	0x3a28	; 0x3a28 <vTaskSwitchContext>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    33e6:	26 96       	adiw	r28, 0x06	; 6
    33e8:	0f b6       	in	r0, 0x3f	; 63
    33ea:	f8 94       	cli
    33ec:	de bf       	out	0x3e, r29	; 62
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	cd bf       	out	0x3d, r28	; 61
    33f2:	cf 91       	pop	r28
    33f4:	df 91       	pop	r29
    33f6:	08 95       	ret

000033f8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
    33f8:	df 93       	push	r29
    33fa:	cf 93       	push	r28
    33fc:	00 d0       	rcall	.+0      	; 0x33fe <prvTaskIsTaskSuspended+0x6>
    33fe:	00 d0       	rcall	.+0      	; 0x3400 <prvTaskIsTaskSuspended+0x8>
    3400:	0f 92       	push	r0
    3402:	cd b7       	in	r28, 0x3d	; 61
    3404:	de b7       	in	r29, 0x3e	; 62
    3406:	9d 83       	std	Y+5, r25	; 0x05
    3408:	8c 83       	std	Y+4, r24	; 0x04
	BaseType_t xReturn = pdFALSE;
    340a:	1b 82       	std	Y+3, r1	; 0x03
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
    340c:	8c 81       	ldd	r24, Y+4	; 0x04
    340e:	9d 81       	ldd	r25, Y+5	; 0x05
    3410:	9a 83       	std	Y+2, r25	; 0x02
    3412:	89 83       	std	Y+1, r24	; 0x01

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
    3414:	e9 81       	ldd	r30, Y+1	; 0x01
    3416:	fa 81       	ldd	r31, Y+2	; 0x02
    3418:	82 85       	ldd	r24, Z+10	; 0x0a
    341a:	93 85       	ldd	r25, Z+11	; 0x0b
    341c:	25 e0       	ldi	r18, 0x05	; 5
    341e:	8b 32       	cpi	r24, 0x2B	; 43
    3420:	92 07       	cpc	r25, r18
    3422:	81 f4       	brne	.+32     	; 0x3444 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
    3424:	e9 81       	ldd	r30, Y+1	; 0x01
    3426:	fa 81       	ldd	r31, Y+2	; 0x02
    3428:	84 89       	ldd	r24, Z+20	; 0x14
    342a:	95 89       	ldd	r25, Z+21	; 0x15
    342c:	25 e0       	ldi	r18, 0x05	; 5
    342e:	89 31       	cpi	r24, 0x19	; 25
    3430:	92 07       	cpc	r25, r18
    3432:	41 f0       	breq	.+16     	; 0x3444 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
    3434:	e9 81       	ldd	r30, Y+1	; 0x01
    3436:	fa 81       	ldd	r31, Y+2	; 0x02
    3438:	84 89       	ldd	r24, Z+20	; 0x14
    343a:	95 89       	ldd	r25, Z+21	; 0x15
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	11 f4       	brne	.+4      	; 0x3444 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    3440:	81 e0       	ldi	r24, 0x01	; 1
    3442:	8b 83       	std	Y+3, r24	; 0x03
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    3444:	8b 81       	ldd	r24, Y+3	; 0x03
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	cf 91       	pop	r28
    3452:	df 91       	pop	r29
    3454:	08 95       	ret

00003456 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
    3456:	df 93       	push	r29
    3458:	cf 93       	push	r28
    345a:	00 d0       	rcall	.+0      	; 0x345c <vTaskResume+0x6>
    345c:	00 d0       	rcall	.+0      	; 0x345e <vTaskResume+0x8>
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62
    3462:	9c 83       	std	Y+4, r25	; 0x04
    3464:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    3466:	8b 81       	ldd	r24, Y+3	; 0x03
    3468:	9c 81       	ldd	r25, Y+4	; 0x04
    346a:	9a 83       	std	Y+2, r25	; 0x02
    346c:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	9a 81       	ldd	r25, Y+2	; 0x02
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	09 f4       	brne	.+2      	; 0x3478 <vTaskResume+0x22>
    3476:	4c c0       	rjmp	.+152    	; 0x3510 <vTaskResume+0xba>
    3478:	20 91 b3 04 	lds	r18, 0x04B3
    347c:	30 91 b4 04 	lds	r19, 0x04B4
    3480:	89 81       	ldd	r24, Y+1	; 0x01
    3482:	9a 81       	ldd	r25, Y+2	; 0x02
    3484:	82 17       	cp	r24, r18
    3486:	93 07       	cpc	r25, r19
    3488:	09 f4       	brne	.+2      	; 0x348c <vTaskResume+0x36>
    348a:	42 c0       	rjmp	.+132    	; 0x3510 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	0f 92       	push	r0
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    3492:	89 81       	ldd	r24, Y+1	; 0x01
    3494:	9a 81       	ldd	r25, Y+2	; 0x02
    3496:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <prvTaskIsTaskSuspended>
    349a:	88 23       	and	r24, r24
    349c:	b9 f1       	breq	.+110    	; 0x350c <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	9a 81       	ldd	r25, Y+2	; 0x02
    34a2:	02 96       	adiw	r24, 0x02	; 2
    34a4:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    34a8:	e9 81       	ldd	r30, Y+1	; 0x01
    34aa:	fa 81       	ldd	r31, Y+2	; 0x02
    34ac:	96 89       	ldd	r25, Z+22	; 0x16
    34ae:	80 91 b9 04 	lds	r24, 0x04B9
    34b2:	89 17       	cp	r24, r25
    34b4:	28 f4       	brcc	.+10     	; 0x34c0 <vTaskResume+0x6a>
    34b6:	e9 81       	ldd	r30, Y+1	; 0x01
    34b8:	fa 81       	ldd	r31, Y+2	; 0x02
    34ba:	86 89       	ldd	r24, Z+22	; 0x16
    34bc:	80 93 b9 04 	sts	0x04B9, r24
    34c0:	e9 81       	ldd	r30, Y+1	; 0x01
    34c2:	fa 81       	ldd	r31, Y+2	; 0x02
    34c4:	86 89       	ldd	r24, Z+22	; 0x16
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	c9 01       	movw	r24, r18
    34cc:	88 0f       	add	r24, r24
    34ce:	99 1f       	adc	r25, r25
    34d0:	88 0f       	add	r24, r24
    34d2:	99 1f       	adc	r25, r25
    34d4:	88 0f       	add	r24, r24
    34d6:	99 1f       	adc	r25, r25
    34d8:	82 0f       	add	r24, r18
    34da:	93 1f       	adc	r25, r19
    34dc:	ac 01       	movw	r20, r24
    34de:	4c 53       	subi	r20, 0x3C	; 60
    34e0:	5b 4f       	sbci	r21, 0xFB	; 251
    34e2:	89 81       	ldd	r24, Y+1	; 0x01
    34e4:	9a 81       	ldd	r25, Y+2	; 0x02
    34e6:	9c 01       	movw	r18, r24
    34e8:	2e 5f       	subi	r18, 0xFE	; 254
    34ea:	3f 4f       	sbci	r19, 0xFF	; 255
    34ec:	ca 01       	movw	r24, r20
    34ee:	b9 01       	movw	r22, r18
    34f0:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    34f4:	e9 81       	ldd	r30, Y+1	; 0x01
    34f6:	fa 81       	ldd	r31, Y+2	; 0x02
    34f8:	96 89       	ldd	r25, Z+22	; 0x16
    34fa:	e0 91 b3 04 	lds	r30, 0x04B3
    34fe:	f0 91 b4 04 	lds	r31, 0x04B4
    3502:	86 89       	ldd	r24, Z+22	; 0x16
    3504:	98 17       	cp	r25, r24
    3506:	10 f0       	brcs	.+4      	; 0x350c <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
    3508:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
    350c:	0f 90       	pop	r0
    350e:	0f be       	out	0x3f, r0	; 63
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    3510:	0f 90       	pop	r0
    3512:	0f 90       	pop	r0
    3514:	0f 90       	pop	r0
    3516:	0f 90       	pop	r0
    3518:	cf 91       	pop	r28
    351a:	df 91       	pop	r29
    351c:	08 95       	ret

0000351e <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
    351e:	df 93       	push	r29
    3520:	cf 93       	push	r28
    3522:	00 d0       	rcall	.+0      	; 0x3524 <xTaskResumeFromISR+0x6>
    3524:	00 d0       	rcall	.+0      	; 0x3526 <xTaskResumeFromISR+0x8>
    3526:	00 d0       	rcall	.+0      	; 0x3528 <xTaskResumeFromISR+0xa>
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	9e 83       	std	Y+6, r25	; 0x06
    352e:	8d 83       	std	Y+5, r24	; 0x05
	BaseType_t xYieldRequired = pdFALSE;
    3530:	1c 82       	std	Y+4, r1	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
    3532:	8d 81       	ldd	r24, Y+5	; 0x05
    3534:	9e 81       	ldd	r25, Y+6	; 0x06
    3536:	9b 83       	std	Y+3, r25	; 0x03
    3538:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    353a:	19 82       	std	Y+1, r1	; 0x01
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
    353c:	8a 81       	ldd	r24, Y+2	; 0x02
    353e:	9b 81       	ldd	r25, Y+3	; 0x03
    3540:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <prvTaskIsTaskSuspended>
    3544:	88 23       	and	r24, r24
    3546:	09 f4       	brne	.+2      	; 0x354a <xTaskResumeFromISR+0x2c>
    3548:	46 c0       	rjmp	.+140    	; 0x35d6 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    354a:	80 91 c3 04 	lds	r24, 0x04C3
    354e:	88 23       	and	r24, r24
    3550:	c1 f5       	brne	.+112    	; 0x35c2 <xTaskResumeFromISR+0xa4>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3552:	ea 81       	ldd	r30, Y+2	; 0x02
    3554:	fb 81       	ldd	r31, Y+3	; 0x03
    3556:	96 89       	ldd	r25, Z+22	; 0x16
    3558:	e0 91 b3 04 	lds	r30, 0x04B3
    355c:	f0 91 b4 04 	lds	r31, 0x04B4
    3560:	86 89       	ldd	r24, Z+22	; 0x16
    3562:	98 17       	cp	r25, r24
    3564:	10 f0       	brcs	.+4      	; 0x356a <xTaskResumeFromISR+0x4c>
					{
						xYieldRequired = pdTRUE;
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	8c 83       	std	Y+4, r24	; 0x04
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    356a:	8a 81       	ldd	r24, Y+2	; 0x02
    356c:	9b 81       	ldd	r25, Y+3	; 0x03
    356e:	02 96       	adiw	r24, 0x02	; 2
    3570:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    3574:	ea 81       	ldd	r30, Y+2	; 0x02
    3576:	fb 81       	ldd	r31, Y+3	; 0x03
    3578:	96 89       	ldd	r25, Z+22	; 0x16
    357a:	80 91 b9 04 	lds	r24, 0x04B9
    357e:	89 17       	cp	r24, r25
    3580:	28 f4       	brcc	.+10     	; 0x358c <xTaskResumeFromISR+0x6e>
    3582:	ea 81       	ldd	r30, Y+2	; 0x02
    3584:	fb 81       	ldd	r31, Y+3	; 0x03
    3586:	86 89       	ldd	r24, Z+22	; 0x16
    3588:	80 93 b9 04 	sts	0x04B9, r24
    358c:	ea 81       	ldd	r30, Y+2	; 0x02
    358e:	fb 81       	ldd	r31, Y+3	; 0x03
    3590:	86 89       	ldd	r24, Z+22	; 0x16
    3592:	28 2f       	mov	r18, r24
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	c9 01       	movw	r24, r18
    3598:	88 0f       	add	r24, r24
    359a:	99 1f       	adc	r25, r25
    359c:	88 0f       	add	r24, r24
    359e:	99 1f       	adc	r25, r25
    35a0:	88 0f       	add	r24, r24
    35a2:	99 1f       	adc	r25, r25
    35a4:	82 0f       	add	r24, r18
    35a6:	93 1f       	adc	r25, r19
    35a8:	ac 01       	movw	r20, r24
    35aa:	4c 53       	subi	r20, 0x3C	; 60
    35ac:	5b 4f       	sbci	r21, 0xFB	; 251
    35ae:	8a 81       	ldd	r24, Y+2	; 0x02
    35b0:	9b 81       	ldd	r25, Y+3	; 0x03
    35b2:	9c 01       	movw	r18, r24
    35b4:	2e 5f       	subi	r18, 0xFE	; 254
    35b6:	3f 4f       	sbci	r19, 0xFF	; 255
    35b8:	ca 01       	movw	r24, r20
    35ba:	b9 01       	movw	r22, r18
    35bc:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
    35c0:	0a c0       	rjmp	.+20     	; 0x35d6 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    35c2:	8a 81       	ldd	r24, Y+2	; 0x02
    35c4:	9b 81       	ldd	r25, Y+3	; 0x03
    35c6:	9c 01       	movw	r18, r24
    35c8:	24 5f       	subi	r18, 0xF4	; 244
    35ca:	3f 4f       	sbci	r19, 0xFF	; 255
    35cc:	89 e1       	ldi	r24, 0x19	; 25
    35ce:	95 e0       	ldi	r25, 0x05	; 5
    35d0:	b9 01       	movw	r22, r18
    35d2:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
    35d6:	8c 81       	ldd	r24, Y+4	; 0x04
	}
    35d8:	26 96       	adiw	r28, 0x06	; 6
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
    35ea:	ef 92       	push	r14
    35ec:	ff 92       	push	r15
    35ee:	0f 93       	push	r16
    35f0:	df 93       	push	r29
    35f2:	cf 93       	push	r28
    35f4:	0f 92       	push	r0
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
    35fa:	83 e3       	ldi	r24, 0x33	; 51
    35fc:	9f e1       	ldi	r25, 0x1F	; 31
    35fe:	20 e6       	ldi	r18, 0x60	; 96
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	e1 ec       	ldi	r30, 0xC1	; 193
    3604:	f4 e0       	ldi	r31, 0x04	; 4
    3606:	b9 01       	movw	r22, r18
    3608:	40 e5       	ldi	r20, 0x50	; 80
    360a:	50 e0       	ldi	r21, 0x00	; 0
    360c:	20 e0       	ldi	r18, 0x00	; 0
    360e:	30 e0       	ldi	r19, 0x00	; 0
    3610:	00 e0       	ldi	r16, 0x00	; 0
    3612:	7f 01       	movw	r14, r30
    3614:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <xTaskCreate>
    3618:	89 83       	std	Y+1, r24	; 0x01
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
    361a:	89 81       	ldd	r24, Y+1	; 0x01
    361c:	81 30       	cpi	r24, 0x01	; 1
    361e:	81 f4       	brne	.+32     	; 0x3640 <vTaskStartScheduler+0x56>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
    3620:	f8 94       	cli
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
    3622:	8f ef       	ldi	r24, 0xFF	; 255
    3624:	9f ef       	ldi	r25, 0xFF	; 255
    3626:	90 93 c0 04 	sts	0x04C0, r25
    362a:	80 93 bf 04 	sts	0x04BF, r24
		xSchedulerRunning = pdTRUE;
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	80 93 ba 04 	sts	0x04BA, r24
		xTickCount = ( TickType_t ) 0U;
    3634:	10 92 b8 04 	sts	0x04B8, r1
    3638:	10 92 b7 04 	sts	0x04B7, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    363c:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
    3640:	0f 90       	pop	r0
    3642:	cf 91       	pop	r28
    3644:	df 91       	pop	r29
    3646:	0f 91       	pop	r16
    3648:	ff 90       	pop	r15
    364a:	ef 90       	pop	r14
    364c:	08 95       	ret

0000364e <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    364e:	df 93       	push	r29
    3650:	cf 93       	push	r28
    3652:	cd b7       	in	r28, 0x3d	; 61
    3654:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3656:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    3658:	10 92 ba 04 	sts	0x04BA, r1
	vPortEndScheduler();
    365c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <vPortEndScheduler>
}
    3660:	cf 91       	pop	r28
    3662:	df 91       	pop	r29
    3664:	08 95       	ret

00003666 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3666:	df 93       	push	r29
    3668:	cf 93       	push	r28
    366a:	cd b7       	in	r28, 0x3d	; 61
    366c:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
    366e:	80 91 c3 04 	lds	r24, 0x04C3
    3672:	8f 5f       	subi	r24, 0xFF	; 255
    3674:	80 93 c3 04 	sts	0x04C3, r24
}
    3678:	cf 91       	pop	r28
    367a:	df 91       	pop	r29
    367c:	08 95       	ret

0000367e <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
    367e:	df 93       	push	r29
    3680:	cf 93       	push	r28
    3682:	00 d0       	rcall	.+0      	; 0x3684 <xTaskResumeAll+0x6>
    3684:	00 d0       	rcall	.+0      	; 0x3686 <xTaskResumeAll+0x8>
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB = NULL;
    368a:	1c 82       	std	Y+4, r1	; 0x04
    368c:	1b 82       	std	Y+3, r1	; 0x03
BaseType_t xAlreadyYielded = pdFALSE;
    368e:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3690:	0f b6       	in	r0, 0x3f	; 63
    3692:	f8 94       	cli
    3694:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3696:	80 91 c3 04 	lds	r24, 0x04C3
    369a:	81 50       	subi	r24, 0x01	; 1
    369c:	80 93 c3 04 	sts	0x04C3, r24

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    36a0:	80 91 c3 04 	lds	r24, 0x04C3
    36a4:	88 23       	and	r24, r24
    36a6:	09 f0       	breq	.+2      	; 0x36aa <xTaskResumeAll+0x2c>
    36a8:	73 c0       	rjmp	.+230    	; 0x3790 <xTaskResumeAll+0x112>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
    36aa:	80 91 b6 04 	lds	r24, 0x04B6
    36ae:	88 23       	and	r24, r24
    36b0:	09 f4       	brne	.+2      	; 0x36b4 <xTaskResumeAll+0x36>
    36b2:	6e c0       	rjmp	.+220    	; 0x3790 <xTaskResumeAll+0x112>
    36b4:	45 c0       	rjmp	.+138    	; 0x3740 <xTaskResumeAll+0xc2>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
    36b6:	e0 91 1e 05 	lds	r30, 0x051E
    36ba:	f0 91 1f 05 	lds	r31, 0x051F
    36be:	86 81       	ldd	r24, Z+6	; 0x06
    36c0:	97 81       	ldd	r25, Z+7	; 0x07
    36c2:	9c 83       	std	Y+4, r25	; 0x04
    36c4:	8b 83       	std	Y+3, r24	; 0x03
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    36c6:	8b 81       	ldd	r24, Y+3	; 0x03
    36c8:	9c 81       	ldd	r25, Y+4	; 0x04
    36ca:	0c 96       	adiw	r24, 0x0c	; 12
    36cc:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    36d0:	8b 81       	ldd	r24, Y+3	; 0x03
    36d2:	9c 81       	ldd	r25, Y+4	; 0x04
    36d4:	02 96       	adiw	r24, 0x02	; 2
    36d6:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    36da:	eb 81       	ldd	r30, Y+3	; 0x03
    36dc:	fc 81       	ldd	r31, Y+4	; 0x04
    36de:	96 89       	ldd	r25, Z+22	; 0x16
    36e0:	80 91 b9 04 	lds	r24, 0x04B9
    36e4:	89 17       	cp	r24, r25
    36e6:	28 f4       	brcc	.+10     	; 0x36f2 <xTaskResumeAll+0x74>
    36e8:	eb 81       	ldd	r30, Y+3	; 0x03
    36ea:	fc 81       	ldd	r31, Y+4	; 0x04
    36ec:	86 89       	ldd	r24, Z+22	; 0x16
    36ee:	80 93 b9 04 	sts	0x04B9, r24
    36f2:	eb 81       	ldd	r30, Y+3	; 0x03
    36f4:	fc 81       	ldd	r31, Y+4	; 0x04
    36f6:	86 89       	ldd	r24, Z+22	; 0x16
    36f8:	28 2f       	mov	r18, r24
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	c9 01       	movw	r24, r18
    36fe:	88 0f       	add	r24, r24
    3700:	99 1f       	adc	r25, r25
    3702:	88 0f       	add	r24, r24
    3704:	99 1f       	adc	r25, r25
    3706:	88 0f       	add	r24, r24
    3708:	99 1f       	adc	r25, r25
    370a:	82 0f       	add	r24, r18
    370c:	93 1f       	adc	r25, r19
    370e:	ac 01       	movw	r20, r24
    3710:	4c 53       	subi	r20, 0x3C	; 60
    3712:	5b 4f       	sbci	r21, 0xFB	; 251
    3714:	8b 81       	ldd	r24, Y+3	; 0x03
    3716:	9c 81       	ldd	r25, Y+4	; 0x04
    3718:	9c 01       	movw	r18, r24
    371a:	2e 5f       	subi	r18, 0xFE	; 254
    371c:	3f 4f       	sbci	r19, 0xFF	; 255
    371e:	ca 01       	movw	r24, r20
    3720:	b9 01       	movw	r22, r18
    3722:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3726:	eb 81       	ldd	r30, Y+3	; 0x03
    3728:	fc 81       	ldd	r31, Y+4	; 0x04
    372a:	96 89       	ldd	r25, Z+22	; 0x16
    372c:	e0 91 b3 04 	lds	r30, 0x04B3
    3730:	f0 91 b4 04 	lds	r31, 0x04B4
    3734:	86 89       	ldd	r24, Z+22	; 0x16
    3736:	98 17       	cp	r25, r24
    3738:	18 f0       	brcs	.+6      	; 0x3740 <xTaskResumeAll+0xc2>
					{
						xYieldPending = pdTRUE;
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	80 93 bc 04 	sts	0x04BC, r24
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
    3740:	80 91 19 05 	lds	r24, 0x0519
    3744:	88 23       	and	r24, r24
    3746:	09 f0       	breq	.+2      	; 0x374a <xTaskResumeAll+0xcc>
    3748:	b6 cf       	rjmp	.-148    	; 0x36b6 <xTaskResumeAll+0x38>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
    374a:	8b 81       	ldd	r24, Y+3	; 0x03
    374c:	9c 81       	ldd	r25, Y+4	; 0x04
    374e:	00 97       	sbiw	r24, 0x00	; 0
    3750:	11 f0       	breq	.+4      	; 0x3756 <xTaskResumeAll+0xd8>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
    3752:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
    3756:	80 91 bb 04 	lds	r24, 0x04BB
    375a:	89 83       	std	Y+1, r24	; 0x01

					if( uxPendedCounts > ( UBaseType_t ) 0U )
    375c:	89 81       	ldd	r24, Y+1	; 0x01
    375e:	88 23       	and	r24, r24
    3760:	79 f0       	breq	.+30     	; 0x3780 <xTaskResumeAll+0x102>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
    3762:	0e 94 2f 1c 	call	0x385e	; 0x385e <xTaskIncrementTick>
    3766:	88 23       	and	r24, r24
    3768:	19 f0       	breq	.+6      	; 0x3770 <xTaskResumeAll+0xf2>
							{
								xYieldPending = pdTRUE;
    376a:	81 e0       	ldi	r24, 0x01	; 1
    376c:	80 93 bc 04 	sts	0x04BC, r24
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
    3770:	89 81       	ldd	r24, Y+1	; 0x01
    3772:	81 50       	subi	r24, 0x01	; 1
    3774:	89 83       	std	Y+1, r24	; 0x01
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
    3776:	89 81       	ldd	r24, Y+1	; 0x01
    3778:	88 23       	and	r24, r24
    377a:	99 f7       	brne	.-26     	; 0x3762 <xTaskResumeAll+0xe4>

						uxPendedTicks = 0;
    377c:	10 92 bb 04 	sts	0x04BB, r1
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
    3780:	80 91 bc 04 	lds	r24, 0x04BC
    3784:	88 23       	and	r24, r24
    3786:	21 f0       	breq	.+8      	; 0x3790 <xTaskResumeAll+0x112>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	8a 83       	std	Y+2, r24	; 0x02
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
    378c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
    3790:	0f 90       	pop	r0
    3792:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    3794:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3796:	0f 90       	pop	r0
    3798:	0f 90       	pop	r0
    379a:	0f 90       	pop	r0
    379c:	0f 90       	pop	r0
    379e:	cf 91       	pop	r28
    37a0:	df 91       	pop	r29
    37a2:	08 95       	ret

000037a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
    37a4:	df 93       	push	r29
    37a6:	cf 93       	push	r28
    37a8:	00 d0       	rcall	.+0      	; 0x37aa <xTaskGetTickCount+0x6>
    37aa:	cd b7       	in	r28, 0x3d	; 61
    37ac:	de b7       	in	r29, 0x3e	; 62
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
    37ae:	0f b6       	in	r0, 0x3f	; 63
    37b0:	f8 94       	cli
    37b2:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    37b4:	80 91 b7 04 	lds	r24, 0x04B7
    37b8:	90 91 b8 04 	lds	r25, 0x04B8
    37bc:	9a 83       	std	Y+2, r25	; 0x02
    37be:	89 83       	std	Y+1, r24	; 0x01
	}
	portTICK_TYPE_EXIT_CRITICAL();
    37c0:	0f 90       	pop	r0
    37c2:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    37c8:	0f 90       	pop	r0
    37ca:	0f 90       	pop	r0
    37cc:	cf 91       	pop	r28
    37ce:	df 91       	pop	r29
    37d0:	08 95       	ret

000037d2 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
    37d2:	df 93       	push	r29
    37d4:	cf 93       	push	r28
    37d6:	00 d0       	rcall	.+0      	; 0x37d8 <xTaskGetTickCountFromISR+0x6>
    37d8:	0f 92       	push	r0
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
    37de:	19 82       	std	Y+1, r1	; 0x01
	{
		xReturn = xTickCount;
    37e0:	80 91 b7 04 	lds	r24, 0x04B7
    37e4:	90 91 b8 04 	lds	r25, 0x04B8
    37e8:	9b 83       	std	Y+3, r25	; 0x03
    37ea:	8a 83       	std	Y+2, r24	; 0x02
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    37ec:	8a 81       	ldd	r24, Y+2	; 0x02
    37ee:	9b 81       	ldd	r25, Y+3	; 0x03
}
    37f0:	0f 90       	pop	r0
    37f2:	0f 90       	pop	r0
    37f4:	0f 90       	pop	r0
    37f6:	cf 91       	pop	r28
    37f8:	df 91       	pop	r29
    37fa:	08 95       	ret

000037fc <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
    37fc:	df 93       	push	r29
    37fe:	cf 93       	push	r28
    3800:	cd b7       	in	r28, 0x3d	; 61
    3802:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
    3804:	80 91 b6 04 	lds	r24, 0x04B6
}
    3808:	cf 91       	pop	r28
    380a:	df 91       	pop	r29
    380c:	08 95       	ret

0000380e <pcTaskGetName>:
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
    380e:	df 93       	push	r29
    3810:	cf 93       	push	r28
    3812:	00 d0       	rcall	.+0      	; 0x3814 <pcTaskGetName+0x6>
    3814:	00 d0       	rcall	.+0      	; 0x3816 <pcTaskGetName+0x8>
    3816:	00 d0       	rcall	.+0      	; 0x3818 <pcTaskGetName+0xa>
    3818:	cd b7       	in	r28, 0x3d	; 61
    381a:	de b7       	in	r29, 0x3e	; 62
    381c:	9c 83       	std	Y+4, r25	; 0x04
    381e:	8b 83       	std	Y+3, r24	; 0x03
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
    3820:	8b 81       	ldd	r24, Y+3	; 0x03
    3822:	9c 81       	ldd	r25, Y+4	; 0x04
    3824:	00 97       	sbiw	r24, 0x00	; 0
    3826:	39 f4       	brne	.+14     	; 0x3836 <pcTaskGetName+0x28>
    3828:	80 91 b3 04 	lds	r24, 0x04B3
    382c:	90 91 b4 04 	lds	r25, 0x04B4
    3830:	9e 83       	std	Y+6, r25	; 0x06
    3832:	8d 83       	std	Y+5, r24	; 0x05
    3834:	04 c0       	rjmp	.+8      	; 0x383e <pcTaskGetName+0x30>
    3836:	8b 81       	ldd	r24, Y+3	; 0x03
    3838:	9c 81       	ldd	r25, Y+4	; 0x04
    383a:	9e 83       	std	Y+6, r25	; 0x06
    383c:	8d 83       	std	Y+5, r24	; 0x05
    383e:	8d 81       	ldd	r24, Y+5	; 0x05
    3840:	9e 81       	ldd	r25, Y+6	; 0x06
    3842:	9a 83       	std	Y+2, r25	; 0x02
    3844:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTCB );
	return &( pxTCB->pcTaskName[ 0 ] );
    3846:	89 81       	ldd	r24, Y+1	; 0x01
    3848:	9a 81       	ldd	r25, Y+2	; 0x02
    384a:	49 96       	adiw	r24, 0x19	; 25
}
    384c:	26 96       	adiw	r28, 0x06	; 6
    384e:	0f b6       	in	r0, 0x3f	; 63
    3850:	f8 94       	cli
    3852:	de bf       	out	0x3e, r29	; 62
    3854:	0f be       	out	0x3f, r0	; 63
    3856:	cd bf       	out	0x3d, r28	; 61
    3858:	cf 91       	pop	r28
    385a:	df 91       	pop	r29
    385c:	08 95       	ret

0000385e <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
    385e:	df 93       	push	r29
    3860:	cf 93       	push	r28
    3862:	cd b7       	in	r28, 0x3d	; 61
    3864:	de b7       	in	r29, 0x3e	; 62
    3866:	29 97       	sbiw	r28, 0x09	; 9
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	f8 94       	cli
    386c:	de bf       	out	0x3e, r29	; 62
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	cd bf       	out	0x3d, r28	; 61
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
    3872:	1d 82       	std	Y+5, r1	; 0x05

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3874:	80 91 c3 04 	lds	r24, 0x04C3
    3878:	88 23       	and	r24, r24
    387a:	09 f0       	breq	.+2      	; 0x387e <xTaskIncrementTick+0x20>
    387c:	c0 c0       	rjmp	.+384    	; 0x39fe <xTaskIncrementTick+0x1a0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
    387e:	80 91 b7 04 	lds	r24, 0x04B7
    3882:	90 91 b8 04 	lds	r25, 0x04B8
    3886:	01 96       	adiw	r24, 0x01	; 1
    3888:	9c 83       	std	Y+4, r25	; 0x04
    388a:	8b 83       	std	Y+3, r24	; 0x03

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
    388c:	8b 81       	ldd	r24, Y+3	; 0x03
    388e:	9c 81       	ldd	r25, Y+4	; 0x04
    3890:	90 93 b8 04 	sts	0x04B8, r25
    3894:	80 93 b7 04 	sts	0x04B7, r24

		if( xConstTickCount == ( TickType_t ) 0U )
    3898:	8b 81       	ldd	r24, Y+3	; 0x03
    389a:	9c 81       	ldd	r25, Y+4	; 0x04
    389c:	00 97       	sbiw	r24, 0x00	; 0
    389e:	d9 f4       	brne	.+54     	; 0x38d6 <xTaskIncrementTick+0x78>
		{
			taskSWITCH_DELAYED_LISTS();
    38a0:	80 91 15 05 	lds	r24, 0x0515
    38a4:	90 91 16 05 	lds	r25, 0x0516
    38a8:	9a 83       	std	Y+2, r25	; 0x02
    38aa:	89 83       	std	Y+1, r24	; 0x01
    38ac:	80 91 17 05 	lds	r24, 0x0517
    38b0:	90 91 18 05 	lds	r25, 0x0518
    38b4:	90 93 16 05 	sts	0x0516, r25
    38b8:	80 93 15 05 	sts	0x0515, r24
    38bc:	89 81       	ldd	r24, Y+1	; 0x01
    38be:	9a 81       	ldd	r25, Y+2	; 0x02
    38c0:	90 93 18 05 	sts	0x0518, r25
    38c4:	80 93 17 05 	sts	0x0517, r24
    38c8:	80 91 bd 04 	lds	r24, 0x04BD
    38cc:	8f 5f       	subi	r24, 0xFF	; 255
    38ce:	80 93 bd 04 	sts	0x04BD, r24
    38d2:	0e 94 d3 1f 	call	0x3fa6	; 0x3fa6 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
    38d6:	20 91 bf 04 	lds	r18, 0x04BF
    38da:	30 91 c0 04 	lds	r19, 0x04C0
    38de:	8b 81       	ldd	r24, Y+3	; 0x03
    38e0:	9c 81       	ldd	r25, Y+4	; 0x04
    38e2:	82 17       	cp	r24, r18
    38e4:	93 07       	cpc	r25, r19
    38e6:	08 f4       	brcc	.+2      	; 0x38ea <xTaskIncrementTick+0x8c>
    38e8:	71 c0       	rjmp	.+226    	; 0x39cc <xTaskIncrementTick+0x16e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    38ea:	e0 91 15 05 	lds	r30, 0x0515
    38ee:	f0 91 16 05 	lds	r31, 0x0516
    38f2:	80 81       	ld	r24, Z
    38f4:	88 23       	and	r24, r24
    38f6:	39 f4       	brne	.+14     	; 0x3906 <xTaskIncrementTick+0xa8>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    38f8:	8f ef       	ldi	r24, 0xFF	; 255
    38fa:	9f ef       	ldi	r25, 0xFF	; 255
    38fc:	90 93 c0 04 	sts	0x04C0, r25
    3900:	80 93 bf 04 	sts	0x04BF, r24
    3904:	63 c0       	rjmp	.+198    	; 0x39cc <xTaskIncrementTick+0x16e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3906:	e0 91 15 05 	lds	r30, 0x0515
    390a:	f0 91 16 05 	lds	r31, 0x0516
    390e:	05 80       	ldd	r0, Z+5	; 0x05
    3910:	f6 81       	ldd	r31, Z+6	; 0x06
    3912:	e0 2d       	mov	r30, r0
    3914:	86 81       	ldd	r24, Z+6	; 0x06
    3916:	97 81       	ldd	r25, Z+7	; 0x07
    3918:	99 87       	std	Y+9, r25	; 0x09
    391a:	88 87       	std	Y+8, r24	; 0x08
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
    391c:	e8 85       	ldd	r30, Y+8	; 0x08
    391e:	f9 85       	ldd	r31, Y+9	; 0x09
    3920:	82 81       	ldd	r24, Z+2	; 0x02
    3922:	93 81       	ldd	r25, Z+3	; 0x03
    3924:	9f 83       	std	Y+7, r25	; 0x07
    3926:	8e 83       	std	Y+6, r24	; 0x06

					if( xConstTickCount < xItemValue )
    3928:	2b 81       	ldd	r18, Y+3	; 0x03
    392a:	3c 81       	ldd	r19, Y+4	; 0x04
    392c:	8e 81       	ldd	r24, Y+6	; 0x06
    392e:	9f 81       	ldd	r25, Y+7	; 0x07
    3930:	28 17       	cp	r18, r24
    3932:	39 07       	cpc	r19, r25
    3934:	38 f4       	brcc	.+14     	; 0x3944 <xTaskIncrementTick+0xe6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
    3936:	8e 81       	ldd	r24, Y+6	; 0x06
    3938:	9f 81       	ldd	r25, Y+7	; 0x07
    393a:	90 93 c0 04 	sts	0x04C0, r25
    393e:	80 93 bf 04 	sts	0x04BF, r24
    3942:	44 c0       	rjmp	.+136    	; 0x39cc <xTaskIncrementTick+0x16e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3944:	88 85       	ldd	r24, Y+8	; 0x08
    3946:	99 85       	ldd	r25, Y+9	; 0x09
    3948:	02 96       	adiw	r24, 0x02	; 2
    394a:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
    394e:	e8 85       	ldd	r30, Y+8	; 0x08
    3950:	f9 85       	ldd	r31, Y+9	; 0x09
    3952:	84 89       	ldd	r24, Z+20	; 0x14
    3954:	95 89       	ldd	r25, Z+21	; 0x15
    3956:	00 97       	sbiw	r24, 0x00	; 0
    3958:	29 f0       	breq	.+10     	; 0x3964 <xTaskIncrementTick+0x106>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
    395a:	88 85       	ldd	r24, Y+8	; 0x08
    395c:	99 85       	ldd	r25, Y+9	; 0x09
    395e:	0c 96       	adiw	r24, 0x0c	; 12
    3960:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
    3964:	e8 85       	ldd	r30, Y+8	; 0x08
    3966:	f9 85       	ldd	r31, Y+9	; 0x09
    3968:	96 89       	ldd	r25, Z+22	; 0x16
    396a:	80 91 b9 04 	lds	r24, 0x04B9
    396e:	89 17       	cp	r24, r25
    3970:	28 f4       	brcc	.+10     	; 0x397c <xTaskIncrementTick+0x11e>
    3972:	e8 85       	ldd	r30, Y+8	; 0x08
    3974:	f9 85       	ldd	r31, Y+9	; 0x09
    3976:	86 89       	ldd	r24, Z+22	; 0x16
    3978:	80 93 b9 04 	sts	0x04B9, r24
    397c:	e8 85       	ldd	r30, Y+8	; 0x08
    397e:	f9 85       	ldd	r31, Y+9	; 0x09
    3980:	86 89       	ldd	r24, Z+22	; 0x16
    3982:	28 2f       	mov	r18, r24
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	c9 01       	movw	r24, r18
    3988:	88 0f       	add	r24, r24
    398a:	99 1f       	adc	r25, r25
    398c:	88 0f       	add	r24, r24
    398e:	99 1f       	adc	r25, r25
    3990:	88 0f       	add	r24, r24
    3992:	99 1f       	adc	r25, r25
    3994:	82 0f       	add	r24, r18
    3996:	93 1f       	adc	r25, r19
    3998:	ac 01       	movw	r20, r24
    399a:	4c 53       	subi	r20, 0x3C	; 60
    399c:	5b 4f       	sbci	r21, 0xFB	; 251
    399e:	88 85       	ldd	r24, Y+8	; 0x08
    39a0:	99 85       	ldd	r25, Y+9	; 0x09
    39a2:	9c 01       	movw	r18, r24
    39a4:	2e 5f       	subi	r18, 0xFE	; 254
    39a6:	3f 4f       	sbci	r19, 0xFF	; 255
    39a8:	ca 01       	movw	r24, r20
    39aa:	b9 01       	movw	r22, r18
    39ac:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    39b0:	e8 85       	ldd	r30, Y+8	; 0x08
    39b2:	f9 85       	ldd	r31, Y+9	; 0x09
    39b4:	96 89       	ldd	r25, Z+22	; 0x16
    39b6:	e0 91 b3 04 	lds	r30, 0x04B3
    39ba:	f0 91 b4 04 	lds	r31, 0x04B4
    39be:	86 89       	ldd	r24, Z+22	; 0x16
    39c0:	98 17       	cp	r25, r24
    39c2:	08 f4       	brcc	.+2      	; 0x39c6 <xTaskIncrementTick+0x168>
    39c4:	92 cf       	rjmp	.-220    	; 0x38ea <xTaskIncrementTick+0x8c>
						{
							xSwitchRequired = pdTRUE;
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	8d 83       	std	Y+5, r24	; 0x05
    39ca:	8f cf       	rjmp	.-226    	; 0x38ea <xTaskIncrementTick+0x8c>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
    39cc:	e0 91 b3 04 	lds	r30, 0x04B3
    39d0:	f0 91 b4 04 	lds	r31, 0x04B4
    39d4:	86 89       	ldd	r24, Z+22	; 0x16
    39d6:	28 2f       	mov	r18, r24
    39d8:	30 e0       	ldi	r19, 0x00	; 0
    39da:	c9 01       	movw	r24, r18
    39dc:	88 0f       	add	r24, r24
    39de:	99 1f       	adc	r25, r25
    39e0:	88 0f       	add	r24, r24
    39e2:	99 1f       	adc	r25, r25
    39e4:	88 0f       	add	r24, r24
    39e6:	99 1f       	adc	r25, r25
    39e8:	82 0f       	add	r24, r18
    39ea:	93 1f       	adc	r25, r19
    39ec:	fc 01       	movw	r30, r24
    39ee:	ec 53       	subi	r30, 0x3C	; 60
    39f0:	fb 4f       	sbci	r31, 0xFB	; 251
    39f2:	80 81       	ld	r24, Z
    39f4:	82 30       	cpi	r24, 0x02	; 2
    39f6:	40 f0       	brcs	.+16     	; 0x3a08 <xTaskIncrementTick+0x1aa>
			{
				xSwitchRequired = pdTRUE;
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	8d 83       	std	Y+5, r24	; 0x05
    39fc:	05 c0       	rjmp	.+10     	; 0x3a08 <xTaskIncrementTick+0x1aa>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
    39fe:	80 91 bb 04 	lds	r24, 0x04BB
    3a02:	8f 5f       	subi	r24, 0xFF	; 255
    3a04:	80 93 bb 04 	sts	0x04BB, r24
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
    3a08:	80 91 bc 04 	lds	r24, 0x04BC
    3a0c:	88 23       	and	r24, r24
    3a0e:	11 f0       	breq	.+4      	; 0x3a14 <xTaskIncrementTick+0x1b6>
		{
			xSwitchRequired = pdTRUE;
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	8d 83       	std	Y+5, r24	; 0x05
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
    3a14:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3a16:	29 96       	adiw	r28, 0x09	; 9
    3a18:	0f b6       	in	r0, 0x3f	; 63
    3a1a:	f8 94       	cli
    3a1c:	de bf       	out	0x3e, r29	; 62
    3a1e:	0f be       	out	0x3f, r0	; 63
    3a20:	cd bf       	out	0x3d, r28	; 61
    3a22:	cf 91       	pop	r28
    3a24:	df 91       	pop	r29
    3a26:	08 95       	ret

00003a28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    3a28:	df 93       	push	r29
    3a2a:	cf 93       	push	r28
    3a2c:	00 d0       	rcall	.+0      	; 0x3a2e <vTaskSwitchContext+0x6>
    3a2e:	0f 92       	push	r0
    3a30:	cd b7       	in	r28, 0x3d	; 61
    3a32:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    3a34:	80 91 c3 04 	lds	r24, 0x04C3
    3a38:	88 23       	and	r24, r24
    3a3a:	21 f0       	breq	.+8      	; 0x3a44 <vTaskSwitchContext+0x1c>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	80 93 bc 04 	sts	0x04BC, r24
    3a42:	59 c0       	rjmp	.+178    	; 0x3af6 <vTaskSwitchContext+0xce>
	}
	else
	{
		xYieldPending = pdFALSE;
    3a44:	10 92 bc 04 	sts	0x04BC, r1
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    3a48:	80 91 b9 04 	lds	r24, 0x04B9
    3a4c:	8b 83       	std	Y+3, r24	; 0x03
    3a4e:	03 c0       	rjmp	.+6      	; 0x3a56 <vTaskSwitchContext+0x2e>
    3a50:	8b 81       	ldd	r24, Y+3	; 0x03
    3a52:	81 50       	subi	r24, 0x01	; 1
    3a54:	8b 83       	std	Y+3, r24	; 0x03
    3a56:	8b 81       	ldd	r24, Y+3	; 0x03
    3a58:	28 2f       	mov	r18, r24
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	c9 01       	movw	r24, r18
    3a5e:	88 0f       	add	r24, r24
    3a60:	99 1f       	adc	r25, r25
    3a62:	88 0f       	add	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	88 0f       	add	r24, r24
    3a68:	99 1f       	adc	r25, r25
    3a6a:	82 0f       	add	r24, r18
    3a6c:	93 1f       	adc	r25, r19
    3a6e:	fc 01       	movw	r30, r24
    3a70:	ec 53       	subi	r30, 0x3C	; 60
    3a72:	fb 4f       	sbci	r31, 0xFB	; 251
    3a74:	80 81       	ld	r24, Z
    3a76:	88 23       	and	r24, r24
    3a78:	59 f3       	breq	.-42     	; 0x3a50 <vTaskSwitchContext+0x28>
    3a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a7c:	28 2f       	mov	r18, r24
    3a7e:	30 e0       	ldi	r19, 0x00	; 0
    3a80:	c9 01       	movw	r24, r18
    3a82:	88 0f       	add	r24, r24
    3a84:	99 1f       	adc	r25, r25
    3a86:	88 0f       	add	r24, r24
    3a88:	99 1f       	adc	r25, r25
    3a8a:	88 0f       	add	r24, r24
    3a8c:	99 1f       	adc	r25, r25
    3a8e:	82 0f       	add	r24, r18
    3a90:	93 1f       	adc	r25, r19
    3a92:	8c 53       	subi	r24, 0x3C	; 60
    3a94:	9b 4f       	sbci	r25, 0xFB	; 251
    3a96:	9a 83       	std	Y+2, r25	; 0x02
    3a98:	89 83       	std	Y+1, r24	; 0x01
    3a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a9e:	01 80       	ldd	r0, Z+1	; 0x01
    3aa0:	f2 81       	ldd	r31, Z+2	; 0x02
    3aa2:	e0 2d       	mov	r30, r0
    3aa4:	82 81       	ldd	r24, Z+2	; 0x02
    3aa6:	93 81       	ldd	r25, Z+3	; 0x03
    3aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    3aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    3aac:	92 83       	std	Z+2, r25	; 0x02
    3aae:	81 83       	std	Z+1, r24	; 0x01
    3ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ab4:	21 81       	ldd	r18, Z+1	; 0x01
    3ab6:	32 81       	ldd	r19, Z+2	; 0x02
    3ab8:	89 81       	ldd	r24, Y+1	; 0x01
    3aba:	9a 81       	ldd	r25, Y+2	; 0x02
    3abc:	03 96       	adiw	r24, 0x03	; 3
    3abe:	28 17       	cp	r18, r24
    3ac0:	39 07       	cpc	r19, r25
    3ac2:	59 f4       	brne	.+22     	; 0x3ada <vTaskSwitchContext+0xb2>
    3ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ac8:	01 80       	ldd	r0, Z+1	; 0x01
    3aca:	f2 81       	ldd	r31, Z+2	; 0x02
    3acc:	e0 2d       	mov	r30, r0
    3ace:	82 81       	ldd	r24, Z+2	; 0x02
    3ad0:	93 81       	ldd	r25, Z+3	; 0x03
    3ad2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ad4:	fa 81       	ldd	r31, Y+2	; 0x02
    3ad6:	92 83       	std	Z+2, r25	; 0x02
    3ad8:	81 83       	std	Z+1, r24	; 0x01
    3ada:	e9 81       	ldd	r30, Y+1	; 0x01
    3adc:	fa 81       	ldd	r31, Y+2	; 0x02
    3ade:	01 80       	ldd	r0, Z+1	; 0x01
    3ae0:	f2 81       	ldd	r31, Z+2	; 0x02
    3ae2:	e0 2d       	mov	r30, r0
    3ae4:	86 81       	ldd	r24, Z+6	; 0x06
    3ae6:	97 81       	ldd	r25, Z+7	; 0x07
    3ae8:	90 93 b4 04 	sts	0x04B4, r25
    3aec:	80 93 b3 04 	sts	0x04B3, r24
    3af0:	8b 81       	ldd	r24, Y+3	; 0x03
    3af2:	80 93 b9 04 	sts	0x04B9, r24
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    3af6:	0f 90       	pop	r0
    3af8:	0f 90       	pop	r0
    3afa:	0f 90       	pop	r0
    3afc:	cf 91       	pop	r28
    3afe:	df 91       	pop	r29
    3b00:	08 95       	ret

00003b02 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
    3b02:	df 93       	push	r29
    3b04:	cf 93       	push	r28
    3b06:	00 d0       	rcall	.+0      	; 0x3b08 <vTaskPlaceOnEventList+0x6>
    3b08:	00 d0       	rcall	.+0      	; 0x3b0a <vTaskPlaceOnEventList+0x8>
    3b0a:	cd b7       	in	r28, 0x3d	; 61
    3b0c:	de b7       	in	r29, 0x3e	; 62
    3b0e:	9a 83       	std	Y+2, r25	; 0x02
    3b10:	89 83       	std	Y+1, r24	; 0x01
    3b12:	7c 83       	std	Y+4, r23	; 0x04
    3b14:	6b 83       	std	Y+3, r22	; 0x03

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3b16:	80 91 b3 04 	lds	r24, 0x04B3
    3b1a:	90 91 b4 04 	lds	r25, 0x04B4
    3b1e:	9c 01       	movw	r18, r24
    3b20:	24 5f       	subi	r18, 0xF4	; 244
    3b22:	3f 4f       	sbci	r19, 0xFF	; 255
    3b24:	89 81       	ldd	r24, Y+1	; 0x01
    3b26:	9a 81       	ldd	r25, Y+2	; 0x02
    3b28:	b9 01       	movw	r22, r18
    3b2a:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3b30:	9c 81       	ldd	r25, Y+4	; 0x04
    3b32:	61 e0       	ldi	r22, 0x01	; 1
    3b34:	0e 94 f6 24 	call	0x49ec	; 0x49ec <prvAddCurrentTaskToDelayedList>
}
    3b38:	0f 90       	pop	r0
    3b3a:	0f 90       	pop	r0
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	cf 91       	pop	r28
    3b42:	df 91       	pop	r29
    3b44:	08 95       	ret

00003b46 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
    3b46:	df 93       	push	r29
    3b48:	cf 93       	push	r28
    3b4a:	00 d0       	rcall	.+0      	; 0x3b4c <vTaskPlaceOnUnorderedEventList+0x6>
    3b4c:	00 d0       	rcall	.+0      	; 0x3b4e <vTaskPlaceOnUnorderedEventList+0x8>
    3b4e:	00 d0       	rcall	.+0      	; 0x3b50 <vTaskPlaceOnUnorderedEventList+0xa>
    3b50:	cd b7       	in	r28, 0x3d	; 61
    3b52:	de b7       	in	r29, 0x3e	; 62
    3b54:	9a 83       	std	Y+2, r25	; 0x02
    3b56:	89 83       	std	Y+1, r24	; 0x01
    3b58:	7c 83       	std	Y+4, r23	; 0x04
    3b5a:	6b 83       	std	Y+3, r22	; 0x03
    3b5c:	5e 83       	std	Y+6, r21	; 0x06
    3b5e:	4d 83       	std	Y+5, r20	; 0x05
	configASSERT( uxSchedulerSuspended != 0 );

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3b60:	e0 91 b3 04 	lds	r30, 0x04B3
    3b64:	f0 91 b4 04 	lds	r31, 0x04B4
    3b68:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6c:	90 68       	ori	r25, 0x80	; 128
    3b6e:	95 87       	std	Z+13, r25	; 0x0d
    3b70:	84 87       	std	Z+12, r24	; 0x0c
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
    3b72:	80 91 b3 04 	lds	r24, 0x04B3
    3b76:	90 91 b4 04 	lds	r25, 0x04B4
    3b7a:	9c 01       	movw	r18, r24
    3b7c:	24 5f       	subi	r18, 0xF4	; 244
    3b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b80:	89 81       	ldd	r24, Y+1	; 0x01
    3b82:	9a 81       	ldd	r25, Y+2	; 0x02
    3b84:	b9 01       	movw	r22, r18
    3b86:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    3b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b8c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b8e:	61 e0       	ldi	r22, 0x01	; 1
    3b90:	0e 94 f6 24 	call	0x49ec	; 0x49ec <prvAddCurrentTaskToDelayedList>
}
    3b94:	26 96       	adiw	r28, 0x06	; 6
    3b96:	0f b6       	in	r0, 0x3f	; 63
    3b98:	f8 94       	cli
    3b9a:	de bf       	out	0x3e, r29	; 62
    3b9c:	0f be       	out	0x3f, r0	; 63
    3b9e:	cd bf       	out	0x3d, r28	; 61
    3ba0:	cf 91       	pop	r28
    3ba2:	df 91       	pop	r29
    3ba4:	08 95       	ret

00003ba6 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
    3ba6:	df 93       	push	r29
    3ba8:	cf 93       	push	r28
    3baa:	00 d0       	rcall	.+0      	; 0x3bac <xTaskRemoveFromEventList+0x6>
    3bac:	00 d0       	rcall	.+0      	; 0x3bae <xTaskRemoveFromEventList+0x8>
    3bae:	0f 92       	push	r0
    3bb0:	cd b7       	in	r28, 0x3d	; 61
    3bb2:	de b7       	in	r29, 0x3e	; 62
    3bb4:	9d 83       	std	Y+5, r25	; 0x05
    3bb6:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    3bb8:	ec 81       	ldd	r30, Y+4	; 0x04
    3bba:	fd 81       	ldd	r31, Y+5	; 0x05
    3bbc:	05 80       	ldd	r0, Z+5	; 0x05
    3bbe:	f6 81       	ldd	r31, Z+6	; 0x06
    3bc0:	e0 2d       	mov	r30, r0
    3bc2:	86 81       	ldd	r24, Z+6	; 0x06
    3bc4:	97 81       	ldd	r25, Z+7	; 0x07
    3bc6:	9b 83       	std	Y+3, r25	; 0x03
    3bc8:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
    3bca:	8a 81       	ldd	r24, Y+2	; 0x02
    3bcc:	9b 81       	ldd	r25, Y+3	; 0x03
    3bce:	0c 96       	adiw	r24, 0x0c	; 12
    3bd0:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    3bd4:	80 91 c3 04 	lds	r24, 0x04C3
    3bd8:	88 23       	and	r24, r24
    3bda:	61 f5       	brne	.+88     	; 0x3c34 <xTaskRemoveFromEventList+0x8e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    3bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    3bde:	9b 81       	ldd	r25, Y+3	; 0x03
    3be0:	02 96       	adiw	r24, 0x02	; 2
    3be2:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
    3be6:	ea 81       	ldd	r30, Y+2	; 0x02
    3be8:	fb 81       	ldd	r31, Y+3	; 0x03
    3bea:	96 89       	ldd	r25, Z+22	; 0x16
    3bec:	80 91 b9 04 	lds	r24, 0x04B9
    3bf0:	89 17       	cp	r24, r25
    3bf2:	28 f4       	brcc	.+10     	; 0x3bfe <xTaskRemoveFromEventList+0x58>
    3bf4:	ea 81       	ldd	r30, Y+2	; 0x02
    3bf6:	fb 81       	ldd	r31, Y+3	; 0x03
    3bf8:	86 89       	ldd	r24, Z+22	; 0x16
    3bfa:	80 93 b9 04 	sts	0x04B9, r24
    3bfe:	ea 81       	ldd	r30, Y+2	; 0x02
    3c00:	fb 81       	ldd	r31, Y+3	; 0x03
    3c02:	86 89       	ldd	r24, Z+22	; 0x16
    3c04:	28 2f       	mov	r18, r24
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	c9 01       	movw	r24, r18
    3c0a:	88 0f       	add	r24, r24
    3c0c:	99 1f       	adc	r25, r25
    3c0e:	88 0f       	add	r24, r24
    3c10:	99 1f       	adc	r25, r25
    3c12:	88 0f       	add	r24, r24
    3c14:	99 1f       	adc	r25, r25
    3c16:	82 0f       	add	r24, r18
    3c18:	93 1f       	adc	r25, r19
    3c1a:	ac 01       	movw	r20, r24
    3c1c:	4c 53       	subi	r20, 0x3C	; 60
    3c1e:	5b 4f       	sbci	r21, 0xFB	; 251
    3c20:	8a 81       	ldd	r24, Y+2	; 0x02
    3c22:	9b 81       	ldd	r25, Y+3	; 0x03
    3c24:	9c 01       	movw	r18, r24
    3c26:	2e 5f       	subi	r18, 0xFE	; 254
    3c28:	3f 4f       	sbci	r19, 0xFF	; 255
    3c2a:	ca 01       	movw	r24, r20
    3c2c:	b9 01       	movw	r22, r18
    3c2e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
    3c32:	0a c0       	rjmp	.+20     	; 0x3c48 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    3c34:	8a 81       	ldd	r24, Y+2	; 0x02
    3c36:	9b 81       	ldd	r25, Y+3	; 0x03
    3c38:	9c 01       	movw	r18, r24
    3c3a:	24 5f       	subi	r18, 0xF4	; 244
    3c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c3e:	89 e1       	ldi	r24, 0x19	; 25
    3c40:	95 e0       	ldi	r25, 0x05	; 5
    3c42:	b9 01       	movw	r22, r18
    3c44:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3c48:	ea 81       	ldd	r30, Y+2	; 0x02
    3c4a:	fb 81       	ldd	r31, Y+3	; 0x03
    3c4c:	96 89       	ldd	r25, Z+22	; 0x16
    3c4e:	e0 91 b3 04 	lds	r30, 0x04B3
    3c52:	f0 91 b4 04 	lds	r31, 0x04B4
    3c56:	86 89       	ldd	r24, Z+22	; 0x16
    3c58:	89 17       	cp	r24, r25
    3c5a:	30 f4       	brcc	.+12     	; 0x3c68 <xTaskRemoveFromEventList+0xc2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    3c60:	81 e0       	ldi	r24, 0x01	; 1
    3c62:	80 93 bc 04 	sts	0x04BC, r24
    3c66:	01 c0       	rjmp	.+2      	; 0x3c6a <xTaskRemoveFromEventList+0xc4>
	}
	else
	{
		xReturn = pdFALSE;
    3c68:	19 82       	std	Y+1, r1	; 0x01
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
    3c6a:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	0f 90       	pop	r0
    3c72:	0f 90       	pop	r0
    3c74:	0f 90       	pop	r0
    3c76:	cf 91       	pop	r28
    3c78:	df 91       	pop	r29
    3c7a:	08 95       	ret

00003c7c <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
    3c7c:	df 93       	push	r29
    3c7e:	cf 93       	push	r28
    3c80:	cd b7       	in	r28, 0x3d	; 61
    3c82:	de b7       	in	r29, 0x3e	; 62
    3c84:	27 97       	sbiw	r28, 0x07	; 7
    3c86:	0f b6       	in	r0, 0x3f	; 63
    3c88:	f8 94       	cli
    3c8a:	de bf       	out	0x3e, r29	; 62
    3c8c:	0f be       	out	0x3f, r0	; 63
    3c8e:	cd bf       	out	0x3d, r28	; 61
    3c90:	9d 83       	std	Y+5, r25	; 0x05
    3c92:	8c 83       	std	Y+4, r24	; 0x04
    3c94:	7f 83       	std	Y+7, r23	; 0x07
    3c96:	6e 83       	std	Y+6, r22	; 0x06
	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
    3c98:	8e 81       	ldd	r24, Y+6	; 0x06
    3c9a:	9f 81       	ldd	r25, Y+7	; 0x07
    3c9c:	90 68       	ori	r25, 0x80	; 128
    3c9e:	ec 81       	ldd	r30, Y+4	; 0x04
    3ca0:	fd 81       	ldd	r31, Y+5	; 0x05
    3ca2:	91 83       	std	Z+1, r25	; 0x01
    3ca4:	80 83       	st	Z, r24

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
    3ca6:	ec 81       	ldd	r30, Y+4	; 0x04
    3ca8:	fd 81       	ldd	r31, Y+5	; 0x05
    3caa:	86 81       	ldd	r24, Z+6	; 0x06
    3cac:	97 81       	ldd	r25, Z+7	; 0x07
    3cae:	9b 83       	std	Y+3, r25	; 0x03
    3cb0:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	( void ) uxListRemove( pxEventListItem );
    3cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    3cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    3cb6:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
    3cba:	8a 81       	ldd	r24, Y+2	; 0x02
    3cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    3cbe:	02 96       	adiw	r24, 0x02	; 2
    3cc0:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
    3cc4:	ea 81       	ldd	r30, Y+2	; 0x02
    3cc6:	fb 81       	ldd	r31, Y+3	; 0x03
    3cc8:	96 89       	ldd	r25, Z+22	; 0x16
    3cca:	80 91 b9 04 	lds	r24, 0x04B9
    3cce:	89 17       	cp	r24, r25
    3cd0:	28 f4       	brcc	.+10     	; 0x3cdc <xTaskRemoveFromUnorderedEventList+0x60>
    3cd2:	ea 81       	ldd	r30, Y+2	; 0x02
    3cd4:	fb 81       	ldd	r31, Y+3	; 0x03
    3cd6:	86 89       	ldd	r24, Z+22	; 0x16
    3cd8:	80 93 b9 04 	sts	0x04B9, r24
    3cdc:	ea 81       	ldd	r30, Y+2	; 0x02
    3cde:	fb 81       	ldd	r31, Y+3	; 0x03
    3ce0:	86 89       	ldd	r24, Z+22	; 0x16
    3ce2:	28 2f       	mov	r18, r24
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	c9 01       	movw	r24, r18
    3ce8:	88 0f       	add	r24, r24
    3cea:	99 1f       	adc	r25, r25
    3cec:	88 0f       	add	r24, r24
    3cee:	99 1f       	adc	r25, r25
    3cf0:	88 0f       	add	r24, r24
    3cf2:	99 1f       	adc	r25, r25
    3cf4:	82 0f       	add	r24, r18
    3cf6:	93 1f       	adc	r25, r19
    3cf8:	ac 01       	movw	r20, r24
    3cfa:	4c 53       	subi	r20, 0x3C	; 60
    3cfc:	5b 4f       	sbci	r21, 0xFB	; 251
    3cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3d00:	9b 81       	ldd	r25, Y+3	; 0x03
    3d02:	9c 01       	movw	r18, r24
    3d04:	2e 5f       	subi	r18, 0xFE	; 254
    3d06:	3f 4f       	sbci	r19, 0xFF	; 255
    3d08:	ca 01       	movw	r24, r20
    3d0a:	b9 01       	movw	r22, r18
    3d0c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
    3d10:	ea 81       	ldd	r30, Y+2	; 0x02
    3d12:	fb 81       	ldd	r31, Y+3	; 0x03
    3d14:	96 89       	ldd	r25, Z+22	; 0x16
    3d16:	e0 91 b3 04 	lds	r30, 0x04B3
    3d1a:	f0 91 b4 04 	lds	r31, 0x04B4
    3d1e:	86 89       	ldd	r24, Z+22	; 0x16
    3d20:	89 17       	cp	r24, r25
    3d22:	30 f4       	brcc	.+12     	; 0x3d30 <xTaskRemoveFromUnorderedEventList+0xb4>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	89 83       	std	Y+1, r24	; 0x01

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
    3d28:	81 e0       	ldi	r24, 0x01	; 1
    3d2a:	80 93 bc 04 	sts	0x04BC, r24
    3d2e:	01 c0       	rjmp	.+2      	; 0x3d32 <xTaskRemoveFromUnorderedEventList+0xb6>
	}
	else
	{
		xReturn = pdFALSE;
    3d30:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    3d32:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d34:	27 96       	adiw	r28, 0x07	; 7
    3d36:	0f b6       	in	r0, 0x3f	; 63
    3d38:	f8 94       	cli
    3d3a:	de bf       	out	0x3e, r29	; 62
    3d3c:	0f be       	out	0x3f, r0	; 63
    3d3e:	cd bf       	out	0x3d, r28	; 61
    3d40:	cf 91       	pop	r28
    3d42:	df 91       	pop	r29
    3d44:	08 95       	ret

00003d46 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    3d46:	df 93       	push	r29
    3d48:	cf 93       	push	r28
    3d4a:	00 d0       	rcall	.+0      	; 0x3d4c <vTaskSetTimeOutState+0x6>
    3d4c:	cd b7       	in	r28, 0x3d	; 61
    3d4e:	de b7       	in	r29, 0x3e	; 62
    3d50:	9a 83       	std	Y+2, r25	; 0x02
    3d52:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    3d54:	80 91 bd 04 	lds	r24, 0x04BD
    3d58:	e9 81       	ldd	r30, Y+1	; 0x01
    3d5a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d5c:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    3d5e:	80 91 b7 04 	lds	r24, 0x04B7
    3d62:	90 91 b8 04 	lds	r25, 0x04B8
    3d66:	e9 81       	ldd	r30, Y+1	; 0x01
    3d68:	fa 81       	ldd	r31, Y+2	; 0x02
    3d6a:	92 83       	std	Z+2, r25	; 0x02
    3d6c:	81 83       	std	Z+1, r24	; 0x01
}
    3d6e:	0f 90       	pop	r0
    3d70:	0f 90       	pop	r0
    3d72:	cf 91       	pop	r28
    3d74:	df 91       	pop	r29
    3d76:	08 95       	ret

00003d78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
    3d78:	df 93       	push	r29
    3d7a:	cf 93       	push	r28
    3d7c:	cd b7       	in	r28, 0x3d	; 61
    3d7e:	de b7       	in	r29, 0x3e	; 62
    3d80:	27 97       	sbiw	r28, 0x07	; 7
    3d82:	0f b6       	in	r0, 0x3f	; 63
    3d84:	f8 94       	cli
    3d86:	de bf       	out	0x3e, r29	; 62
    3d88:	0f be       	out	0x3f, r0	; 63
    3d8a:	cd bf       	out	0x3d, r28	; 61
    3d8c:	9d 83       	std	Y+5, r25	; 0x05
    3d8e:	8c 83       	std	Y+4, r24	; 0x04
    3d90:	7f 83       	std	Y+7, r23	; 0x07
    3d92:	6e 83       	std	Y+6, r22	; 0x06
BaseType_t xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    3d94:	0f b6       	in	r0, 0x3f	; 63
    3d96:	f8 94       	cli
    3d98:	0f 92       	push	r0
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
    3d9a:	80 91 b7 04 	lds	r24, 0x04B7
    3d9e:	90 91 b8 04 	lds	r25, 0x04B8
    3da2:	9a 83       	std	Y+2, r25	; 0x02
    3da4:	89 83       	std	Y+1, r24	; 0x01
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
    3da6:	ee 81       	ldd	r30, Y+6	; 0x06
    3da8:	ff 81       	ldd	r31, Y+7	; 0x07
    3daa:	80 81       	ld	r24, Z
    3dac:	91 81       	ldd	r25, Z+1	; 0x01
    3dae:	2f ef       	ldi	r18, 0xFF	; 255
    3db0:	8f 3f       	cpi	r24, 0xFF	; 255
    3db2:	92 07       	cpc	r25, r18
    3db4:	11 f4       	brne	.+4      	; 0x3dba <xTaskCheckForTimeOut+0x42>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
    3db6:	1b 82       	std	Y+3, r1	; 0x03
    3db8:	40 c0       	rjmp	.+128    	; 0x3e3a <xTaskCheckForTimeOut+0xc2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    3dba:	ec 81       	ldd	r30, Y+4	; 0x04
    3dbc:	fd 81       	ldd	r31, Y+5	; 0x05
    3dbe:	90 81       	ld	r25, Z
    3dc0:	80 91 bd 04 	lds	r24, 0x04BD
    3dc4:	98 17       	cp	r25, r24
    3dc6:	61 f0       	breq	.+24     	; 0x3de0 <xTaskCheckForTimeOut+0x68>
    3dc8:	ec 81       	ldd	r30, Y+4	; 0x04
    3dca:	fd 81       	ldd	r31, Y+5	; 0x05
    3dcc:	21 81       	ldd	r18, Z+1	; 0x01
    3dce:	32 81       	ldd	r19, Z+2	; 0x02
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
    3dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd4:	82 17       	cp	r24, r18
    3dd6:	93 07       	cpc	r25, r19
    3dd8:	18 f0       	brcs	.+6      	; 0x3de0 <xTaskCheckForTimeOut+0x68>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	8b 83       	std	Y+3, r24	; 0x03
    3dde:	2d c0       	rjmp	.+90     	; 0x3e3a <xTaskCheckForTimeOut+0xc2>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    3de0:	ec 81       	ldd	r30, Y+4	; 0x04
    3de2:	fd 81       	ldd	r31, Y+5	; 0x05
    3de4:	21 81       	ldd	r18, Z+1	; 0x01
    3de6:	32 81       	ldd	r19, Z+2	; 0x02
    3de8:	89 81       	ldd	r24, Y+1	; 0x01
    3dea:	9a 81       	ldd	r25, Y+2	; 0x02
    3dec:	ac 01       	movw	r20, r24
    3dee:	42 1b       	sub	r20, r18
    3df0:	53 0b       	sbc	r21, r19
    3df2:	9a 01       	movw	r18, r20
    3df4:	ee 81       	ldd	r30, Y+6	; 0x06
    3df6:	ff 81       	ldd	r31, Y+7	; 0x07
    3df8:	80 81       	ld	r24, Z
    3dfa:	91 81       	ldd	r25, Z+1	; 0x01
    3dfc:	28 17       	cp	r18, r24
    3dfe:	39 07       	cpc	r19, r25
    3e00:	d0 f4       	brcc	.+52     	; 0x3e36 <xTaskCheckForTimeOut+0xbe>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
    3e02:	ee 81       	ldd	r30, Y+6	; 0x06
    3e04:	ff 81       	ldd	r31, Y+7	; 0x07
    3e06:	40 81       	ld	r20, Z
    3e08:	51 81       	ldd	r21, Z+1	; 0x01
    3e0a:	ec 81       	ldd	r30, Y+4	; 0x04
    3e0c:	fd 81       	ldd	r31, Y+5	; 0x05
    3e0e:	21 81       	ldd	r18, Z+1	; 0x01
    3e10:	32 81       	ldd	r19, Z+2	; 0x02
    3e12:	89 81       	ldd	r24, Y+1	; 0x01
    3e14:	9a 81       	ldd	r25, Y+2	; 0x02
    3e16:	b9 01       	movw	r22, r18
    3e18:	68 1b       	sub	r22, r24
    3e1a:	79 0b       	sbc	r23, r25
    3e1c:	cb 01       	movw	r24, r22
    3e1e:	84 0f       	add	r24, r20
    3e20:	95 1f       	adc	r25, r21
    3e22:	ee 81       	ldd	r30, Y+6	; 0x06
    3e24:	ff 81       	ldd	r31, Y+7	; 0x07
    3e26:	91 83       	std	Z+1, r25	; 0x01
    3e28:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    3e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    3e2c:	9d 81       	ldd	r25, Y+5	; 0x05
    3e2e:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    3e32:	1b 82       	std	Y+3, r1	; 0x03
    3e34:	02 c0       	rjmp	.+4      	; 0x3e3a <xTaskCheckForTimeOut+0xc2>
		}
		else
		{
			xReturn = pdTRUE;
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	8b 83       	std	Y+3, r24	; 0x03
		}
	}
	taskEXIT_CRITICAL();
    3e3a:	0f 90       	pop	r0
    3e3c:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3e3e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3e40:	27 96       	adiw	r28, 0x07	; 7
    3e42:	0f b6       	in	r0, 0x3f	; 63
    3e44:	f8 94       	cli
    3e46:	de bf       	out	0x3e, r29	; 62
    3e48:	0f be       	out	0x3f, r0	; 63
    3e4a:	cd bf       	out	0x3d, r28	; 61
    3e4c:	cf 91       	pop	r28
    3e4e:	df 91       	pop	r29
    3e50:	08 95       	ret

00003e52 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    3e52:	df 93       	push	r29
    3e54:	cf 93       	push	r28
    3e56:	cd b7       	in	r28, 0x3d	; 61
    3e58:	de b7       	in	r29, 0x3e	; 62
	xYieldPending = pdTRUE;
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	80 93 bc 04 	sts	0x04BC, r24
}
    3e60:	cf 91       	pop	r28
    3e62:	df 91       	pop	r29
    3e64:	08 95       	ret

00003e66 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    3e66:	df 93       	push	r29
    3e68:	cf 93       	push	r28
    3e6a:	00 d0       	rcall	.+0      	; 0x3e6c <prvIdleTask+0x6>
    3e6c:	cd b7       	in	r28, 0x3d	; 61
    3e6e:	de b7       	in	r29, 0x3e	; 62
    3e70:	9a 83       	std	Y+2, r25	; 0x02
    3e72:	89 83       	std	Y+1, r24	; 0x01

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
    3e74:	0e 94 7e 1f 	call	0x3efc	; 0x3efc <prvCheckTasksWaitingTermination>
    3e78:	fd cf       	rjmp	.-6      	; 0x3e74 <prvIdleTask+0xe>

00003e7a <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
    3e7a:	df 93       	push	r29
    3e7c:	cf 93       	push	r28
    3e7e:	0f 92       	push	r0
    3e80:	cd b7       	in	r28, 0x3d	; 61
    3e82:	de b7       	in	r29, 0x3e	; 62
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3e84:	19 82       	std	Y+1, r1	; 0x01
    3e86:	13 c0       	rjmp	.+38     	; 0x3eae <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
    3e88:	89 81       	ldd	r24, Y+1	; 0x01
    3e8a:	28 2f       	mov	r18, r24
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	c9 01       	movw	r24, r18
    3e90:	88 0f       	add	r24, r24
    3e92:	99 1f       	adc	r25, r25
    3e94:	88 0f       	add	r24, r24
    3e96:	99 1f       	adc	r25, r25
    3e98:	88 0f       	add	r24, r24
    3e9a:	99 1f       	adc	r25, r25
    3e9c:	82 0f       	add	r24, r18
    3e9e:	93 1f       	adc	r25, r19
    3ea0:	8c 53       	subi	r24, 0x3C	; 60
    3ea2:	9b 4f       	sbci	r25, 0xFB	; 251
    3ea4:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    3ea8:	89 81       	ldd	r24, Y+1	; 0x01
    3eaa:	8f 5f       	subi	r24, 0xFF	; 255
    3eac:	89 83       	std	Y+1, r24	; 0x01
    3eae:	89 81       	ldd	r24, Y+1	; 0x01
    3eb0:	87 30       	cpi	r24, 0x07	; 7
    3eb2:	50 f3       	brcs	.-44     	; 0x3e88 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
    3eb4:	83 e0       	ldi	r24, 0x03	; 3
    3eb6:	95 e0       	ldi	r25, 0x05	; 5
    3eb8:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
    3ebc:	8c e0       	ldi	r24, 0x0C	; 12
    3ebe:	95 e0       	ldi	r25, 0x05	; 5
    3ec0:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInitialise>
	vListInitialise( &xPendingReadyList );
    3ec4:	89 e1       	ldi	r24, 0x19	; 25
    3ec6:	95 e0       	ldi	r25, 0x05	; 5
    3ec8:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
    3ecc:	82 e2       	ldi	r24, 0x22	; 34
    3ece:	95 e0       	ldi	r25, 0x05	; 5
    3ed0:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
    3ed4:	8b e2       	ldi	r24, 0x2B	; 43
    3ed6:	95 e0       	ldi	r25, 0x05	; 5
    3ed8:	0e 94 1e 0a 	call	0x143c	; 0x143c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3edc:	83 e0       	ldi	r24, 0x03	; 3
    3ede:	95 e0       	ldi	r25, 0x05	; 5
    3ee0:	90 93 16 05 	sts	0x0516, r25
    3ee4:	80 93 15 05 	sts	0x0515, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    3ee8:	8c e0       	ldi	r24, 0x0C	; 12
    3eea:	95 e0       	ldi	r25, 0x05	; 5
    3eec:	90 93 18 05 	sts	0x0518, r25
    3ef0:	80 93 17 05 	sts	0x0517, r24
}
    3ef4:	0f 90       	pop	r0
    3ef6:	cf 91       	pop	r28
    3ef8:	df 91       	pop	r29
    3efa:	08 95       	ret

00003efc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3efc:	df 93       	push	r29
    3efe:	cf 93       	push	r28
    3f00:	00 d0       	rcall	.+0      	; 0x3f02 <prvCheckTasksWaitingTermination+0x6>
    3f02:	0f 92       	push	r0
    3f04:	cd b7       	in	r28, 0x3d	; 61
    3f06:	de b7       	in	r29, 0x3e	; 62
    3f08:	2e c0       	rjmp	.+92     	; 0x3f66 <prvCheckTasksWaitingTermination+0x6a>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    3f0a:	0e 94 33 1b 	call	0x3666	; 0x3666 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    3f0e:	80 91 22 05 	lds	r24, 0x0522
    3f12:	1b 82       	std	Y+3, r1	; 0x03
    3f14:	88 23       	and	r24, r24
    3f16:	11 f4       	brne	.+4      	; 0x3f1c <prvCheckTasksWaitingTermination+0x20>
    3f18:	81 e0       	ldi	r24, 0x01	; 1
    3f1a:	8b 83       	std	Y+3, r24	; 0x03
			}
			( void ) xTaskResumeAll();
    3f1c:	0e 94 3f 1b 	call	0x367e	; 0x367e <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    3f20:	8b 81       	ldd	r24, Y+3	; 0x03
    3f22:	88 23       	and	r24, r24
    3f24:	01 f5       	brne	.+64     	; 0x3f66 <prvCheckTasksWaitingTermination+0x6a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    3f26:	0f b6       	in	r0, 0x3f	; 63
    3f28:	f8 94       	cli
    3f2a:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    3f2c:	e0 91 27 05 	lds	r30, 0x0527
    3f30:	f0 91 28 05 	lds	r31, 0x0528
    3f34:	86 81       	ldd	r24, Z+6	; 0x06
    3f36:	97 81       	ldd	r25, Z+7	; 0x07
    3f38:	9a 83       	std	Y+2, r25	; 0x02
    3f3a:	89 83       	std	Y+1, r24	; 0x01
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    3f3c:	89 81       	ldd	r24, Y+1	; 0x01
    3f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3f40:	02 96       	adiw	r24, 0x02	; 2
    3f42:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
					--uxCurrentNumberOfTasks;
    3f46:	80 91 b6 04 	lds	r24, 0x04B6
    3f4a:	81 50       	subi	r24, 0x01	; 1
    3f4c:	80 93 b6 04 	sts	0x04B6, r24
					--uxDeletedTasksWaitingCleanUp;
    3f50:	80 91 b5 04 	lds	r24, 0x04B5
    3f54:	81 50       	subi	r24, 0x01	; 1
    3f56:	80 93 b5 04 	sts	0x04B5, r24
				}
				taskEXIT_CRITICAL();
    3f5a:	0f 90       	pop	r0
    3f5c:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    3f5e:	89 81       	ldd	r24, Y+1	; 0x01
    3f60:	9a 81       	ldd	r25, Y+2	; 0x02
    3f62:	0e 94 bd 1f 	call	0x3f7a	; 0x3f7a <prvDeleteTCB>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
    3f66:	80 91 b5 04 	lds	r24, 0x04B5
    3f6a:	88 23       	and	r24, r24
    3f6c:	71 f6       	brne	.-100    	; 0x3f0a <prvCheckTasksWaitingTermination+0xe>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
    3f6e:	0f 90       	pop	r0
    3f70:	0f 90       	pop	r0
    3f72:	0f 90       	pop	r0
    3f74:	cf 91       	pop	r28
    3f76:	df 91       	pop	r29
    3f78:	08 95       	ret

00003f7a <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
    3f7a:	df 93       	push	r29
    3f7c:	cf 93       	push	r28
    3f7e:	00 d0       	rcall	.+0      	; 0x3f80 <prvDeleteTCB+0x6>
    3f80:	cd b7       	in	r28, 0x3d	; 61
    3f82:	de b7       	in	r29, 0x3e	; 62
    3f84:	9a 83       	std	Y+2, r25	; 0x02
    3f86:	89 83       	std	Y+1, r24	; 0x01

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
    3f88:	e9 81       	ldd	r30, Y+1	; 0x01
    3f8a:	fa 81       	ldd	r31, Y+2	; 0x02
    3f8c:	87 89       	ldd	r24, Z+23	; 0x17
    3f8e:	90 8d       	ldd	r25, Z+24	; 0x18
    3f90:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <vPortFree>
			vPortFree( pxTCB );
    3f94:	89 81       	ldd	r24, Y+1	; 0x01
    3f96:	9a 81       	ldd	r25, Y+2	; 0x02
    3f98:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
    3f9c:	0f 90       	pop	r0
    3f9e:	0f 90       	pop	r0
    3fa0:	cf 91       	pop	r28
    3fa2:	df 91       	pop	r29
    3fa4:	08 95       	ret

00003fa6 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    3fa6:	df 93       	push	r29
    3fa8:	cf 93       	push	r28
    3faa:	00 d0       	rcall	.+0      	; 0x3fac <prvResetNextTaskUnblockTime+0x6>
    3fac:	cd b7       	in	r28, 0x3d	; 61
    3fae:	de b7       	in	r29, 0x3e	; 62
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3fb0:	e0 91 15 05 	lds	r30, 0x0515
    3fb4:	f0 91 16 05 	lds	r31, 0x0516
    3fb8:	80 81       	ld	r24, Z
    3fba:	88 23       	and	r24, r24
    3fbc:	39 f4       	brne	.+14     	; 0x3fcc <prvResetNextTaskUnblockTime+0x26>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
    3fbe:	8f ef       	ldi	r24, 0xFF	; 255
    3fc0:	9f ef       	ldi	r25, 0xFF	; 255
    3fc2:	90 93 c0 04 	sts	0x04C0, r25
    3fc6:	80 93 bf 04 	sts	0x04BF, r24
    3fca:	13 c0       	rjmp	.+38     	; 0x3ff2 <prvResetNextTaskUnblockTime+0x4c>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3fcc:	e0 91 15 05 	lds	r30, 0x0515
    3fd0:	f0 91 16 05 	lds	r31, 0x0516
    3fd4:	05 80       	ldd	r0, Z+5	; 0x05
    3fd6:	f6 81       	ldd	r31, Z+6	; 0x06
    3fd8:	e0 2d       	mov	r30, r0
    3fda:	86 81       	ldd	r24, Z+6	; 0x06
    3fdc:	97 81       	ldd	r25, Z+7	; 0x07
    3fde:	9a 83       	std	Y+2, r25	; 0x02
    3fe0:	89 83       	std	Y+1, r24	; 0x01
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
    3fe2:	e9 81       	ldd	r30, Y+1	; 0x01
    3fe4:	fa 81       	ldd	r31, Y+2	; 0x02
    3fe6:	82 81       	ldd	r24, Z+2	; 0x02
    3fe8:	93 81       	ldd	r25, Z+3	; 0x03
    3fea:	90 93 c0 04 	sts	0x04C0, r25
    3fee:	80 93 bf 04 	sts	0x04BF, r24
	}
}
    3ff2:	0f 90       	pop	r0
    3ff4:	0f 90       	pop	r0
    3ff6:	cf 91       	pop	r28
    3ff8:	df 91       	pop	r29
    3ffa:	08 95       	ret

00003ffc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
    3ffc:	df 93       	push	r29
    3ffe:	cf 93       	push	r28
    4000:	00 d0       	rcall	.+0      	; 0x4002 <xTaskGetCurrentTaskHandle+0x6>
    4002:	cd b7       	in	r28, 0x3d	; 61
    4004:	de b7       	in	r29, 0x3e	; 62
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    4006:	80 91 b3 04 	lds	r24, 0x04B3
    400a:	90 91 b4 04 	lds	r25, 0x04B4
    400e:	9a 83       	std	Y+2, r25	; 0x02
    4010:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    4012:	89 81       	ldd	r24, Y+1	; 0x01
    4014:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    4016:	0f 90       	pop	r0
    4018:	0f 90       	pop	r0
    401a:	cf 91       	pop	r28
    401c:	df 91       	pop	r29
    401e:	08 95       	ret

00004020 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
    4020:	df 93       	push	r29
    4022:	cf 93       	push	r28
    4024:	00 d0       	rcall	.+0      	; 0x4026 <vTaskPriorityInherit+0x6>
    4026:	00 d0       	rcall	.+0      	; 0x4028 <vTaskPriorityInherit+0x8>
    4028:	cd b7       	in	r28, 0x3d	; 61
    402a:	de b7       	in	r29, 0x3e	; 62
    402c:	9c 83       	std	Y+4, r25	; 0x04
    402e:	8b 83       	std	Y+3, r24	; 0x03
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    4030:	8b 81       	ldd	r24, Y+3	; 0x03
    4032:	9c 81       	ldd	r25, Y+4	; 0x04
    4034:	9a 83       	std	Y+2, r25	; 0x02
    4036:	89 83       	std	Y+1, r24	; 0x01

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
    4038:	8b 81       	ldd	r24, Y+3	; 0x03
    403a:	9c 81       	ldd	r25, Y+4	; 0x04
    403c:	00 97       	sbiw	r24, 0x00	; 0
    403e:	09 f4       	brne	.+2      	; 0x4042 <vTaskPriorityInherit+0x22>
    4040:	73 c0       	rjmp	.+230    	; 0x4128 <vTaskPriorityInherit+0x108>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    4042:	e9 81       	ldd	r30, Y+1	; 0x01
    4044:	fa 81       	ldd	r31, Y+2	; 0x02
    4046:	96 89       	ldd	r25, Z+22	; 0x16
    4048:	e0 91 b3 04 	lds	r30, 0x04B3
    404c:	f0 91 b4 04 	lds	r31, 0x04B4
    4050:	86 89       	ldd	r24, Z+22	; 0x16
    4052:	98 17       	cp	r25, r24
    4054:	08 f0       	brcs	.+2      	; 0x4058 <vTaskPriorityInherit+0x38>
    4056:	68 c0       	rjmp	.+208    	; 0x4128 <vTaskPriorityInherit+0x108>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
    4058:	e9 81       	ldd	r30, Y+1	; 0x01
    405a:	fa 81       	ldd	r31, Y+2	; 0x02
    405c:	84 85       	ldd	r24, Z+12	; 0x0c
    405e:	95 85       	ldd	r25, Z+13	; 0x0d
    4060:	99 23       	and	r25, r25
    4062:	7c f0       	brlt	.+30     	; 0x4082 <vTaskPriorityInherit+0x62>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4064:	e0 91 b3 04 	lds	r30, 0x04B3
    4068:	f0 91 b4 04 	lds	r31, 0x04B4
    406c:	86 89       	ldd	r24, Z+22	; 0x16
    406e:	28 2f       	mov	r18, r24
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	87 e0       	ldi	r24, 0x07	; 7
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	82 1b       	sub	r24, r18
    4078:	93 0b       	sbc	r25, r19
    407a:	e9 81       	ldd	r30, Y+1	; 0x01
    407c:	fa 81       	ldd	r31, Y+2	; 0x02
    407e:	95 87       	std	Z+13, r25	; 0x0d
    4080:	84 87       	std	Z+12, r24	; 0x0c
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
    4082:	e9 81       	ldd	r30, Y+1	; 0x01
    4084:	fa 81       	ldd	r31, Y+2	; 0x02
    4086:	42 85       	ldd	r20, Z+10	; 0x0a
    4088:	53 85       	ldd	r21, Z+11	; 0x0b
    408a:	e9 81       	ldd	r30, Y+1	; 0x01
    408c:	fa 81       	ldd	r31, Y+2	; 0x02
    408e:	86 89       	ldd	r24, Z+22	; 0x16
    4090:	28 2f       	mov	r18, r24
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	c9 01       	movw	r24, r18
    4096:	88 0f       	add	r24, r24
    4098:	99 1f       	adc	r25, r25
    409a:	88 0f       	add	r24, r24
    409c:	99 1f       	adc	r25, r25
    409e:	88 0f       	add	r24, r24
    40a0:	99 1f       	adc	r25, r25
    40a2:	82 0f       	add	r24, r18
    40a4:	93 1f       	adc	r25, r19
    40a6:	8c 53       	subi	r24, 0x3C	; 60
    40a8:	9b 4f       	sbci	r25, 0xFB	; 251
    40aa:	48 17       	cp	r20, r24
    40ac:	59 07       	cpc	r21, r25
    40ae:	a1 f5       	brne	.+104    	; 0x4118 <vTaskPriorityInherit+0xf8>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    40b0:	89 81       	ldd	r24, Y+1	; 0x01
    40b2:	9a 81       	ldd	r25, Y+2	; 0x02
    40b4:	02 96       	adiw	r24, 0x02	; 2
    40b6:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    40ba:	e0 91 b3 04 	lds	r30, 0x04B3
    40be:	f0 91 b4 04 	lds	r31, 0x04B4
    40c2:	86 89       	ldd	r24, Z+22	; 0x16
    40c4:	e9 81       	ldd	r30, Y+1	; 0x01
    40c6:	fa 81       	ldd	r31, Y+2	; 0x02
    40c8:	86 8b       	std	Z+22, r24	; 0x16
					prvAddTaskToReadyList( pxTCB );
    40ca:	e9 81       	ldd	r30, Y+1	; 0x01
    40cc:	fa 81       	ldd	r31, Y+2	; 0x02
    40ce:	96 89       	ldd	r25, Z+22	; 0x16
    40d0:	80 91 b9 04 	lds	r24, 0x04B9
    40d4:	89 17       	cp	r24, r25
    40d6:	28 f4       	brcc	.+10     	; 0x40e2 <vTaskPriorityInherit+0xc2>
    40d8:	e9 81       	ldd	r30, Y+1	; 0x01
    40da:	fa 81       	ldd	r31, Y+2	; 0x02
    40dc:	86 89       	ldd	r24, Z+22	; 0x16
    40de:	80 93 b9 04 	sts	0x04B9, r24
    40e2:	e9 81       	ldd	r30, Y+1	; 0x01
    40e4:	fa 81       	ldd	r31, Y+2	; 0x02
    40e6:	86 89       	ldd	r24, Z+22	; 0x16
    40e8:	28 2f       	mov	r18, r24
    40ea:	30 e0       	ldi	r19, 0x00	; 0
    40ec:	c9 01       	movw	r24, r18
    40ee:	88 0f       	add	r24, r24
    40f0:	99 1f       	adc	r25, r25
    40f2:	88 0f       	add	r24, r24
    40f4:	99 1f       	adc	r25, r25
    40f6:	88 0f       	add	r24, r24
    40f8:	99 1f       	adc	r25, r25
    40fa:	82 0f       	add	r24, r18
    40fc:	93 1f       	adc	r25, r19
    40fe:	ac 01       	movw	r20, r24
    4100:	4c 53       	subi	r20, 0x3C	; 60
    4102:	5b 4f       	sbci	r21, 0xFB	; 251
    4104:	89 81       	ldd	r24, Y+1	; 0x01
    4106:	9a 81       	ldd	r25, Y+2	; 0x02
    4108:	9c 01       	movw	r18, r24
    410a:	2e 5f       	subi	r18, 0xFE	; 254
    410c:	3f 4f       	sbci	r19, 0xFF	; 255
    410e:	ca 01       	movw	r24, r20
    4110:	b9 01       	movw	r22, r18
    4112:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
    4116:	08 c0       	rjmp	.+16     	; 0x4128 <vTaskPriorityInherit+0x108>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    4118:	e0 91 b3 04 	lds	r30, 0x04B3
    411c:	f0 91 b4 04 	lds	r31, 0x04B4
    4120:	86 89       	ldd	r24, Z+22	; 0x16
    4122:	e9 81       	ldd	r30, Y+1	; 0x01
    4124:	fa 81       	ldd	r31, Y+2	; 0x02
    4126:	86 8b       	std	Z+22, r24	; 0x16
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    4128:	0f 90       	pop	r0
    412a:	0f 90       	pop	r0
    412c:	0f 90       	pop	r0
    412e:	0f 90       	pop	r0
    4130:	cf 91       	pop	r28
    4132:	df 91       	pop	r29
    4134:	08 95       	ret

00004136 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
    4136:	df 93       	push	r29
    4138:	cf 93       	push	r28
    413a:	00 d0       	rcall	.+0      	; 0x413c <xTaskPriorityDisinherit+0x6>
    413c:	00 d0       	rcall	.+0      	; 0x413e <xTaskPriorityDisinherit+0x8>
    413e:	0f 92       	push	r0
    4140:	cd b7       	in	r28, 0x3d	; 61
    4142:	de b7       	in	r29, 0x3e	; 62
    4144:	9d 83       	std	Y+5, r25	; 0x05
    4146:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
    4148:	8c 81       	ldd	r24, Y+4	; 0x04
    414a:	9d 81       	ldd	r25, Y+5	; 0x05
    414c:	9b 83       	std	Y+3, r25	; 0x03
    414e:	8a 83       	std	Y+2, r24	; 0x02
	BaseType_t xReturn = pdFALSE;
    4150:	19 82       	std	Y+1, r1	; 0x01

		if( pxMutexHolder != NULL )
    4152:	8c 81       	ldd	r24, Y+4	; 0x04
    4154:	9d 81       	ldd	r25, Y+5	; 0x05
    4156:	00 97       	sbiw	r24, 0x00	; 0
    4158:	09 f4       	brne	.+2      	; 0x415c <xTaskPriorityDisinherit+0x26>
    415a:	56 c0       	rjmp	.+172    	; 0x4208 <xTaskPriorityDisinherit+0xd2>
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
    415c:	ea 81       	ldd	r30, Y+2	; 0x02
    415e:	fb 81       	ldd	r31, Y+3	; 0x03
    4160:	82 a1       	ldd	r24, Z+34	; 0x22
    4162:	81 50       	subi	r24, 0x01	; 1
    4164:	ea 81       	ldd	r30, Y+2	; 0x02
    4166:	fb 81       	ldd	r31, Y+3	; 0x03
    4168:	82 a3       	std	Z+34, r24	; 0x22

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    416a:	ea 81       	ldd	r30, Y+2	; 0x02
    416c:	fb 81       	ldd	r31, Y+3	; 0x03
    416e:	96 89       	ldd	r25, Z+22	; 0x16
    4170:	ea 81       	ldd	r30, Y+2	; 0x02
    4172:	fb 81       	ldd	r31, Y+3	; 0x03
    4174:	81 a1       	ldd	r24, Z+33	; 0x21
    4176:	98 17       	cp	r25, r24
    4178:	09 f4       	brne	.+2      	; 0x417c <xTaskPriorityDisinherit+0x46>
    417a:	46 c0       	rjmp	.+140    	; 0x4208 <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    417c:	ea 81       	ldd	r30, Y+2	; 0x02
    417e:	fb 81       	ldd	r31, Y+3	; 0x03
    4180:	82 a1       	ldd	r24, Z+34	; 0x22
    4182:	88 23       	and	r24, r24
    4184:	09 f0       	breq	.+2      	; 0x4188 <xTaskPriorityDisinherit+0x52>
    4186:	40 c0       	rjmp	.+128    	; 0x4208 <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4188:	8a 81       	ldd	r24, Y+2	; 0x02
    418a:	9b 81       	ldd	r25, Y+3	; 0x03
    418c:	02 96       	adiw	r24, 0x02	; 2
    418e:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
    4192:	ea 81       	ldd	r30, Y+2	; 0x02
    4194:	fb 81       	ldd	r31, Y+3	; 0x03
    4196:	81 a1       	ldd	r24, Z+33	; 0x21
    4198:	ea 81       	ldd	r30, Y+2	; 0x02
    419a:	fb 81       	ldd	r31, Y+3	; 0x03
    419c:	86 8b       	std	Z+22, r24	; 0x16

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    419e:	ea 81       	ldd	r30, Y+2	; 0x02
    41a0:	fb 81       	ldd	r31, Y+3	; 0x03
    41a2:	86 89       	ldd	r24, Z+22	; 0x16
    41a4:	28 2f       	mov	r18, r24
    41a6:	30 e0       	ldi	r19, 0x00	; 0
    41a8:	87 e0       	ldi	r24, 0x07	; 7
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	82 1b       	sub	r24, r18
    41ae:	93 0b       	sbc	r25, r19
    41b0:	ea 81       	ldd	r30, Y+2	; 0x02
    41b2:	fb 81       	ldd	r31, Y+3	; 0x03
    41b4:	95 87       	std	Z+13, r25	; 0x0d
    41b6:	84 87       	std	Z+12, r24	; 0x0c
					prvAddTaskToReadyList( pxTCB );
    41b8:	ea 81       	ldd	r30, Y+2	; 0x02
    41ba:	fb 81       	ldd	r31, Y+3	; 0x03
    41bc:	96 89       	ldd	r25, Z+22	; 0x16
    41be:	80 91 b9 04 	lds	r24, 0x04B9
    41c2:	89 17       	cp	r24, r25
    41c4:	28 f4       	brcc	.+10     	; 0x41d0 <xTaskPriorityDisinherit+0x9a>
    41c6:	ea 81       	ldd	r30, Y+2	; 0x02
    41c8:	fb 81       	ldd	r31, Y+3	; 0x03
    41ca:	86 89       	ldd	r24, Z+22	; 0x16
    41cc:	80 93 b9 04 	sts	0x04B9, r24
    41d0:	ea 81       	ldd	r30, Y+2	; 0x02
    41d2:	fb 81       	ldd	r31, Y+3	; 0x03
    41d4:	86 89       	ldd	r24, Z+22	; 0x16
    41d6:	28 2f       	mov	r18, r24
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	c9 01       	movw	r24, r18
    41dc:	88 0f       	add	r24, r24
    41de:	99 1f       	adc	r25, r25
    41e0:	88 0f       	add	r24, r24
    41e2:	99 1f       	adc	r25, r25
    41e4:	88 0f       	add	r24, r24
    41e6:	99 1f       	adc	r25, r25
    41e8:	82 0f       	add	r24, r18
    41ea:	93 1f       	adc	r25, r19
    41ec:	ac 01       	movw	r20, r24
    41ee:	4c 53       	subi	r20, 0x3C	; 60
    41f0:	5b 4f       	sbci	r21, 0xFB	; 251
    41f2:	8a 81       	ldd	r24, Y+2	; 0x02
    41f4:	9b 81       	ldd	r25, Y+3	; 0x03
    41f6:	9c 01       	movw	r18, r24
    41f8:	2e 5f       	subi	r18, 0xFE	; 254
    41fa:	3f 4f       	sbci	r19, 0xFF	; 255
    41fc:	ca 01       	movw	r24, r20
    41fe:	b9 01       	movw	r22, r18
    4200:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
    4204:	81 e0       	ldi	r24, 0x01	; 1
    4206:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
    4208:	89 81       	ldd	r24, Y+1	; 0x01
	}
    420a:	0f 90       	pop	r0
    420c:	0f 90       	pop	r0
    420e:	0f 90       	pop	r0
    4210:	0f 90       	pop	r0
    4212:	0f 90       	pop	r0
    4214:	cf 91       	pop	r28
    4216:	df 91       	pop	r29
    4218:	08 95       	ret

0000421a <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
    421a:	df 93       	push	r29
    421c:	cf 93       	push	r28
    421e:	00 d0       	rcall	.+0      	; 0x4220 <uxTaskResetEventItemValue+0x6>
    4220:	cd b7       	in	r28, 0x3d	; 61
    4222:	de b7       	in	r29, 0x3e	; 62
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
    4224:	e0 91 b3 04 	lds	r30, 0x04B3
    4228:	f0 91 b4 04 	lds	r31, 0x04B4
    422c:	84 85       	ldd	r24, Z+12	; 0x0c
    422e:	95 85       	ldd	r25, Z+13	; 0x0d
    4230:	9a 83       	std	Y+2, r25	; 0x02
    4232:	89 83       	std	Y+1, r24	; 0x01

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    4234:	a0 91 b3 04 	lds	r26, 0x04B3
    4238:	b0 91 b4 04 	lds	r27, 0x04B4
    423c:	e0 91 b3 04 	lds	r30, 0x04B3
    4240:	f0 91 b4 04 	lds	r31, 0x04B4
    4244:	86 89       	ldd	r24, Z+22	; 0x16
    4246:	28 2f       	mov	r18, r24
    4248:	30 e0       	ldi	r19, 0x00	; 0
    424a:	87 e0       	ldi	r24, 0x07	; 7
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	82 1b       	sub	r24, r18
    4250:	93 0b       	sbc	r25, r19
    4252:	1d 96       	adiw	r26, 0x0d	; 13
    4254:	9c 93       	st	X, r25
    4256:	8e 93       	st	-X, r24
    4258:	1c 97       	sbiw	r26, 0x0c	; 12

	return uxReturn;
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    425e:	0f 90       	pop	r0
    4260:	0f 90       	pop	r0
    4262:	cf 91       	pop	r28
    4264:	df 91       	pop	r29
    4266:	08 95       	ret

00004268 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
    4268:	df 93       	push	r29
    426a:	cf 93       	push	r28
    426c:	cd b7       	in	r28, 0x3d	; 61
    426e:	de b7       	in	r29, 0x3e	; 62
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    4270:	80 91 b3 04 	lds	r24, 0x04B3
    4274:	90 91 b4 04 	lds	r25, 0x04B4
    4278:	00 97       	sbiw	r24, 0x00	; 0
    427a:	39 f0       	breq	.+14     	; 0x428a <pvTaskIncrementMutexHeldCount+0x22>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    427c:	e0 91 b3 04 	lds	r30, 0x04B3
    4280:	f0 91 b4 04 	lds	r31, 0x04B4
    4284:	82 a1       	ldd	r24, Z+34	; 0x22
    4286:	8f 5f       	subi	r24, 0xFF	; 255
    4288:	82 a3       	std	Z+34, r24	; 0x22
		}

		return pxCurrentTCB;
    428a:	80 91 b3 04 	lds	r24, 0x04B3
    428e:	90 91 b4 04 	lds	r25, 0x04B4
	}
    4292:	cf 91       	pop	r28
    4294:	df 91       	pop	r29
    4296:	08 95       	ret

00004298 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
    4298:	df 93       	push	r29
    429a:	cf 93       	push	r28
    429c:	cd b7       	in	r28, 0x3d	; 61
    429e:	de b7       	in	r29, 0x3e	; 62
    42a0:	27 97       	sbiw	r28, 0x07	; 7
    42a2:	0f b6       	in	r0, 0x3f	; 63
    42a4:	f8 94       	cli
    42a6:	de bf       	out	0x3e, r29	; 62
    42a8:	0f be       	out	0x3f, r0	; 63
    42aa:	cd bf       	out	0x3d, r28	; 61
    42ac:	8d 83       	std	Y+5, r24	; 0x05
    42ae:	7f 83       	std	Y+7, r23	; 0x07
    42b0:	6e 83       	std	Y+6, r22	; 0x06
	uint32_t ulReturn;

		taskENTER_CRITICAL();
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	f8 94       	cli
    42b6:	0f 92       	push	r0
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
    42b8:	e0 91 b3 04 	lds	r30, 0x04B3
    42bc:	f0 91 b4 04 	lds	r31, 0x04B4
    42c0:	83 a1       	ldd	r24, Z+35	; 0x23
    42c2:	94 a1       	ldd	r25, Z+36	; 0x24
    42c4:	a5 a1       	ldd	r26, Z+37	; 0x25
    42c6:	b6 a1       	ldd	r27, Z+38	; 0x26
    42c8:	00 97       	sbiw	r24, 0x00	; 0
    42ca:	a1 05       	cpc	r26, r1
    42cc:	b1 05       	cpc	r27, r1
    42ce:	89 f4       	brne	.+34     	; 0x42f2 <ulTaskNotifyTake+0x5a>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    42d0:	e0 91 b3 04 	lds	r30, 0x04B3
    42d4:	f0 91 b4 04 	lds	r31, 0x04B4
    42d8:	81 e0       	ldi	r24, 0x01	; 1
    42da:	87 a3       	std	Z+39, r24	; 0x27

				if( xTicksToWait > ( TickType_t ) 0 )
    42dc:	8e 81       	ldd	r24, Y+6	; 0x06
    42de:	9f 81       	ldd	r25, Y+7	; 0x07
    42e0:	00 97       	sbiw	r24, 0x00	; 0
    42e2:	39 f0       	breq	.+14     	; 0x42f2 <ulTaskNotifyTake+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    42e4:	8e 81       	ldd	r24, Y+6	; 0x06
    42e6:	9f 81       	ldd	r25, Y+7	; 0x07
    42e8:	61 e0       	ldi	r22, 0x01	; 1
    42ea:	0e 94 f6 24 	call	0x49ec	; 0x49ec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    42ee:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    42f2:	0f 90       	pop	r0
    42f4:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    42f6:	0f b6       	in	r0, 0x3f	; 63
    42f8:	f8 94       	cli
    42fa:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
    42fc:	e0 91 b3 04 	lds	r30, 0x04B3
    4300:	f0 91 b4 04 	lds	r31, 0x04B4
    4304:	83 a1       	ldd	r24, Z+35	; 0x23
    4306:	94 a1       	ldd	r25, Z+36	; 0x24
    4308:	a5 a1       	ldd	r26, Z+37	; 0x25
    430a:	b6 a1       	ldd	r27, Z+38	; 0x26
    430c:	89 83       	std	Y+1, r24	; 0x01
    430e:	9a 83       	std	Y+2, r25	; 0x02
    4310:	ab 83       	std	Y+3, r26	; 0x03
    4312:	bc 83       	std	Y+4, r27	; 0x04

			if( ulReturn != 0UL )
    4314:	89 81       	ldd	r24, Y+1	; 0x01
    4316:	9a 81       	ldd	r25, Y+2	; 0x02
    4318:	ab 81       	ldd	r26, Y+3	; 0x03
    431a:	bc 81       	ldd	r27, Y+4	; 0x04
    431c:	00 97       	sbiw	r24, 0x00	; 0
    431e:	a1 05       	cpc	r26, r1
    4320:	b1 05       	cpc	r27, r1
    4322:	d9 f0       	breq	.+54     	; 0x435a <ulTaskNotifyTake+0xc2>
			{
				if( xClearCountOnExit != pdFALSE )
    4324:	8d 81       	ldd	r24, Y+5	; 0x05
    4326:	88 23       	and	r24, r24
    4328:	49 f0       	breq	.+18     	; 0x433c <ulTaskNotifyTake+0xa4>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
    432a:	e0 91 b3 04 	lds	r30, 0x04B3
    432e:	f0 91 b4 04 	lds	r31, 0x04B4
    4332:	13 a2       	std	Z+35, r1	; 0x23
    4334:	14 a2       	std	Z+36, r1	; 0x24
    4336:	15 a2       	std	Z+37, r1	; 0x25
    4338:	16 a2       	std	Z+38, r1	; 0x26
    433a:	0f c0       	rjmp	.+30     	; 0x435a <ulTaskNotifyTake+0xc2>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
    433c:	e0 91 b3 04 	lds	r30, 0x04B3
    4340:	f0 91 b4 04 	lds	r31, 0x04B4
    4344:	89 81       	ldd	r24, Y+1	; 0x01
    4346:	9a 81       	ldd	r25, Y+2	; 0x02
    4348:	ab 81       	ldd	r26, Y+3	; 0x03
    434a:	bc 81       	ldd	r27, Y+4	; 0x04
    434c:	01 97       	sbiw	r24, 0x01	; 1
    434e:	a1 09       	sbc	r26, r1
    4350:	b1 09       	sbc	r27, r1
    4352:	83 a3       	std	Z+35, r24	; 0x23
    4354:	94 a3       	std	Z+36, r25	; 0x24
    4356:	a5 a3       	std	Z+37, r26	; 0x25
    4358:	b6 a3       	std	Z+38, r27	; 0x26
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    435a:	e0 91 b3 04 	lds	r30, 0x04B3
    435e:	f0 91 b4 04 	lds	r31, 0x04B4
    4362:	17 a2       	std	Z+39, r1	; 0x27
		}
		taskEXIT_CRITICAL();
    4364:	0f 90       	pop	r0
    4366:	0f be       	out	0x3f, r0	; 63

		return ulReturn;
    4368:	89 81       	ldd	r24, Y+1	; 0x01
    436a:	9a 81       	ldd	r25, Y+2	; 0x02
    436c:	ab 81       	ldd	r26, Y+3	; 0x03
    436e:	bc 81       	ldd	r27, Y+4	; 0x04
	}
    4370:	bc 01       	movw	r22, r24
    4372:	cd 01       	movw	r24, r26
    4374:	27 96       	adiw	r28, 0x07	; 7
    4376:	0f b6       	in	r0, 0x3f	; 63
    4378:	f8 94       	cli
    437a:	de bf       	out	0x3e, r29	; 62
    437c:	0f be       	out	0x3f, r0	; 63
    437e:	cd bf       	out	0x3d, r28	; 61
    4380:	cf 91       	pop	r28
    4382:	df 91       	pop	r29
    4384:	08 95       	ret

00004386 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
    4386:	ef 92       	push	r14
    4388:	ff 92       	push	r15
    438a:	0f 93       	push	r16
    438c:	1f 93       	push	r17
    438e:	df 93       	push	r29
    4390:	cf 93       	push	r28
    4392:	cd b7       	in	r28, 0x3d	; 61
    4394:	de b7       	in	r29, 0x3e	; 62
    4396:	2d 97       	sbiw	r28, 0x0d	; 13
    4398:	0f b6       	in	r0, 0x3f	; 63
    439a:	f8 94       	cli
    439c:	de bf       	out	0x3e, r29	; 62
    439e:	0f be       	out	0x3f, r0	; 63
    43a0:	cd bf       	out	0x3d, r28	; 61
    43a2:	6a 83       	std	Y+2, r22	; 0x02
    43a4:	7b 83       	std	Y+3, r23	; 0x03
    43a6:	8c 83       	std	Y+4, r24	; 0x04
    43a8:	9d 83       	std	Y+5, r25	; 0x05
    43aa:	2e 83       	std	Y+6, r18	; 0x06
    43ac:	3f 83       	std	Y+7, r19	; 0x07
    43ae:	48 87       	std	Y+8, r20	; 0x08
    43b0:	59 87       	std	Y+9, r21	; 0x09
    43b2:	1b 87       	std	Y+11, r17	; 0x0b
    43b4:	0a 87       	std	Y+10, r16	; 0x0a
    43b6:	fd 86       	std	Y+13, r15	; 0x0d
    43b8:	ec 86       	std	Y+12, r14	; 0x0c
	BaseType_t xReturn;

		taskENTER_CRITICAL();
    43ba:	0f b6       	in	r0, 0x3f	; 63
    43bc:	f8 94       	cli
    43be:	0f 92       	push	r0
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
    43c0:	e0 91 b3 04 	lds	r30, 0x04B3
    43c4:	f0 91 b4 04 	lds	r31, 0x04B4
    43c8:	87 a1       	ldd	r24, Z+39	; 0x27
    43ca:	82 30       	cpi	r24, 0x02	; 2
    43cc:	49 f1       	breq	.+82     	; 0x4420 <xTaskNotifyWait+0x9a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
    43ce:	e0 91 b3 04 	lds	r30, 0x04B3
    43d2:	f0 91 b4 04 	lds	r31, 0x04B4
    43d6:	23 a1       	ldd	r18, Z+35	; 0x23
    43d8:	34 a1       	ldd	r19, Z+36	; 0x24
    43da:	45 a1       	ldd	r20, Z+37	; 0x25
    43dc:	56 a1       	ldd	r21, Z+38	; 0x26
    43de:	8a 81       	ldd	r24, Y+2	; 0x02
    43e0:	9b 81       	ldd	r25, Y+3	; 0x03
    43e2:	ac 81       	ldd	r26, Y+4	; 0x04
    43e4:	bd 81       	ldd	r27, Y+5	; 0x05
    43e6:	80 95       	com	r24
    43e8:	90 95       	com	r25
    43ea:	a0 95       	com	r26
    43ec:	b0 95       	com	r27
    43ee:	82 23       	and	r24, r18
    43f0:	93 23       	and	r25, r19
    43f2:	a4 23       	and	r26, r20
    43f4:	b5 23       	and	r27, r21
    43f6:	83 a3       	std	Z+35, r24	; 0x23
    43f8:	94 a3       	std	Z+36, r25	; 0x24
    43fa:	a5 a3       	std	Z+37, r26	; 0x25
    43fc:	b6 a3       	std	Z+38, r27	; 0x26

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
    43fe:	e0 91 b3 04 	lds	r30, 0x04B3
    4402:	f0 91 b4 04 	lds	r31, 0x04B4
    4406:	81 e0       	ldi	r24, 0x01	; 1
    4408:	87 a3       	std	Z+39, r24	; 0x27

				if( xTicksToWait > ( TickType_t ) 0 )
    440a:	8c 85       	ldd	r24, Y+12	; 0x0c
    440c:	9d 85       	ldd	r25, Y+13	; 0x0d
    440e:	00 97       	sbiw	r24, 0x00	; 0
    4410:	39 f0       	breq	.+14     	; 0x4420 <xTaskNotifyWait+0x9a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
    4412:	8c 85       	ldd	r24, Y+12	; 0x0c
    4414:	9d 85       	ldd	r25, Y+13	; 0x0d
    4416:	61 e0       	ldi	r22, 0x01	; 1
    4418:	0e 94 f6 24 	call	0x49ec	; 0x49ec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
    441c:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    4420:	0f 90       	pop	r0
    4422:	0f be       	out	0x3f, r0	; 63

		taskENTER_CRITICAL();
    4424:	0f b6       	in	r0, 0x3f	; 63
    4426:	f8 94       	cli
    4428:	0f 92       	push	r0
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
    442a:	8a 85       	ldd	r24, Y+10	; 0x0a
    442c:	9b 85       	ldd	r25, Y+11	; 0x0b
    442e:	00 97       	sbiw	r24, 0x00	; 0
    4430:	71 f0       	breq	.+28     	; 0x444e <xTaskNotifyWait+0xc8>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
    4432:	e0 91 b3 04 	lds	r30, 0x04B3
    4436:	f0 91 b4 04 	lds	r31, 0x04B4
    443a:	83 a1       	ldd	r24, Z+35	; 0x23
    443c:	94 a1       	ldd	r25, Z+36	; 0x24
    443e:	a5 a1       	ldd	r26, Z+37	; 0x25
    4440:	b6 a1       	ldd	r27, Z+38	; 0x26
    4442:	ea 85       	ldd	r30, Y+10	; 0x0a
    4444:	fb 85       	ldd	r31, Y+11	; 0x0b
    4446:	80 83       	st	Z, r24
    4448:	91 83       	std	Z+1, r25	; 0x01
    444a:	a2 83       	std	Z+2, r26	; 0x02
    444c:	b3 83       	std	Z+3, r27	; 0x03

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
    444e:	e0 91 b3 04 	lds	r30, 0x04B3
    4452:	f0 91 b4 04 	lds	r31, 0x04B4
    4456:	87 a1       	ldd	r24, Z+39	; 0x27
    4458:	81 30       	cpi	r24, 0x01	; 1
    445a:	11 f4       	brne	.+4      	; 0x4460 <xTaskNotifyWait+0xda>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
    445c:	19 82       	std	Y+1, r1	; 0x01
    445e:	1a c0       	rjmp	.+52     	; 0x4494 <xTaskNotifyWait+0x10e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
    4460:	e0 91 b3 04 	lds	r30, 0x04B3
    4464:	f0 91 b4 04 	lds	r31, 0x04B4
    4468:	23 a1       	ldd	r18, Z+35	; 0x23
    446a:	34 a1       	ldd	r19, Z+36	; 0x24
    446c:	45 a1       	ldd	r20, Z+37	; 0x25
    446e:	56 a1       	ldd	r21, Z+38	; 0x26
    4470:	8e 81       	ldd	r24, Y+6	; 0x06
    4472:	9f 81       	ldd	r25, Y+7	; 0x07
    4474:	a8 85       	ldd	r26, Y+8	; 0x08
    4476:	b9 85       	ldd	r27, Y+9	; 0x09
    4478:	80 95       	com	r24
    447a:	90 95       	com	r25
    447c:	a0 95       	com	r26
    447e:	b0 95       	com	r27
    4480:	82 23       	and	r24, r18
    4482:	93 23       	and	r25, r19
    4484:	a4 23       	and	r26, r20
    4486:	b5 23       	and	r27, r21
    4488:	83 a3       	std	Z+35, r24	; 0x23
    448a:	94 a3       	std	Z+36, r25	; 0x24
    448c:	a5 a3       	std	Z+37, r26	; 0x25
    448e:	b6 a3       	std	Z+38, r27	; 0x26
				xReturn = pdTRUE;
    4490:	81 e0       	ldi	r24, 0x01	; 1
    4492:	89 83       	std	Y+1, r24	; 0x01
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    4494:	e0 91 b3 04 	lds	r30, 0x04B3
    4498:	f0 91 b4 04 	lds	r31, 0x04B4
    449c:	17 a2       	std	Z+39, r1	; 0x27
		}
		taskEXIT_CRITICAL();
    449e:	0f 90       	pop	r0
    44a0:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    44a2:	89 81       	ldd	r24, Y+1	; 0x01
	}
    44a4:	2d 96       	adiw	r28, 0x0d	; 13
    44a6:	0f b6       	in	r0, 0x3f	; 63
    44a8:	f8 94       	cli
    44aa:	de bf       	out	0x3e, r29	; 62
    44ac:	0f be       	out	0x3f, r0	; 63
    44ae:	cd bf       	out	0x3d, r28	; 61
    44b0:	cf 91       	pop	r28
    44b2:	df 91       	pop	r29
    44b4:	1f 91       	pop	r17
    44b6:	0f 91       	pop	r16
    44b8:	ff 90       	pop	r15
    44ba:	ef 90       	pop	r14
    44bc:	08 95       	ret

000044be <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
    44be:	0f 93       	push	r16
    44c0:	1f 93       	push	r17
    44c2:	df 93       	push	r29
    44c4:	cf 93       	push	r28
    44c6:	cd b7       	in	r28, 0x3d	; 61
    44c8:	de b7       	in	r29, 0x3e	; 62
    44ca:	2f 97       	sbiw	r28, 0x0f	; 15
    44cc:	0f b6       	in	r0, 0x3f	; 63
    44ce:	f8 94       	cli
    44d0:	de bf       	out	0x3e, r29	; 62
    44d2:	0f be       	out	0x3f, r0	; 63
    44d4:	cd bf       	out	0x3d, r28	; 61
    44d6:	9e 83       	std	Y+6, r25	; 0x06
    44d8:	8d 83       	std	Y+5, r24	; 0x05
    44da:	4f 83       	std	Y+7, r20	; 0x07
    44dc:	58 87       	std	Y+8, r21	; 0x08
    44de:	69 87       	std	Y+9, r22	; 0x09
    44e0:	7a 87       	std	Y+10, r23	; 0x0a
    44e2:	2b 87       	std	Y+11, r18	; 0x0b
    44e4:	1d 87       	std	Y+13, r17	; 0x0d
    44e6:	0c 87       	std	Y+12, r16	; 0x0c
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
    44e8:	81 e0       	ldi	r24, 0x01	; 1
    44ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
		pxTCB = ( TCB_t * ) xTaskToNotify;
    44ec:	8d 81       	ldd	r24, Y+5	; 0x05
    44ee:	9e 81       	ldd	r25, Y+6	; 0x06
    44f0:	9c 83       	std	Y+4, r25	; 0x04
    44f2:	8b 83       	std	Y+3, r24	; 0x03

		taskENTER_CRITICAL();
    44f4:	0f b6       	in	r0, 0x3f	; 63
    44f6:	f8 94       	cli
    44f8:	0f 92       	push	r0
		{
			if( pulPreviousNotificationValue != NULL )
    44fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    44fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    44fe:	00 97       	sbiw	r24, 0x00	; 0
    4500:	61 f0       	breq	.+24     	; 0x451a <xTaskGenericNotify+0x5c>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    4502:	eb 81       	ldd	r30, Y+3	; 0x03
    4504:	fc 81       	ldd	r31, Y+4	; 0x04
    4506:	83 a1       	ldd	r24, Z+35	; 0x23
    4508:	94 a1       	ldd	r25, Z+36	; 0x24
    450a:	a5 a1       	ldd	r26, Z+37	; 0x25
    450c:	b6 a1       	ldd	r27, Z+38	; 0x26
    450e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4510:	fd 85       	ldd	r31, Y+13	; 0x0d
    4512:	80 83       	st	Z, r24
    4514:	91 83       	std	Z+1, r25	; 0x01
    4516:	a2 83       	std	Z+2, r26	; 0x02
    4518:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    451a:	eb 81       	ldd	r30, Y+3	; 0x03
    451c:	fc 81       	ldd	r31, Y+4	; 0x04
    451e:	87 a1       	ldd	r24, Z+39	; 0x27
    4520:	89 83       	std	Y+1, r24	; 0x01

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    4522:	eb 81       	ldd	r30, Y+3	; 0x03
    4524:	fc 81       	ldd	r31, Y+4	; 0x04
    4526:	82 e0       	ldi	r24, 0x02	; 2
    4528:	87 a3       	std	Z+39, r24	; 0x27

			switch( eAction )
    452a:	8b 85       	ldd	r24, Y+11	; 0x0b
    452c:	28 2f       	mov	r18, r24
    452e:	30 e0       	ldi	r19, 0x00	; 0
    4530:	3f 87       	std	Y+15, r19	; 0x0f
    4532:	2e 87       	std	Y+14, r18	; 0x0e
    4534:	8e 85       	ldd	r24, Y+14	; 0x0e
    4536:	9f 85       	ldd	r25, Y+15	; 0x0f
    4538:	82 30       	cpi	r24, 0x02	; 2
    453a:	91 05       	cpc	r25, r1
    453c:	59 f1       	breq	.+86     	; 0x4594 <xTaskGenericNotify+0xd6>
    453e:	2e 85       	ldd	r18, Y+14	; 0x0e
    4540:	3f 85       	ldd	r19, Y+15	; 0x0f
    4542:	23 30       	cpi	r18, 0x03	; 3
    4544:	31 05       	cpc	r19, r1
    4546:	34 f4       	brge	.+12     	; 0x4554 <xTaskGenericNotify+0x96>
    4548:	8e 85       	ldd	r24, Y+14	; 0x0e
    454a:	9f 85       	ldd	r25, Y+15	; 0x0f
    454c:	81 30       	cpi	r24, 0x01	; 1
    454e:	91 05       	cpc	r25, r1
    4550:	61 f0       	breq	.+24     	; 0x456a <xTaskGenericNotify+0xac>
    4552:	4a c0       	rjmp	.+148    	; 0x45e8 <xTaskGenericNotify+0x12a>
    4554:	2e 85       	ldd	r18, Y+14	; 0x0e
    4556:	3f 85       	ldd	r19, Y+15	; 0x0f
    4558:	23 30       	cpi	r18, 0x03	; 3
    455a:	31 05       	cpc	r19, r1
    455c:	59 f1       	breq	.+86     	; 0x45b4 <xTaskGenericNotify+0xf6>
    455e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4560:	9f 85       	ldd	r25, Y+15	; 0x0f
    4562:	84 30       	cpi	r24, 0x04	; 4
    4564:	91 05       	cpc	r25, r1
    4566:	89 f1       	breq	.+98     	; 0x45ca <xTaskGenericNotify+0x10c>
    4568:	3f c0       	rjmp	.+126    	; 0x45e8 <xTaskGenericNotify+0x12a>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    456a:	eb 81       	ldd	r30, Y+3	; 0x03
    456c:	fc 81       	ldd	r31, Y+4	; 0x04
    456e:	23 a1       	ldd	r18, Z+35	; 0x23
    4570:	34 a1       	ldd	r19, Z+36	; 0x24
    4572:	45 a1       	ldd	r20, Z+37	; 0x25
    4574:	56 a1       	ldd	r21, Z+38	; 0x26
    4576:	8f 81       	ldd	r24, Y+7	; 0x07
    4578:	98 85       	ldd	r25, Y+8	; 0x08
    457a:	a9 85       	ldd	r26, Y+9	; 0x09
    457c:	ba 85       	ldd	r27, Y+10	; 0x0a
    457e:	82 2b       	or	r24, r18
    4580:	93 2b       	or	r25, r19
    4582:	a4 2b       	or	r26, r20
    4584:	b5 2b       	or	r27, r21
    4586:	eb 81       	ldd	r30, Y+3	; 0x03
    4588:	fc 81       	ldd	r31, Y+4	; 0x04
    458a:	83 a3       	std	Z+35, r24	; 0x23
    458c:	94 a3       	std	Z+36, r25	; 0x24
    458e:	a5 a3       	std	Z+37, r26	; 0x25
    4590:	b6 a3       	std	Z+38, r27	; 0x26
    4592:	2a c0       	rjmp	.+84     	; 0x45e8 <xTaskGenericNotify+0x12a>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    4594:	eb 81       	ldd	r30, Y+3	; 0x03
    4596:	fc 81       	ldd	r31, Y+4	; 0x04
    4598:	83 a1       	ldd	r24, Z+35	; 0x23
    459a:	94 a1       	ldd	r25, Z+36	; 0x24
    459c:	a5 a1       	ldd	r26, Z+37	; 0x25
    459e:	b6 a1       	ldd	r27, Z+38	; 0x26
    45a0:	01 96       	adiw	r24, 0x01	; 1
    45a2:	a1 1d       	adc	r26, r1
    45a4:	b1 1d       	adc	r27, r1
    45a6:	eb 81       	ldd	r30, Y+3	; 0x03
    45a8:	fc 81       	ldd	r31, Y+4	; 0x04
    45aa:	83 a3       	std	Z+35, r24	; 0x23
    45ac:	94 a3       	std	Z+36, r25	; 0x24
    45ae:	a5 a3       	std	Z+37, r26	; 0x25
    45b0:	b6 a3       	std	Z+38, r27	; 0x26
    45b2:	1a c0       	rjmp	.+52     	; 0x45e8 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    45b4:	eb 81       	ldd	r30, Y+3	; 0x03
    45b6:	fc 81       	ldd	r31, Y+4	; 0x04
    45b8:	8f 81       	ldd	r24, Y+7	; 0x07
    45ba:	98 85       	ldd	r25, Y+8	; 0x08
    45bc:	a9 85       	ldd	r26, Y+9	; 0x09
    45be:	ba 85       	ldd	r27, Y+10	; 0x0a
    45c0:	83 a3       	std	Z+35, r24	; 0x23
    45c2:	94 a3       	std	Z+36, r25	; 0x24
    45c4:	a5 a3       	std	Z+37, r26	; 0x25
    45c6:	b6 a3       	std	Z+38, r27	; 0x26
    45c8:	0f c0       	rjmp	.+30     	; 0x45e8 <xTaskGenericNotify+0x12a>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    45ca:	89 81       	ldd	r24, Y+1	; 0x01
    45cc:	82 30       	cpi	r24, 0x02	; 2
    45ce:	59 f0       	breq	.+22     	; 0x45e6 <xTaskGenericNotify+0x128>
					{
						pxTCB->ulNotifiedValue = ulValue;
    45d0:	eb 81       	ldd	r30, Y+3	; 0x03
    45d2:	fc 81       	ldd	r31, Y+4	; 0x04
    45d4:	8f 81       	ldd	r24, Y+7	; 0x07
    45d6:	98 85       	ldd	r25, Y+8	; 0x08
    45d8:	a9 85       	ldd	r26, Y+9	; 0x09
    45da:	ba 85       	ldd	r27, Y+10	; 0x0a
    45dc:	83 a3       	std	Z+35, r24	; 0x23
    45de:	94 a3       	std	Z+36, r25	; 0x24
    45e0:	a5 a3       	std	Z+37, r26	; 0x25
    45e2:	b6 a3       	std	Z+38, r27	; 0x26
    45e4:	01 c0       	rjmp	.+2      	; 0x45e8 <xTaskGenericNotify+0x12a>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    45e6:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    45e8:	89 81       	ldd	r24, Y+1	; 0x01
    45ea:	81 30       	cpi	r24, 0x01	; 1
    45ec:	b9 f5       	brne	.+110    	; 0x465c <xTaskGenericNotify+0x19e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    45ee:	8b 81       	ldd	r24, Y+3	; 0x03
    45f0:	9c 81       	ldd	r25, Y+4	; 0x04
    45f2:	02 96       	adiw	r24, 0x02	; 2
    45f4:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
    45f8:	eb 81       	ldd	r30, Y+3	; 0x03
    45fa:	fc 81       	ldd	r31, Y+4	; 0x04
    45fc:	96 89       	ldd	r25, Z+22	; 0x16
    45fe:	80 91 b9 04 	lds	r24, 0x04B9
    4602:	89 17       	cp	r24, r25
    4604:	28 f4       	brcc	.+10     	; 0x4610 <xTaskGenericNotify+0x152>
    4606:	eb 81       	ldd	r30, Y+3	; 0x03
    4608:	fc 81       	ldd	r31, Y+4	; 0x04
    460a:	86 89       	ldd	r24, Z+22	; 0x16
    460c:	80 93 b9 04 	sts	0x04B9, r24
    4610:	eb 81       	ldd	r30, Y+3	; 0x03
    4612:	fc 81       	ldd	r31, Y+4	; 0x04
    4614:	86 89       	ldd	r24, Z+22	; 0x16
    4616:	28 2f       	mov	r18, r24
    4618:	30 e0       	ldi	r19, 0x00	; 0
    461a:	c9 01       	movw	r24, r18
    461c:	88 0f       	add	r24, r24
    461e:	99 1f       	adc	r25, r25
    4620:	88 0f       	add	r24, r24
    4622:	99 1f       	adc	r25, r25
    4624:	88 0f       	add	r24, r24
    4626:	99 1f       	adc	r25, r25
    4628:	82 0f       	add	r24, r18
    462a:	93 1f       	adc	r25, r19
    462c:	ac 01       	movw	r20, r24
    462e:	4c 53       	subi	r20, 0x3C	; 60
    4630:	5b 4f       	sbci	r21, 0xFB	; 251
    4632:	8b 81       	ldd	r24, Y+3	; 0x03
    4634:	9c 81       	ldd	r25, Y+4	; 0x04
    4636:	9c 01       	movw	r18, r24
    4638:	2e 5f       	subi	r18, 0xFE	; 254
    463a:	3f 4f       	sbci	r19, 0xFF	; 255
    463c:	ca 01       	movw	r24, r20
    463e:	b9 01       	movw	r22, r18
    4640:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4644:	eb 81       	ldd	r30, Y+3	; 0x03
    4646:	fc 81       	ldd	r31, Y+4	; 0x04
    4648:	96 89       	ldd	r25, Z+22	; 0x16
    464a:	e0 91 b3 04 	lds	r30, 0x04B3
    464e:	f0 91 b4 04 	lds	r31, 0x04B4
    4652:	86 89       	ldd	r24, Z+22	; 0x16
    4654:	89 17       	cp	r24, r25
    4656:	10 f4       	brcc	.+4      	; 0x465c <xTaskGenericNotify+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
    4658:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
    465c:	0f 90       	pop	r0
    465e:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    4660:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    4662:	2f 96       	adiw	r28, 0x0f	; 15
    4664:	0f b6       	in	r0, 0x3f	; 63
    4666:	f8 94       	cli
    4668:	de bf       	out	0x3e, r29	; 62
    466a:	0f be       	out	0x3f, r0	; 63
    466c:	cd bf       	out	0x3d, r28	; 61
    466e:	cf 91       	pop	r28
    4670:	df 91       	pop	r29
    4672:	1f 91       	pop	r17
    4674:	0f 91       	pop	r16
    4676:	08 95       	ret

00004678 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
    4678:	ef 92       	push	r14
    467a:	ff 92       	push	r15
    467c:	0f 93       	push	r16
    467e:	1f 93       	push	r17
    4680:	df 93       	push	r29
    4682:	cf 93       	push	r28
    4684:	cd b7       	in	r28, 0x3d	; 61
    4686:	de b7       	in	r29, 0x3e	; 62
    4688:	62 97       	sbiw	r28, 0x12	; 18
    468a:	0f b6       	in	r0, 0x3f	; 63
    468c:	f8 94       	cli
    468e:	de bf       	out	0x3e, r29	; 62
    4690:	0f be       	out	0x3f, r0	; 63
    4692:	cd bf       	out	0x3d, r28	; 61
    4694:	9f 83       	std	Y+7, r25	; 0x07
    4696:	8e 83       	std	Y+6, r24	; 0x06
    4698:	48 87       	std	Y+8, r20	; 0x08
    469a:	59 87       	std	Y+9, r21	; 0x09
    469c:	6a 87       	std	Y+10, r22	; 0x0a
    469e:	7b 87       	std	Y+11, r23	; 0x0b
    46a0:	2c 87       	std	Y+12, r18	; 0x0c
    46a2:	1e 87       	std	Y+14, r17	; 0x0e
    46a4:	0d 87       	std	Y+13, r16	; 0x0d
    46a6:	f8 8a       	std	Y+16, r15	; 0x10
    46a8:	ef 86       	std	Y+15, r14	; 0x0f
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
    46aa:	81 e0       	ldi	r24, 0x01	; 1
    46ac:	8a 83       	std	Y+2, r24	; 0x02
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    46ae:	8e 81       	ldd	r24, Y+6	; 0x06
    46b0:	9f 81       	ldd	r25, Y+7	; 0x07
    46b2:	9d 83       	std	Y+5, r25	; 0x05
    46b4:	8c 83       	std	Y+4, r24	; 0x04

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    46b6:	19 82       	std	Y+1, r1	; 0x01
		{
			if( pulPreviousNotificationValue != NULL )
    46b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    46bc:	00 97       	sbiw	r24, 0x00	; 0
    46be:	61 f0       	breq	.+24     	; 0x46d8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
    46c0:	ec 81       	ldd	r30, Y+4	; 0x04
    46c2:	fd 81       	ldd	r31, Y+5	; 0x05
    46c4:	83 a1       	ldd	r24, Z+35	; 0x23
    46c6:	94 a1       	ldd	r25, Z+36	; 0x24
    46c8:	a5 a1       	ldd	r26, Z+37	; 0x25
    46ca:	b6 a1       	ldd	r27, Z+38	; 0x26
    46cc:	ed 85       	ldd	r30, Y+13	; 0x0d
    46ce:	fe 85       	ldd	r31, Y+14	; 0x0e
    46d0:	80 83       	st	Z, r24
    46d2:	91 83       	std	Z+1, r25	; 0x01
    46d4:	a2 83       	std	Z+2, r26	; 0x02
    46d6:	b3 83       	std	Z+3, r27	; 0x03
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
    46d8:	ec 81       	ldd	r30, Y+4	; 0x04
    46da:	fd 81       	ldd	r31, Y+5	; 0x05
    46dc:	87 a1       	ldd	r24, Z+39	; 0x27
    46de:	8b 83       	std	Y+3, r24	; 0x03
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    46e0:	ec 81       	ldd	r30, Y+4	; 0x04
    46e2:	fd 81       	ldd	r31, Y+5	; 0x05
    46e4:	82 e0       	ldi	r24, 0x02	; 2
    46e6:	87 a3       	std	Z+39, r24	; 0x27

			switch( eAction )
    46e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    46ea:	28 2f       	mov	r18, r24
    46ec:	30 e0       	ldi	r19, 0x00	; 0
    46ee:	3a 8b       	std	Y+18, r19	; 0x12
    46f0:	29 8b       	std	Y+17, r18	; 0x11
    46f2:	89 89       	ldd	r24, Y+17	; 0x11
    46f4:	9a 89       	ldd	r25, Y+18	; 0x12
    46f6:	82 30       	cpi	r24, 0x02	; 2
    46f8:	91 05       	cpc	r25, r1
    46fa:	59 f1       	breq	.+86     	; 0x4752 <xTaskGenericNotifyFromISR+0xda>
    46fc:	29 89       	ldd	r18, Y+17	; 0x11
    46fe:	3a 89       	ldd	r19, Y+18	; 0x12
    4700:	23 30       	cpi	r18, 0x03	; 3
    4702:	31 05       	cpc	r19, r1
    4704:	34 f4       	brge	.+12     	; 0x4712 <xTaskGenericNotifyFromISR+0x9a>
    4706:	89 89       	ldd	r24, Y+17	; 0x11
    4708:	9a 89       	ldd	r25, Y+18	; 0x12
    470a:	81 30       	cpi	r24, 0x01	; 1
    470c:	91 05       	cpc	r25, r1
    470e:	61 f0       	breq	.+24     	; 0x4728 <xTaskGenericNotifyFromISR+0xb0>
    4710:	4a c0       	rjmp	.+148    	; 0x47a6 <xTaskGenericNotifyFromISR+0x12e>
    4712:	29 89       	ldd	r18, Y+17	; 0x11
    4714:	3a 89       	ldd	r19, Y+18	; 0x12
    4716:	23 30       	cpi	r18, 0x03	; 3
    4718:	31 05       	cpc	r19, r1
    471a:	59 f1       	breq	.+86     	; 0x4772 <xTaskGenericNotifyFromISR+0xfa>
    471c:	89 89       	ldd	r24, Y+17	; 0x11
    471e:	9a 89       	ldd	r25, Y+18	; 0x12
    4720:	84 30       	cpi	r24, 0x04	; 4
    4722:	91 05       	cpc	r25, r1
    4724:	89 f1       	breq	.+98     	; 0x4788 <xTaskGenericNotifyFromISR+0x110>
    4726:	3f c0       	rjmp	.+126    	; 0x47a6 <xTaskGenericNotifyFromISR+0x12e>
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
    4728:	ec 81       	ldd	r30, Y+4	; 0x04
    472a:	fd 81       	ldd	r31, Y+5	; 0x05
    472c:	23 a1       	ldd	r18, Z+35	; 0x23
    472e:	34 a1       	ldd	r19, Z+36	; 0x24
    4730:	45 a1       	ldd	r20, Z+37	; 0x25
    4732:	56 a1       	ldd	r21, Z+38	; 0x26
    4734:	88 85       	ldd	r24, Y+8	; 0x08
    4736:	99 85       	ldd	r25, Y+9	; 0x09
    4738:	aa 85       	ldd	r26, Y+10	; 0x0a
    473a:	bb 85       	ldd	r27, Y+11	; 0x0b
    473c:	82 2b       	or	r24, r18
    473e:	93 2b       	or	r25, r19
    4740:	a4 2b       	or	r26, r20
    4742:	b5 2b       	or	r27, r21
    4744:	ec 81       	ldd	r30, Y+4	; 0x04
    4746:	fd 81       	ldd	r31, Y+5	; 0x05
    4748:	83 a3       	std	Z+35, r24	; 0x23
    474a:	94 a3       	std	Z+36, r25	; 0x24
    474c:	a5 a3       	std	Z+37, r26	; 0x25
    474e:	b6 a3       	std	Z+38, r27	; 0x26
    4750:	2a c0       	rjmp	.+84     	; 0x47a6 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
    4752:	ec 81       	ldd	r30, Y+4	; 0x04
    4754:	fd 81       	ldd	r31, Y+5	; 0x05
    4756:	83 a1       	ldd	r24, Z+35	; 0x23
    4758:	94 a1       	ldd	r25, Z+36	; 0x24
    475a:	a5 a1       	ldd	r26, Z+37	; 0x25
    475c:	b6 a1       	ldd	r27, Z+38	; 0x26
    475e:	01 96       	adiw	r24, 0x01	; 1
    4760:	a1 1d       	adc	r26, r1
    4762:	b1 1d       	adc	r27, r1
    4764:	ec 81       	ldd	r30, Y+4	; 0x04
    4766:	fd 81       	ldd	r31, Y+5	; 0x05
    4768:	83 a3       	std	Z+35, r24	; 0x23
    476a:	94 a3       	std	Z+36, r25	; 0x24
    476c:	a5 a3       	std	Z+37, r26	; 0x25
    476e:	b6 a3       	std	Z+38, r27	; 0x26
    4770:	1a c0       	rjmp	.+52     	; 0x47a6 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
    4772:	ec 81       	ldd	r30, Y+4	; 0x04
    4774:	fd 81       	ldd	r31, Y+5	; 0x05
    4776:	88 85       	ldd	r24, Y+8	; 0x08
    4778:	99 85       	ldd	r25, Y+9	; 0x09
    477a:	aa 85       	ldd	r26, Y+10	; 0x0a
    477c:	bb 85       	ldd	r27, Y+11	; 0x0b
    477e:	83 a3       	std	Z+35, r24	; 0x23
    4780:	94 a3       	std	Z+36, r25	; 0x24
    4782:	a5 a3       	std	Z+37, r26	; 0x25
    4784:	b6 a3       	std	Z+38, r27	; 0x26
    4786:	0f c0       	rjmp	.+30     	; 0x47a6 <xTaskGenericNotifyFromISR+0x12e>
					break;

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
    4788:	8b 81       	ldd	r24, Y+3	; 0x03
    478a:	82 30       	cpi	r24, 0x02	; 2
    478c:	59 f0       	breq	.+22     	; 0x47a4 <xTaskGenericNotifyFromISR+0x12c>
					{
						pxTCB->ulNotifiedValue = ulValue;
    478e:	ec 81       	ldd	r30, Y+4	; 0x04
    4790:	fd 81       	ldd	r31, Y+5	; 0x05
    4792:	88 85       	ldd	r24, Y+8	; 0x08
    4794:	99 85       	ldd	r25, Y+9	; 0x09
    4796:	aa 85       	ldd	r26, Y+10	; 0x0a
    4798:	bb 85       	ldd	r27, Y+11	; 0x0b
    479a:	83 a3       	std	Z+35, r24	; 0x23
    479c:	94 a3       	std	Z+36, r25	; 0x24
    479e:	a5 a3       	std	Z+37, r26	; 0x25
    47a0:	b6 a3       	std	Z+38, r27	; 0x26
    47a2:	01 c0       	rjmp	.+2      	; 0x47a6 <xTaskGenericNotifyFromISR+0x12e>
					}
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
    47a4:	1a 82       	std	Y+2, r1	; 0x02

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    47a6:	8b 81       	ldd	r24, Y+3	; 0x03
    47a8:	81 30       	cpi	r24, 0x01	; 1
    47aa:	09 f0       	breq	.+2      	; 0x47ae <xTaskGenericNotifyFromISR+0x136>
    47ac:	50 c0       	rjmp	.+160    	; 0x484e <xTaskGenericNotifyFromISR+0x1d6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    47ae:	80 91 c3 04 	lds	r24, 0x04C3
    47b2:	88 23       	and	r24, r24
    47b4:	61 f5       	brne	.+88     	; 0x480e <xTaskGenericNotifyFromISR+0x196>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    47b6:	8c 81       	ldd	r24, Y+4	; 0x04
    47b8:	9d 81       	ldd	r25, Y+5	; 0x05
    47ba:	02 96       	adiw	r24, 0x02	; 2
    47bc:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    47c0:	ec 81       	ldd	r30, Y+4	; 0x04
    47c2:	fd 81       	ldd	r31, Y+5	; 0x05
    47c4:	96 89       	ldd	r25, Z+22	; 0x16
    47c6:	80 91 b9 04 	lds	r24, 0x04B9
    47ca:	89 17       	cp	r24, r25
    47cc:	28 f4       	brcc	.+10     	; 0x47d8 <xTaskGenericNotifyFromISR+0x160>
    47ce:	ec 81       	ldd	r30, Y+4	; 0x04
    47d0:	fd 81       	ldd	r31, Y+5	; 0x05
    47d2:	86 89       	ldd	r24, Z+22	; 0x16
    47d4:	80 93 b9 04 	sts	0x04B9, r24
    47d8:	ec 81       	ldd	r30, Y+4	; 0x04
    47da:	fd 81       	ldd	r31, Y+5	; 0x05
    47dc:	86 89       	ldd	r24, Z+22	; 0x16
    47de:	28 2f       	mov	r18, r24
    47e0:	30 e0       	ldi	r19, 0x00	; 0
    47e2:	c9 01       	movw	r24, r18
    47e4:	88 0f       	add	r24, r24
    47e6:	99 1f       	adc	r25, r25
    47e8:	88 0f       	add	r24, r24
    47ea:	99 1f       	adc	r25, r25
    47ec:	88 0f       	add	r24, r24
    47ee:	99 1f       	adc	r25, r25
    47f0:	82 0f       	add	r24, r18
    47f2:	93 1f       	adc	r25, r19
    47f4:	ac 01       	movw	r20, r24
    47f6:	4c 53       	subi	r20, 0x3C	; 60
    47f8:	5b 4f       	sbci	r21, 0xFB	; 251
    47fa:	8c 81       	ldd	r24, Y+4	; 0x04
    47fc:	9d 81       	ldd	r25, Y+5	; 0x05
    47fe:	9c 01       	movw	r18, r24
    4800:	2e 5f       	subi	r18, 0xFE	; 254
    4802:	3f 4f       	sbci	r19, 0xFF	; 255
    4804:	ca 01       	movw	r24, r20
    4806:	b9 01       	movw	r22, r18
    4808:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
    480c:	0a c0       	rjmp	.+20     	; 0x4822 <xTaskGenericNotifyFromISR+0x1aa>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    480e:	8c 81       	ldd	r24, Y+4	; 0x04
    4810:	9d 81       	ldd	r25, Y+5	; 0x05
    4812:	9c 01       	movw	r18, r24
    4814:	24 5f       	subi	r18, 0xF4	; 244
    4816:	3f 4f       	sbci	r19, 0xFF	; 255
    4818:	89 e1       	ldi	r24, 0x19	; 25
    481a:	95 e0       	ldi	r25, 0x05	; 5
    481c:	b9 01       	movw	r22, r18
    481e:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    4822:	ec 81       	ldd	r30, Y+4	; 0x04
    4824:	fd 81       	ldd	r31, Y+5	; 0x05
    4826:	96 89       	ldd	r25, Z+22	; 0x16
    4828:	e0 91 b3 04 	lds	r30, 0x04B3
    482c:	f0 91 b4 04 	lds	r31, 0x04B4
    4830:	86 89       	ldd	r24, Z+22	; 0x16
    4832:	89 17       	cp	r24, r25
    4834:	60 f4       	brcc	.+24     	; 0x484e <xTaskGenericNotifyFromISR+0x1d6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    4836:	8f 85       	ldd	r24, Y+15	; 0x0f
    4838:	98 89       	ldd	r25, Y+16	; 0x10
    483a:	00 97       	sbiw	r24, 0x00	; 0
    483c:	29 f0       	breq	.+10     	; 0x4848 <xTaskGenericNotifyFromISR+0x1d0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    483e:	ef 85       	ldd	r30, Y+15	; 0x0f
    4840:	f8 89       	ldd	r31, Y+16	; 0x10
    4842:	81 e0       	ldi	r24, 0x01	; 1
    4844:	80 83       	st	Z, r24
    4846:	03 c0       	rjmp	.+6      	; 0x484e <xTaskGenericNotifyFromISR+0x1d6>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    4848:	81 e0       	ldi	r24, 0x01	; 1
    484a:	80 93 bc 04 	sts	0x04BC, r24
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
    484e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
    4850:	62 96       	adiw	r28, 0x12	; 18
    4852:	0f b6       	in	r0, 0x3f	; 63
    4854:	f8 94       	cli
    4856:	de bf       	out	0x3e, r29	; 62
    4858:	0f be       	out	0x3f, r0	; 63
    485a:	cd bf       	out	0x3d, r28	; 61
    485c:	cf 91       	pop	r28
    485e:	df 91       	pop	r29
    4860:	1f 91       	pop	r17
    4862:	0f 91       	pop	r16
    4864:	ff 90       	pop	r15
    4866:	ef 90       	pop	r14
    4868:	08 95       	ret

0000486a <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
    486a:	df 93       	push	r29
    486c:	cf 93       	push	r28
    486e:	cd b7       	in	r28, 0x3d	; 61
    4870:	de b7       	in	r29, 0x3e	; 62
    4872:	28 97       	sbiw	r28, 0x08	; 8
    4874:	0f b6       	in	r0, 0x3f	; 63
    4876:	f8 94       	cli
    4878:	de bf       	out	0x3e, r29	; 62
    487a:	0f be       	out	0x3f, r0	; 63
    487c:	cd bf       	out	0x3d, r28	; 61
    487e:	9e 83       	std	Y+6, r25	; 0x06
    4880:	8d 83       	std	Y+5, r24	; 0x05
    4882:	78 87       	std	Y+8, r23	; 0x08
    4884:	6f 83       	std	Y+7, r22	; 0x07
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = ( TCB_t * ) xTaskToNotify;
    4886:	8d 81       	ldd	r24, Y+5	; 0x05
    4888:	9e 81       	ldd	r25, Y+6	; 0x06
    488a:	9c 83       	std	Y+4, r25	; 0x04
    488c:	8b 83       	std	Y+3, r24	; 0x03

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    488e:	19 82       	std	Y+1, r1	; 0x01
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
    4890:	eb 81       	ldd	r30, Y+3	; 0x03
    4892:	fc 81       	ldd	r31, Y+4	; 0x04
    4894:	87 a1       	ldd	r24, Z+39	; 0x27
    4896:	8a 83       	std	Y+2, r24	; 0x02
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
    4898:	eb 81       	ldd	r30, Y+3	; 0x03
    489a:	fc 81       	ldd	r31, Y+4	; 0x04
    489c:	82 e0       	ldi	r24, 0x02	; 2
    489e:	87 a3       	std	Z+39, r24	; 0x27

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
    48a0:	eb 81       	ldd	r30, Y+3	; 0x03
    48a2:	fc 81       	ldd	r31, Y+4	; 0x04
    48a4:	83 a1       	ldd	r24, Z+35	; 0x23
    48a6:	94 a1       	ldd	r25, Z+36	; 0x24
    48a8:	a5 a1       	ldd	r26, Z+37	; 0x25
    48aa:	b6 a1       	ldd	r27, Z+38	; 0x26
    48ac:	01 96       	adiw	r24, 0x01	; 1
    48ae:	a1 1d       	adc	r26, r1
    48b0:	b1 1d       	adc	r27, r1
    48b2:	eb 81       	ldd	r30, Y+3	; 0x03
    48b4:	fc 81       	ldd	r31, Y+4	; 0x04
    48b6:	83 a3       	std	Z+35, r24	; 0x23
    48b8:	94 a3       	std	Z+36, r25	; 0x24
    48ba:	a5 a3       	std	Z+37, r26	; 0x25
    48bc:	b6 a3       	std	Z+38, r27	; 0x26

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
    48be:	8a 81       	ldd	r24, Y+2	; 0x02
    48c0:	81 30       	cpi	r24, 0x01	; 1
    48c2:	09 f0       	breq	.+2      	; 0x48c6 <vTaskNotifyGiveFromISR+0x5c>
    48c4:	50 c0       	rjmp	.+160    	; 0x4966 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    48c6:	80 91 c3 04 	lds	r24, 0x04C3
    48ca:	88 23       	and	r24, r24
    48cc:	61 f5       	brne	.+88     	; 0x4926 <vTaskNotifyGiveFromISR+0xbc>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
    48ce:	8b 81       	ldd	r24, Y+3	; 0x03
    48d0:	9c 81       	ldd	r25, Y+4	; 0x04
    48d2:	02 96       	adiw	r24, 0x02	; 2
    48d4:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
    48d8:	eb 81       	ldd	r30, Y+3	; 0x03
    48da:	fc 81       	ldd	r31, Y+4	; 0x04
    48dc:	96 89       	ldd	r25, Z+22	; 0x16
    48de:	80 91 b9 04 	lds	r24, 0x04B9
    48e2:	89 17       	cp	r24, r25
    48e4:	28 f4       	brcc	.+10     	; 0x48f0 <vTaskNotifyGiveFromISR+0x86>
    48e6:	eb 81       	ldd	r30, Y+3	; 0x03
    48e8:	fc 81       	ldd	r31, Y+4	; 0x04
    48ea:	86 89       	ldd	r24, Z+22	; 0x16
    48ec:	80 93 b9 04 	sts	0x04B9, r24
    48f0:	eb 81       	ldd	r30, Y+3	; 0x03
    48f2:	fc 81       	ldd	r31, Y+4	; 0x04
    48f4:	86 89       	ldd	r24, Z+22	; 0x16
    48f6:	28 2f       	mov	r18, r24
    48f8:	30 e0       	ldi	r19, 0x00	; 0
    48fa:	c9 01       	movw	r24, r18
    48fc:	88 0f       	add	r24, r24
    48fe:	99 1f       	adc	r25, r25
    4900:	88 0f       	add	r24, r24
    4902:	99 1f       	adc	r25, r25
    4904:	88 0f       	add	r24, r24
    4906:	99 1f       	adc	r25, r25
    4908:	82 0f       	add	r24, r18
    490a:	93 1f       	adc	r25, r19
    490c:	ac 01       	movw	r20, r24
    490e:	4c 53       	subi	r20, 0x3C	; 60
    4910:	5b 4f       	sbci	r21, 0xFB	; 251
    4912:	8b 81       	ldd	r24, Y+3	; 0x03
    4914:	9c 81       	ldd	r25, Y+4	; 0x04
    4916:	9c 01       	movw	r18, r24
    4918:	2e 5f       	subi	r18, 0xFE	; 254
    491a:	3f 4f       	sbci	r19, 0xFF	; 255
    491c:	ca 01       	movw	r24, r20
    491e:	b9 01       	movw	r22, r18
    4920:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
    4924:	0a c0       	rjmp	.+20     	; 0x493a <vTaskNotifyGiveFromISR+0xd0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    4926:	8b 81       	ldd	r24, Y+3	; 0x03
    4928:	9c 81       	ldd	r25, Y+4	; 0x04
    492a:	9c 01       	movw	r18, r24
    492c:	24 5f       	subi	r18, 0xF4	; 244
    492e:	3f 4f       	sbci	r19, 0xFF	; 255
    4930:	89 e1       	ldi	r24, 0x19	; 25
    4932:	95 e0       	ldi	r25, 0x05	; 5
    4934:	b9 01       	movw	r22, r18
    4936:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
    493a:	eb 81       	ldd	r30, Y+3	; 0x03
    493c:	fc 81       	ldd	r31, Y+4	; 0x04
    493e:	96 89       	ldd	r25, Z+22	; 0x16
    4940:	e0 91 b3 04 	lds	r30, 0x04B3
    4944:	f0 91 b4 04 	lds	r31, 0x04B4
    4948:	86 89       	ldd	r24, Z+22	; 0x16
    494a:	89 17       	cp	r24, r25
    494c:	60 f4       	brcc	.+24     	; 0x4966 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
    494e:	8f 81       	ldd	r24, Y+7	; 0x07
    4950:	98 85       	ldd	r25, Y+8	; 0x08
    4952:	00 97       	sbiw	r24, 0x00	; 0
    4954:	29 f0       	breq	.+10     	; 0x4960 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
    4956:	ef 81       	ldd	r30, Y+7	; 0x07
    4958:	f8 85       	ldd	r31, Y+8	; 0x08
    495a:	81 e0       	ldi	r24, 0x01	; 1
    495c:	80 83       	st	Z, r24
    495e:	03 c0       	rjmp	.+6      	; 0x4966 <vTaskNotifyGiveFromISR+0xfc>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
    4960:	81 e0       	ldi	r24, 0x01	; 1
    4962:	80 93 bc 04 	sts	0x04BC, r24
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
    4966:	28 96       	adiw	r28, 0x08	; 8
    4968:	0f b6       	in	r0, 0x3f	; 63
    496a:	f8 94       	cli
    496c:	de bf       	out	0x3e, r29	; 62
    496e:	0f be       	out	0x3f, r0	; 63
    4970:	cd bf       	out	0x3d, r28	; 61
    4972:	cf 91       	pop	r28
    4974:	df 91       	pop	r29
    4976:	08 95       	ret

00004978 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
    4978:	df 93       	push	r29
    497a:	cf 93       	push	r28
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
    4980:	27 97       	sbiw	r28, 0x07	; 7
    4982:	0f b6       	in	r0, 0x3f	; 63
    4984:	f8 94       	cli
    4986:	de bf       	out	0x3e, r29	; 62
    4988:	0f be       	out	0x3f, r0	; 63
    498a:	cd bf       	out	0x3d, r28	; 61
    498c:	9d 83       	std	Y+5, r25	; 0x05
    498e:	8c 83       	std	Y+4, r24	; 0x04
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
    4990:	8c 81       	ldd	r24, Y+4	; 0x04
    4992:	9d 81       	ldd	r25, Y+5	; 0x05
    4994:	00 97       	sbiw	r24, 0x00	; 0
    4996:	39 f4       	brne	.+14     	; 0x49a6 <xTaskNotifyStateClear+0x2e>
    4998:	80 91 b3 04 	lds	r24, 0x04B3
    499c:	90 91 b4 04 	lds	r25, 0x04B4
    49a0:	9f 83       	std	Y+7, r25	; 0x07
    49a2:	8e 83       	std	Y+6, r24	; 0x06
    49a4:	04 c0       	rjmp	.+8      	; 0x49ae <xTaskNotifyStateClear+0x36>
    49a6:	8c 81       	ldd	r24, Y+4	; 0x04
    49a8:	9d 81       	ldd	r25, Y+5	; 0x05
    49aa:	9f 83       	std	Y+7, r25	; 0x07
    49ac:	8e 83       	std	Y+6, r24	; 0x06
    49ae:	8e 81       	ldd	r24, Y+6	; 0x06
    49b0:	9f 81       	ldd	r25, Y+7	; 0x07
    49b2:	9b 83       	std	Y+3, r25	; 0x03
    49b4:	8a 83       	std	Y+2, r24	; 0x02

		taskENTER_CRITICAL();
    49b6:	0f b6       	in	r0, 0x3f	; 63
    49b8:	f8 94       	cli
    49ba:	0f 92       	push	r0
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    49bc:	ea 81       	ldd	r30, Y+2	; 0x02
    49be:	fb 81       	ldd	r31, Y+3	; 0x03
    49c0:	87 a1       	ldd	r24, Z+39	; 0x27
    49c2:	82 30       	cpi	r24, 0x02	; 2
    49c4:	31 f4       	brne	.+12     	; 0x49d2 <xTaskNotifyStateClear+0x5a>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    49c6:	ea 81       	ldd	r30, Y+2	; 0x02
    49c8:	fb 81       	ldd	r31, Y+3	; 0x03
    49ca:	17 a2       	std	Z+39, r1	; 0x27
				xReturn = pdPASS;
    49cc:	81 e0       	ldi	r24, 0x01	; 1
    49ce:	89 83       	std	Y+1, r24	; 0x01
    49d0:	01 c0       	rjmp	.+2      	; 0x49d4 <xTaskNotifyStateClear+0x5c>
			}
			else
			{
				xReturn = pdFAIL;
    49d2:	19 82       	std	Y+1, r1	; 0x01
			}
		}
		taskEXIT_CRITICAL();
    49d4:	0f 90       	pop	r0
    49d6:	0f be       	out	0x3f, r0	; 63

		return xReturn;
    49d8:	89 81       	ldd	r24, Y+1	; 0x01
	}
    49da:	27 96       	adiw	r28, 0x07	; 7
    49dc:	0f b6       	in	r0, 0x3f	; 63
    49de:	f8 94       	cli
    49e0:	de bf       	out	0x3e, r29	; 62
    49e2:	0f be       	out	0x3f, r0	; 63
    49e4:	cd bf       	out	0x3d, r28	; 61
    49e6:	cf 91       	pop	r28
    49e8:	df 91       	pop	r29
    49ea:	08 95       	ret

000049ec <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    49ec:	df 93       	push	r29
    49ee:	cf 93       	push	r28
    49f0:	cd b7       	in	r28, 0x3d	; 61
    49f2:	de b7       	in	r29, 0x3e	; 62
    49f4:	27 97       	sbiw	r28, 0x07	; 7
    49f6:	0f b6       	in	r0, 0x3f	; 63
    49f8:	f8 94       	cli
    49fa:	de bf       	out	0x3e, r29	; 62
    49fc:	0f be       	out	0x3f, r0	; 63
    49fe:	cd bf       	out	0x3d, r28	; 61
    4a00:	9e 83       	std	Y+6, r25	; 0x06
    4a02:	8d 83       	std	Y+5, r24	; 0x05
    4a04:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    4a06:	80 91 b7 04 	lds	r24, 0x04B7
    4a0a:	90 91 b8 04 	lds	r25, 0x04B8
    4a0e:	9a 83       	std	Y+2, r25	; 0x02
    4a10:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    4a12:	80 91 b3 04 	lds	r24, 0x04B3
    4a16:	90 91 b4 04 	lds	r25, 0x04B4
    4a1a:	02 96       	adiw	r24, 0x02	; 2
    4a1c:	0e 94 08 0b 	call	0x1610	; 0x1610 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
    4a20:	8d 81       	ldd	r24, Y+5	; 0x05
    4a22:	9e 81       	ldd	r25, Y+6	; 0x06
    4a24:	2f ef       	ldi	r18, 0xFF	; 255
    4a26:	8f 3f       	cpi	r24, 0xFF	; 255
    4a28:	92 07       	cpc	r25, r18
    4a2a:	81 f4       	brne	.+32     	; 0x4a4c <prvAddCurrentTaskToDelayedList+0x60>
    4a2c:	8f 81       	ldd	r24, Y+7	; 0x07
    4a2e:	88 23       	and	r24, r24
    4a30:	69 f0       	breq	.+26     	; 0x4a4c <prvAddCurrentTaskToDelayedList+0x60>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4a32:	80 91 b3 04 	lds	r24, 0x04B3
    4a36:	90 91 b4 04 	lds	r25, 0x04B4
    4a3a:	9c 01       	movw	r18, r24
    4a3c:	2e 5f       	subi	r18, 0xFE	; 254
    4a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a40:	8b e2       	ldi	r24, 0x2B	; 43
    4a42:	95 e0       	ldi	r25, 0x05	; 5
    4a44:	b9 01       	movw	r22, r18
    4a46:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vListInsertEnd>
    4a4a:	43 c0       	rjmp	.+134    	; 0x4ad2 <prvAddCurrentTaskToDelayedList+0xe6>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
    4a4c:	29 81       	ldd	r18, Y+1	; 0x01
    4a4e:	3a 81       	ldd	r19, Y+2	; 0x02
    4a50:	8d 81       	ldd	r24, Y+5	; 0x05
    4a52:	9e 81       	ldd	r25, Y+6	; 0x06
    4a54:	82 0f       	add	r24, r18
    4a56:	93 1f       	adc	r25, r19
    4a58:	9c 83       	std	Y+4, r25	; 0x04
    4a5a:	8b 83       	std	Y+3, r24	; 0x03

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    4a5c:	e0 91 b3 04 	lds	r30, 0x04B3
    4a60:	f0 91 b4 04 	lds	r31, 0x04B4
    4a64:	8b 81       	ldd	r24, Y+3	; 0x03
    4a66:	9c 81       	ldd	r25, Y+4	; 0x04
    4a68:	93 83       	std	Z+3, r25	; 0x03
    4a6a:	82 83       	std	Z+2, r24	; 0x02

			if( xTimeToWake < xConstTickCount )
    4a6c:	2b 81       	ldd	r18, Y+3	; 0x03
    4a6e:	3c 81       	ldd	r19, Y+4	; 0x04
    4a70:	89 81       	ldd	r24, Y+1	; 0x01
    4a72:	9a 81       	ldd	r25, Y+2	; 0x02
    4a74:	28 17       	cp	r18, r24
    4a76:	39 07       	cpc	r19, r25
    4a78:	70 f4       	brcc	.+28     	; 0x4a96 <prvAddCurrentTaskToDelayedList+0xaa>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4a7a:	80 91 17 05 	lds	r24, 0x0517
    4a7e:	90 91 18 05 	lds	r25, 0x0518
    4a82:	20 91 b3 04 	lds	r18, 0x04B3
    4a86:	30 91 b4 04 	lds	r19, 0x04B4
    4a8a:	2e 5f       	subi	r18, 0xFE	; 254
    4a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a8e:	b9 01       	movw	r22, r18
    4a90:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vListInsert>
    4a94:	1e c0       	rjmp	.+60     	; 0x4ad2 <prvAddCurrentTaskToDelayedList+0xe6>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    4a96:	40 91 15 05 	lds	r20, 0x0515
    4a9a:	50 91 16 05 	lds	r21, 0x0516
    4a9e:	80 91 b3 04 	lds	r24, 0x04B3
    4aa2:	90 91 b4 04 	lds	r25, 0x04B4
    4aa6:	9c 01       	movw	r18, r24
    4aa8:	2e 5f       	subi	r18, 0xFE	; 254
    4aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    4aac:	ca 01       	movw	r24, r20
    4aae:	b9 01       	movw	r22, r18
    4ab0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
    4ab4:	20 91 bf 04 	lds	r18, 0x04BF
    4ab8:	30 91 c0 04 	lds	r19, 0x04C0
    4abc:	8b 81       	ldd	r24, Y+3	; 0x03
    4abe:	9c 81       	ldd	r25, Y+4	; 0x04
    4ac0:	82 17       	cp	r24, r18
    4ac2:	93 07       	cpc	r25, r19
    4ac4:	30 f4       	brcc	.+12     	; 0x4ad2 <prvAddCurrentTaskToDelayedList+0xe6>
				{
					xNextTaskUnblockTime = xTimeToWake;
    4ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    4aca:	90 93 c0 04 	sts	0x04C0, r25
    4ace:	80 93 bf 04 	sts	0x04BF, r24

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    4ad2:	27 96       	adiw	r28, 0x07	; 7
    4ad4:	0f b6       	in	r0, 0x3f	; 63
    4ad6:	f8 94       	cli
    4ad8:	de bf       	out	0x3e, r29	; 62
    4ada:	0f be       	out	0x3f, r0	; 63
    4adc:	cd bf       	out	0x3d, r28	; 61
    4ade:	cf 91       	pop	r28
    4ae0:	df 91       	pop	r29
    4ae2:	08 95       	ret

00004ae4 <led>:
#include "FreeRTOS/FreeRTOS.h"
#include "FreeRTOS/task.h"
#include <avr/io.h>
#include <util/delay.h>

void led(void){
    4ae4:	df 93       	push	r29
    4ae6:	cf 93       	push	r28
    4ae8:	cd b7       	in	r28, 0x3d	; 61
    4aea:	de b7       	in	r29, 0x3e	; 62
    4aec:	2e 97       	sbiw	r28, 0x0e	; 14
    4aee:	0f b6       	in	r0, 0x3f	; 63
    4af0:	f8 94       	cli
    4af2:	de bf       	out	0x3e, r29	; 62
    4af4:	0f be       	out	0x3f, r0	; 63
    4af6:	cd bf       	out	0x3d, r28	; 61
	DDRA = 1;
    4af8:	ea e3       	ldi	r30, 0x3A	; 58
    4afa:	f0 e0       	ldi	r31, 0x00	; 0
    4afc:	81 e0       	ldi	r24, 0x01	; 1
    4afe:	80 83       	st	Z, r24
	while(1){
		PORTA ^= 1;
    4b00:	ab e3       	ldi	r26, 0x3B	; 59
    4b02:	b0 e0       	ldi	r27, 0x00	; 0
    4b04:	eb e3       	ldi	r30, 0x3B	; 59
    4b06:	f0 e0       	ldi	r31, 0x00	; 0
    4b08:	90 81       	ld	r25, Z
    4b0a:	81 e0       	ldi	r24, 0x01	; 1
    4b0c:	89 27       	eor	r24, r25
    4b0e:	8c 93       	st	X, r24
    4b10:	80 e0       	ldi	r24, 0x00	; 0
    4b12:	90 e0       	ldi	r25, 0x00	; 0
    4b14:	aa ef       	ldi	r26, 0xFA	; 250
    4b16:	b3 e4       	ldi	r27, 0x43	; 67
    4b18:	8b 87       	std	Y+11, r24	; 0x0b
    4b1a:	9c 87       	std	Y+12, r25	; 0x0c
    4b1c:	ad 87       	std	Y+13, r26	; 0x0d
    4b1e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b20:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b22:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b24:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b26:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b28:	20 e0       	ldi	r18, 0x00	; 0
    4b2a:	30 e0       	ldi	r19, 0x00	; 0
    4b2c:	4a e7       	ldi	r20, 0x7A	; 122
    4b2e:	55 e4       	ldi	r21, 0x45	; 69
    4b30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b34:	dc 01       	movw	r26, r24
    4b36:	cb 01       	movw	r24, r22
    4b38:	8f 83       	std	Y+7, r24	; 0x07
    4b3a:	98 87       	std	Y+8, r25	; 0x08
    4b3c:	a9 87       	std	Y+9, r26	; 0x09
    4b3e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b40:	6f 81       	ldd	r22, Y+7	; 0x07
    4b42:	78 85       	ldd	r23, Y+8	; 0x08
    4b44:	89 85       	ldd	r24, Y+9	; 0x09
    4b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	30 e0       	ldi	r19, 0x00	; 0
    4b4c:	40 e8       	ldi	r20, 0x80	; 128
    4b4e:	5f e3       	ldi	r21, 0x3F	; 63
    4b50:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b54:	88 23       	and	r24, r24
    4b56:	2c f4       	brge	.+10     	; 0x4b62 <led+0x7e>
		__ticks = 1;
    4b58:	81 e0       	ldi	r24, 0x01	; 1
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	9e 83       	std	Y+6, r25	; 0x06
    4b5e:	8d 83       	std	Y+5, r24	; 0x05
    4b60:	3f c0       	rjmp	.+126    	; 0x4be0 <led+0xfc>
	else if (__tmp > 65535)
    4b62:	6f 81       	ldd	r22, Y+7	; 0x07
    4b64:	78 85       	ldd	r23, Y+8	; 0x08
    4b66:	89 85       	ldd	r24, Y+9	; 0x09
    4b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b6a:	20 e0       	ldi	r18, 0x00	; 0
    4b6c:	3f ef       	ldi	r19, 0xFF	; 255
    4b6e:	4f e7       	ldi	r20, 0x7F	; 127
    4b70:	57 e4       	ldi	r21, 0x47	; 71
    4b72:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4b76:	18 16       	cp	r1, r24
    4b78:	4c f5       	brge	.+82     	; 0x4bcc <led+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b80:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b82:	20 e0       	ldi	r18, 0x00	; 0
    4b84:	30 e0       	ldi	r19, 0x00	; 0
    4b86:	40 e2       	ldi	r20, 0x20	; 32
    4b88:	51 e4       	ldi	r21, 0x41	; 65
    4b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b8e:	dc 01       	movw	r26, r24
    4b90:	cb 01       	movw	r24, r22
    4b92:	bc 01       	movw	r22, r24
    4b94:	cd 01       	movw	r24, r26
    4b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b9a:	dc 01       	movw	r26, r24
    4b9c:	cb 01       	movw	r24, r22
    4b9e:	9e 83       	std	Y+6, r25	; 0x06
    4ba0:	8d 83       	std	Y+5, r24	; 0x05
    4ba2:	0f c0       	rjmp	.+30     	; 0x4bc2 <led+0xde>
    4ba4:	80 e9       	ldi	r24, 0x90	; 144
    4ba6:	91 e0       	ldi	r25, 0x01	; 1
    4ba8:	9c 83       	std	Y+4, r25	; 0x04
    4baa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4bac:	8b 81       	ldd	r24, Y+3	; 0x03
    4bae:	9c 81       	ldd	r25, Y+4	; 0x04
    4bb0:	01 97       	sbiw	r24, 0x01	; 1
    4bb2:	f1 f7       	brne	.-4      	; 0x4bb0 <led+0xcc>
    4bb4:	9c 83       	std	Y+4, r25	; 0x04
    4bb6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    4bba:	9e 81       	ldd	r25, Y+6	; 0x06
    4bbc:	01 97       	sbiw	r24, 0x01	; 1
    4bbe:	9e 83       	std	Y+6, r25	; 0x06
    4bc0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    4bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    4bc6:	00 97       	sbiw	r24, 0x00	; 0
    4bc8:	69 f7       	brne	.-38     	; 0x4ba4 <led+0xc0>
    4bca:	9a cf       	rjmp	.-204    	; 0x4b00 <led+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    4bce:	78 85       	ldd	r23, Y+8	; 0x08
    4bd0:	89 85       	ldd	r24, Y+9	; 0x09
    4bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    4bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bd8:	dc 01       	movw	r26, r24
    4bda:	cb 01       	movw	r24, r22
    4bdc:	9e 83       	std	Y+6, r25	; 0x06
    4bde:	8d 83       	std	Y+5, r24	; 0x05
    4be0:	8d 81       	ldd	r24, Y+5	; 0x05
    4be2:	9e 81       	ldd	r25, Y+6	; 0x06
    4be4:	9a 83       	std	Y+2, r25	; 0x02
    4be6:	89 83       	std	Y+1, r24	; 0x01
    4be8:	89 81       	ldd	r24, Y+1	; 0x01
    4bea:	9a 81       	ldd	r25, Y+2	; 0x02
    4bec:	01 97       	sbiw	r24, 0x01	; 1
    4bee:	f1 f7       	brne	.-4      	; 0x4bec <led+0x108>
    4bf0:	9a 83       	std	Y+2, r25	; 0x02
    4bf2:	89 83       	std	Y+1, r24	; 0x01
    4bf4:	85 cf       	rjmp	.-246    	; 0x4b00 <led+0x1c>

00004bf6 <main>:
	}
}

/*-----------------------------------------------------------*/

int main(void) {
    4bf6:	ef 92       	push	r14
    4bf8:	ff 92       	push	r15
    4bfa:	0f 93       	push	r16
    4bfc:	df 93       	push	r29
    4bfe:	cf 93       	push	r28
    4c00:	cd b7       	in	r28, 0x3d	; 61
    4c02:	de b7       	in	r29, 0x3e	; 62

	xTaskCreate(led, "led", 100, NULL, 1, NULL);
    4c04:	82 e7       	ldi	r24, 0x72	; 114
    4c06:	95 e2       	ldi	r25, 0x25	; 37
    4c08:	25 e6       	ldi	r18, 0x65	; 101
    4c0a:	30 e0       	ldi	r19, 0x00	; 0
    4c0c:	b9 01       	movw	r22, r18
    4c0e:	44 e6       	ldi	r20, 0x64	; 100
    4c10:	50 e0       	ldi	r21, 0x00	; 0
    4c12:	20 e0       	ldi	r18, 0x00	; 0
    4c14:	30 e0       	ldi	r19, 0x00	; 0
    4c16:	01 e0       	ldi	r16, 0x01	; 1
    4c18:	ee 24       	eor	r14, r14
    4c1a:	ff 24       	eor	r15, r15
    4c1c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <xTaskCreate>
	/* In this port, to use preemptive scheduler define configUSE_PREEMPTION
	 as 1 in portmacro.h.  To use the cooperative scheduler define
	 configUSE_PREEMPTION as 0. */
	vTaskStartScheduler();
    4c20:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <vTaskStartScheduler>

	return 0;
    4c24:	80 e0       	ldi	r24, 0x00	; 0
    4c26:	90 e0       	ldi	r25, 0x00	; 0
}
    4c28:	cf 91       	pop	r28
    4c2a:	df 91       	pop	r29
    4c2c:	0f 91       	pop	r16
    4c2e:	ff 90       	pop	r15
    4c30:	ef 90       	pop	r14
    4c32:	08 95       	ret

00004c34 <__prologue_saves__>:
    4c34:	2f 92       	push	r2
    4c36:	3f 92       	push	r3
    4c38:	4f 92       	push	r4
    4c3a:	5f 92       	push	r5
    4c3c:	6f 92       	push	r6
    4c3e:	7f 92       	push	r7
    4c40:	8f 92       	push	r8
    4c42:	9f 92       	push	r9
    4c44:	af 92       	push	r10
    4c46:	bf 92       	push	r11
    4c48:	cf 92       	push	r12
    4c4a:	df 92       	push	r13
    4c4c:	ef 92       	push	r14
    4c4e:	ff 92       	push	r15
    4c50:	0f 93       	push	r16
    4c52:	1f 93       	push	r17
    4c54:	cf 93       	push	r28
    4c56:	df 93       	push	r29
    4c58:	cd b7       	in	r28, 0x3d	; 61
    4c5a:	de b7       	in	r29, 0x3e	; 62
    4c5c:	ca 1b       	sub	r28, r26
    4c5e:	db 0b       	sbc	r29, r27
    4c60:	0f b6       	in	r0, 0x3f	; 63
    4c62:	f8 94       	cli
    4c64:	de bf       	out	0x3e, r29	; 62
    4c66:	0f be       	out	0x3f, r0	; 63
    4c68:	cd bf       	out	0x3d, r28	; 61
    4c6a:	09 94       	ijmp

00004c6c <__epilogue_restores__>:
    4c6c:	2a 88       	ldd	r2, Y+18	; 0x12
    4c6e:	39 88       	ldd	r3, Y+17	; 0x11
    4c70:	48 88       	ldd	r4, Y+16	; 0x10
    4c72:	5f 84       	ldd	r5, Y+15	; 0x0f
    4c74:	6e 84       	ldd	r6, Y+14	; 0x0e
    4c76:	7d 84       	ldd	r7, Y+13	; 0x0d
    4c78:	8c 84       	ldd	r8, Y+12	; 0x0c
    4c7a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4c7c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4c7e:	b9 84       	ldd	r11, Y+9	; 0x09
    4c80:	c8 84       	ldd	r12, Y+8	; 0x08
    4c82:	df 80       	ldd	r13, Y+7	; 0x07
    4c84:	ee 80       	ldd	r14, Y+6	; 0x06
    4c86:	fd 80       	ldd	r15, Y+5	; 0x05
    4c88:	0c 81       	ldd	r16, Y+4	; 0x04
    4c8a:	1b 81       	ldd	r17, Y+3	; 0x03
    4c8c:	aa 81       	ldd	r26, Y+2	; 0x02
    4c8e:	b9 81       	ldd	r27, Y+1	; 0x01
    4c90:	ce 0f       	add	r28, r30
    4c92:	d1 1d       	adc	r29, r1
    4c94:	0f b6       	in	r0, 0x3f	; 63
    4c96:	f8 94       	cli
    4c98:	de bf       	out	0x3e, r29	; 62
    4c9a:	0f be       	out	0x3f, r0	; 63
    4c9c:	cd bf       	out	0x3d, r28	; 61
    4c9e:	ed 01       	movw	r28, r26
    4ca0:	08 95       	ret

00004ca2 <memcpy>:
    4ca2:	fb 01       	movw	r30, r22
    4ca4:	dc 01       	movw	r26, r24
    4ca6:	02 c0       	rjmp	.+4      	; 0x4cac <memcpy+0xa>
    4ca8:	01 90       	ld	r0, Z+
    4caa:	0d 92       	st	X+, r0
    4cac:	41 50       	subi	r20, 0x01	; 1
    4cae:	50 40       	sbci	r21, 0x00	; 0
    4cb0:	d8 f7       	brcc	.-10     	; 0x4ca8 <memcpy+0x6>
    4cb2:	08 95       	ret

00004cb4 <_exit>:
    4cb4:	f8 94       	cli

00004cb6 <__stop_program>:
    4cb6:	ff cf       	rjmp	.-2      	; 0x4cb6 <__stop_program>
